{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/charts/CityComparisonChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { supabase } from '../../supabaseClient';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst CityComparisonChart = ({\n  userPreferences\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchCityData = async () => {\n      try {\n        // Get data for multiple cities for the last 7 days\n        const {\n          data: cityData,\n          error: cityError\n        } = await supabase.from('weather_data').select('*').gte('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()).order('created_at', {\n          ascending: false\n        });\n        if (cityError) throw cityError;\n        if (!cityData || cityData.length === 0) {\n          setError('No data available');\n          setIsLoading(false);\n          return;\n        }\n\n        // Group data by cities\n        const cityAverages = cityData.reduce((acc, item) => {\n          if (!acc[item.city]) {\n            acc[item.city] = {\n              pm25Values: [],\n              pm10Values: []\n            };\n          }\n          if (item.pm25) acc[item.city].pm25Values.push(item.pm25);\n          if (item.pm10) acc[item.city].pm10Values.push(item.pm10);\n          return acc;\n        }, {});\n\n        // Calculate averages for each city\n        const averages = Object.entries(cityAverages).map(([city, values]) => ({\n          city,\n          pm25Average: values.pm25Values.length > 0 ? values.pm25Values.reduce((sum, val) => sum + val, 0) / values.pm25Values.length : 0,\n          pm10Average: values.pm10Values.length > 0 ? values.pm10Values.reduce((sum, val) => sum + val, 0) / values.pm10Values.length : 0\n        }));\n\n        // Sort cities by PM2.5 levels\n        averages.sort((a, b) => b.pm25Average - a.pm25Average);\n        const formattedData = {\n          labels: averages.map(city => city.city),\n          datasets: [{\n            label: 'PM2.5 Average',\n            data: averages.map(city => city.pm25Average),\n            backgroundColor: '#D9F6BB',\n            borderColor: '#043A24',\n            borderWidth: 1\n          }, {\n            label: 'PM10 Average',\n            data: averages.map(city => city.pm10Average),\n            backgroundColor: '#A9ED8A',\n            borderColor: '#043A24',\n            borderWidth: 1\n          }]\n        };\n        setChartData(formattedData);\n        setIsLoading(false);\n      } catch (err) {\n        console.error('Error fetching city comparison data:', err);\n        setError('Failed to fetch data');\n        setIsLoading(false);\n      }\n    };\n    fetchCityData();\n  }, []);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading city comparison data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 21\n  }, this);\n  if (!chartData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No city comparison data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 26\n  }, this);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'μg/m³'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'bottom'\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            let label = context.dataset.label || '';\n            if (label) {\n              label += ': ';\n            }\n            if (context.parsed.y !== null) {\n              label += context.parsed.y.toFixed(1) + ' μg/m³';\n            }\n            return label;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-side\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(CityComparisonChart, \"+U+KmwUQ08o91z1Gf8Cwp1b98lo=\");\n_c = CityComparisonChart;\nexport default CityComparisonChart;\nvar _c;\n$RefreshReg$(_c, \"CityComparisonChart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","supabase","jsxDEV","_jsxDEV","register","CityComparisonChart","userPreferences","_s","chartData","setChartData","isLoading","setIsLoading","error","setError","fetchCityData","data","cityData","cityError","from","select","gte","Date","now","toISOString","order","ascending","length","cityAverages","reduce","acc","item","city","pm25Values","pm10Values","pm25","push","pm10","averages","Object","entries","map","values","pm25Average","sum","val","pm10Average","sort","a","b","formattedData","labels","datasets","label","backgroundColor","borderColor","borderWidth","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","scales","y","beginAtZero","title","display","text","plugins","legend","position","tooltip","callbacks","context","dataset","parsed","toFixed","className","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/charts/CityComparisonChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { supabase } from '../../supabaseClient';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst CityComparisonChart = ({ userPreferences }) => {\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchCityData = async () => {\n      try {\n        // Get data for multiple cities for the last 7 days\n        const { data: cityData, error: cityError } = await supabase\n          .from('weather_data')\n          .select('*')\n          .gte('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())\n          .order('created_at', { ascending: false });\n\n        if (cityError) throw cityError;\n\n        if (!cityData || cityData.length === 0) {\n          setError('No data available');\n          setIsLoading(false);\n          return;\n        }\n\n        // Group data by cities\n        const cityAverages = cityData.reduce((acc, item) => {\n          if (!acc[item.city]) {\n            acc[item.city] = {\n              pm25Values: [],\n              pm10Values: []\n            };\n          }\n          if (item.pm25) acc[item.city].pm25Values.push(item.pm25);\n          if (item.pm10) acc[item.city].pm10Values.push(item.pm10);\n          return acc;\n        }, {});\n\n        // Calculate averages for each city\n        const averages = Object.entries(cityAverages).map(([city, values]) => ({\n          city,\n          pm25Average: values.pm25Values.length > 0 \n            ? values.pm25Values.reduce((sum, val) => sum + val, 0) / values.pm25Values.length \n            : 0,\n          pm10Average: values.pm10Values.length > 0 \n            ? values.pm10Values.reduce((sum, val) => sum + val, 0) / values.pm10Values.length \n            : 0\n        }));\n\n        // Sort cities by PM2.5 levels\n        averages.sort((a, b) => b.pm25Average - a.pm25Average);\n\n        const formattedData = {\n          labels: averages.map(city => city.city),\n          datasets: [\n            {\n              label: 'PM2.5 Average',\n              data: averages.map(city => city.pm25Average),\n              backgroundColor: '#D9F6BB',\n              borderColor: '#043A24',\n              borderWidth: 1\n            },\n            {\n              label: 'PM10 Average',\n              data: averages.map(city => city.pm10Average),\n              backgroundColor: '#A9ED8A',\n              borderColor: '#043A24',\n              borderWidth: 1\n            }\n          ]\n        };\n\n        setChartData(formattedData);\n        setIsLoading(false);\n      } catch (err) {\n        console.error('Error fetching city comparison data:', err);\n        setError('Failed to fetch data');\n        setIsLoading(false);\n      }\n    };\n\n    fetchCityData();\n  }, []);\n\n  if (isLoading) return <div>Loading city comparison data...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!chartData) return <div>No city comparison data available</div>;\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'μg/m³'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'bottom'\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context) {\n            let label = context.dataset.label || '';\n            if (label) {\n              label += ': ';\n            }\n            if (context.parsed.y !== null) {\n              label += context.parsed.y.toFixed(1) + ' μg/m³';\n            }\n            return label;\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"chart-side\">\n      <div className=\"chart-wrapper\">\n        <Bar data={chartData} options={options} />\n      </div>\n    </div>\n  );\n};\n\nexport default CityComparisonChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}