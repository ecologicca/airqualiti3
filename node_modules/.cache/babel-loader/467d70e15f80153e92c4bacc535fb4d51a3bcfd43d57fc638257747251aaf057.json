{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/components/BrainHealthPM2_5.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateAnxSym96 = (previousWeekAverage, currentWeekAverage) => {\n  // Base odds ratio is 1.14 for every 5 μg/m³ increase\n  const threshold = 5; // 5 μg/m³ threshold\n  const baseOddsRatio = 1.14;\n\n  // Calculate the difference between weeks\n  const difference = currentWeekAverage - previousWeekAverage;\n\n  // Calculate how many units of 5 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym961 = (previousMonthAverage, currentMonthAverage) => {\n  // Base odds ratio is 1.34 for every 5 μg/m³ increase over 30 days\n  const threshold = 5; // 5 μg/m³ threshold\n  const baseOddsRatio = 1.34;\n\n  // Calculate the difference between months\n  const difference = currentMonthAverage - previousMonthAverage;\n\n  // Calculate how many units of 5 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym962 = (previous180Average, current180Average) => {\n  // Base odds ratio is 1.55 for every 5 μg/m³ increase over 180 days\n  const threshold = 5; // 5 μg/m³ threshold\n  const baseOddsRatio = 1.55;\n\n  // Calculate the difference between 180-day periods\n  const difference = current180Average - previous180Average;\n\n  // Calculate how many units of 5 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym963 = (previousYearAverage, currentYearAverage) => {\n  // Base odds ratio is 1.33 for every 5 μg/m³ increase over 365 days\n  const threshold = 5; // 5 μg/m³ threshold\n  const baseOddsRatio = 1.33;\n\n  // Calculate the difference between yearly periods\n  const difference = currentYearAverage - previousYearAverage;\n\n  // Calculate how many units of 5 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym964 = (previous4YearAverage, current4YearAverage) => {\n  // Base odds ratio is 1.29 for every 5 μg/m³ increase over 4 years\n  const threshold = 5; // 5 μg/m³ threshold\n  const baseOddsRatio = 1.29;\n\n  // Calculate the difference between 4-year periods\n  const difference = current4YearAverage - previous4YearAverage;\n\n  // Calculate how many units of 5 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym30 = (previousMonthAverage, currentMonthAverage) => {\n  // Base odds ratio is 1.49 for every 5 μg/m³ increase month over month\n  const threshold = 5; // 5 μg/m³ threshold\n  const baseOddsRatio = 1.49;\n\n  // Calculate the difference between months\n  const difference = currentMonthAverage - previousMonthAverage;\n\n  // Calculate how many units of 5 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym00 = (previousMonthAverage, currentMonthAverage) => {\n  // Base odds ratio is 1.12 for every 10 μg/m³ increase month over month\n  const threshold = 10; // 10 μg/m³ threshold\n  const baseOddsRatio = 1.12;\n\n  // Calculate the difference between months\n  const difference = currentMonthAverage - previousMonthAverage;\n\n  // Calculate how many units of 10 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxDis32 = (previousQuarterAverage, currentQuarterAverage) => {\n  // Base hazard ratio is 1.097 for every 1.13 μg/m³ increase quarter over quarter\n  const threshold = 1.13; // 1.13 μg/m³ threshold\n  const baseHazardRatio = 1.097;\n\n  // Calculate the difference between quarters\n  const difference = currentQuarterAverage - previousQuarterAverage;\n\n  // Calculate how many units of 1.13 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final hazard ratio (compound for each unit of 1.13 μg/m³)\n  const finalHazardRatio = units > 0 ? Math.pow(baseHazardRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    hazardRatio: finalHazardRatio.toFixed(3),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym001 = (previousQuarterAverage, currentQuarterAverage) => {\n  // Base odds ratio is 1.1 for every 10 μg/m³ increase quarter over quarter\n  const threshold = 10; // 10 μg/m³ threshold\n  const baseOddsRatio = 1.1;\n\n  // Calculate the difference between quarters\n  const difference = currentQuarterAverage - previousQuarterAverage;\n\n  // Calculate how many units of 10 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym002 = (previousSixMonthAverage, currentSixMonthAverage) => {\n  // Base odds ratio is 1.14 for every 10 μg/m³ increase per 6-month period\n  const threshold = 10; // 10 μg/m³ threshold\n  const baseOddsRatio = 1.14;\n\n  // Calculate the difference between 6-month periods\n  const difference = currentSixMonthAverage - previousSixMonthAverage;\n\n  // Calculate how many units of 10 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym003 = (previousYearAverage, currentYearAverage) => {\n  // Base odds ratio is 1.15 for every 10 μg/m³ increase per 12-month period\n  const threshold = 10; // 10 μg/m³ threshold\n  const baseOddsRatio = 1.15;\n\n  // Calculate the difference between yearly periods\n  const difference = currentYearAverage - previousYearAverage;\n\n  // Calculate how many units of 10 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym05 = (previousYearAverage, currentYearAverage) => {\n  // Base odds ratio is 1.14 for every 25 μg/m³ increase year over year\n  const threshold = 25; // 25 μg/m³ threshold\n  const baseOddsRatio = 1.14;\n\n  // Calculate the difference between years\n  const difference = currentYearAverage - previousYearAverage;\n\n  // Calculate how many units of 25 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 25 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst BrainHealthPM2_5 = ({\n  city = 'Toronto'\n}) => {\n  _s();\n  const [averages, setAverages] = useState({\n    week: {\n      current: 0,\n      previous: 0\n    },\n    month: {\n      current: 0,\n      previous: 0\n    },\n    sixMonth: {\n      current: 0,\n      previous: 0\n    },\n    year: {\n      current: 0,\n      previous: 0\n    },\n    fourYear: {\n      current: 0,\n      previous: 0\n    }\n  });\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchAverages();\n  }, [city]);\n  const fetchAverages = async () => {\n    try {\n      setLoading(true);\n      const now = new Date();\n\n      // Define time ranges\n      const ranges = {\n        week: {\n          current: [new Date(now - 7 * 24 * 60 * 60 * 1000), now],\n          previous: [new Date(now - 14 * 24 * 60 * 60 * 1000), new Date(now - 7 * 24 * 60 * 60 * 1000)]\n        },\n        month: {\n          current: [new Date(now - 30 * 24 * 60 * 60 * 1000), now],\n          previous: [new Date(now - 60 * 24 * 60 * 60 * 1000), new Date(now - 30 * 24 * 60 * 60 * 1000)]\n        }\n        // ... other ranges remain the same\n      };\n      const newAverages = {};\n\n      // Fetch data for each time range\n      for (const [period, dateRange] of Object.entries(ranges)) {\n        // Fetch current period data\n        const {\n          data: currentData,\n          error: currentError\n        } = await supabase.from('weather_data').select('pm25').eq('city', city).gte('created_at', dateRange.current[0].toISOString()).lte('created_at', dateRange.current[1].toISOString());\n\n        // Fetch previous period data\n        const {\n          data: previousData,\n          error: previousError\n        } = await supabase.from('weather_data').select('pm25').eq('city', city).gte('created_at', dateRange.previous[0].toISOString()).lte('created_at', dateRange.previous[1].toISOString());\n        if (currentError || previousError) throw new Error('Error fetching data');\n        newAverages[period] = {\n          current: currentData.reduce((acc, val) => acc + val.pm25, 0) / currentData.length,\n          previous: previousData.reduce((acc, val) => acc + val.pm25, 0) / previousData.length\n        };\n      }\n      setAverages(newAverages);\n    } catch (error) {\n      console.error('Error fetching averages:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Calculate risks using the fetched averages\n  const weeklyAnxietyRisk = calculateAnxSym96(averages.week.previous, averages.week.current);\n  const monthlyAnxietyRisk = calculateAnxSym961(averages.month.previous, averages.month.current);\n  // ... other risk calculations\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading brain health calculations...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"brain-health-calculator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"PM2.5 Brain Health Analysis for \", city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Weekly PM2.5 Anxiety Risk (AnxSym96)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"age-notice\",\n        children: \"Results applicable for adults over 65 years old\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Previous Week Average: \", averages.week.previous.toFixed(2), \" \\u03BCg/m\\xB3\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Current Week Average: \", averages.week.current.toFixed(2), \" \\u03BCg/m\\xB3\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Change in PM2.5: \", weeklyAnxietyRisk.difference, \" \\u03BCg/m\\xB3\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"7-Day Odds Ratio: \", weeklyAnxietyRisk.oddsRatio]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Risk Status: \", weeklyAnxietyRisk.increased ? `Increased risk of anxiety symptoms in elderly adults` : `No increased risk`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 9\n  }, this);\n};\n_s(BrainHealthPM2_5, \"q9JCOJDQUnqZlfF2kD3HM+w0a6c=\");\n_c = BrainHealthPM2_5;\nexport default BrainHealthPM2_5;\nvar _c;\n$RefreshReg$(_c, \"BrainHealthPM2_5\");","map":{"version":3,"names":["React","useState","useEffect","supabase","jsxDEV","_jsxDEV","calculateAnxSym96","previousWeekAverage","currentWeekAverage","threshold","baseOddsRatio","difference","units","finalOddsRatio","Math","pow","toFixed","oddsRatio","increased","calculateAnxSym961","previousMonthAverage","currentMonthAverage","calculateAnxSym962","previous180Average","current180Average","calculateAnxSym963","previousYearAverage","currentYearAverage","calculateAnxSym964","previous4YearAverage","current4YearAverage","calculateAnxSym30","calculateAnxSym00","calculateAnxDis32","previousQuarterAverage","currentQuarterAverage","baseHazardRatio","finalHazardRatio","hazardRatio","calculateAnxSym001","calculateAnxSym002","previousSixMonthAverage","currentSixMonthAverage","calculateAnxSym003","calculateAnxSym05","BrainHealthPM2_5","city","_s","averages","setAverages","week","current","previous","month","sixMonth","year","fourYear","loading","setLoading","fetchAverages","now","Date","ranges","newAverages","period","dateRange","Object","entries","data","currentData","error","currentError","from","select","eq","gte","toISOString","lte","previousData","previousError","Error","reduce","acc","val","pm25","length","console","weeklyAnxietyRisk","monthlyAnxietyRisk","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/components/BrainHealthPM2_5.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\n\nconst calculateAnxSym96 = (previousWeekAverage, currentWeekAverage) => {\n    // Base odds ratio is 1.14 for every 5 μg/m³ increase\n    const threshold = 5; // 5 μg/m³ threshold\n    const baseOddsRatio = 1.14;\n    \n    // Calculate the difference between weeks\n    const difference = currentWeekAverage - previousWeekAverage;\n    \n    // Calculate how many units of 5 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym961 = (previousMonthAverage, currentMonthAverage) => {\n    // Base odds ratio is 1.34 for every 5 μg/m³ increase over 30 days\n    const threshold = 5; // 5 μg/m³ threshold\n    const baseOddsRatio = 1.34;\n    \n    // Calculate the difference between months\n    const difference = currentMonthAverage - previousMonthAverage;\n    \n    // Calculate how many units of 5 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym962 = (previous180Average, current180Average) => {\n    // Base odds ratio is 1.55 for every 5 μg/m³ increase over 180 days\n    const threshold = 5; // 5 μg/m³ threshold\n    const baseOddsRatio = 1.55;\n    \n    // Calculate the difference between 180-day periods\n    const difference = current180Average - previous180Average;\n    \n    // Calculate how many units of 5 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym963 = (previousYearAverage, currentYearAverage) => {\n    // Base odds ratio is 1.33 for every 5 μg/m³ increase over 365 days\n    const threshold = 5; // 5 μg/m³ threshold\n    const baseOddsRatio = 1.33;\n    \n    // Calculate the difference between yearly periods\n    const difference = currentYearAverage - previousYearAverage;\n    \n    // Calculate how many units of 5 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym964 = (previous4YearAverage, current4YearAverage) => {\n    // Base odds ratio is 1.29 for every 5 μg/m³ increase over 4 years\n    const threshold = 5; // 5 μg/m³ threshold\n    const baseOddsRatio = 1.29;\n    \n    // Calculate the difference between 4-year periods\n    const difference = current4YearAverage - previous4YearAverage;\n    \n    // Calculate how many units of 5 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym30 = (previousMonthAverage, currentMonthAverage) => {\n    // Base odds ratio is 1.49 for every 5 μg/m³ increase month over month\n    const threshold = 5; // 5 μg/m³ threshold\n    const baseOddsRatio = 1.49;\n    \n    // Calculate the difference between months\n    const difference = currentMonthAverage - previousMonthAverage;\n    \n    // Calculate how many units of 5 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym00 = (previousMonthAverage, currentMonthAverage) => {\n    // Base odds ratio is 1.12 for every 10 μg/m³ increase month over month\n    const threshold = 10; // 10 μg/m³ threshold\n    const baseOddsRatio = 1.12;\n    \n    // Calculate the difference between months\n    const difference = currentMonthAverage - previousMonthAverage;\n    \n    // Calculate how many units of 10 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxDis32 = (previousQuarterAverage, currentQuarterAverage) => {\n    // Base hazard ratio is 1.097 for every 1.13 μg/m³ increase quarter over quarter\n    const threshold = 1.13; // 1.13 μg/m³ threshold\n    const baseHazardRatio = 1.097;\n    \n    // Calculate the difference between quarters\n    const difference = currentQuarterAverage - previousQuarterAverage;\n    \n    // Calculate how many units of 1.13 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final hazard ratio (compound for each unit of 1.13 μg/m³)\n    const finalHazardRatio = units > 0 ? Math.pow(baseHazardRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        hazardRatio: finalHazardRatio.toFixed(3),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym001 = (previousQuarterAverage, currentQuarterAverage) => {\n    // Base odds ratio is 1.1 for every 10 μg/m³ increase quarter over quarter\n    const threshold = 10; // 10 μg/m³ threshold\n    const baseOddsRatio = 1.1;\n    \n    // Calculate the difference between quarters\n    const difference = currentQuarterAverage - previousQuarterAverage;\n    \n    // Calculate how many units of 10 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym002 = (previousSixMonthAverage, currentSixMonthAverage) => {\n    // Base odds ratio is 1.14 for every 10 μg/m³ increase per 6-month period\n    const threshold = 10; // 10 μg/m³ threshold\n    const baseOddsRatio = 1.14;\n    \n    // Calculate the difference between 6-month periods\n    const difference = currentSixMonthAverage - previousSixMonthAverage;\n    \n    // Calculate how many units of 10 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym003 = (previousYearAverage, currentYearAverage) => {\n    // Base odds ratio is 1.15 for every 10 μg/m³ increase per 12-month period\n    const threshold = 10; // 10 μg/m³ threshold\n    const baseOddsRatio = 1.15;\n    \n    // Calculate the difference between yearly periods\n    const difference = currentYearAverage - previousYearAverage;\n    \n    // Calculate how many units of 10 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym05 = (previousYearAverage, currentYearAverage) => {\n    // Base odds ratio is 1.14 for every 25 μg/m³ increase year over year\n    const threshold = 25; // 25 μg/m³ threshold\n    const baseOddsRatio = 1.14;\n    \n    // Calculate the difference between years\n    const difference = currentYearAverage - previousYearAverage;\n    \n    // Calculate how many units of 25 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 25 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst BrainHealthPM2_5 = ({ city = 'Toronto' }) => {\n    const [averages, setAverages] = useState({\n        week: { current: 0, previous: 0 },\n        month: { current: 0, previous: 0 },\n        sixMonth: { current: 0, previous: 0 },\n        year: { current: 0, previous: 0 },\n        fourYear: { current: 0, previous: 0 }\n    });\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        fetchAverages();\n    }, [city]);\n\n    const fetchAverages = async () => {\n        try {\n            setLoading(true);\n            const now = new Date();\n            \n            // Define time ranges\n            const ranges = {\n                week: {\n                    current: [new Date(now - 7 * 24 * 60 * 60 * 1000), now],\n                    previous: [new Date(now - 14 * 24 * 60 * 60 * 1000), new Date(now - 7 * 24 * 60 * 60 * 1000)]\n                },\n                month: {\n                    current: [new Date(now - 30 * 24 * 60 * 60 * 1000), now],\n                    previous: [new Date(now - 60 * 24 * 60 * 60 * 1000), new Date(now - 30 * 24 * 60 * 60 * 1000)]\n                },\n                // ... other ranges remain the same\n            };\n\n            const newAverages = {};\n\n            // Fetch data for each time range\n            for (const [period, dateRange] of Object.entries(ranges)) {\n                // Fetch current period data\n                const { data: currentData, error: currentError } = await supabase\n                    .from('weather_data')\n                    .select('pm25')\n                    .eq('city', city)\n                    .gte('created_at', dateRange.current[0].toISOString())\n                    .lte('created_at', dateRange.current[1].toISOString());\n\n                // Fetch previous period data\n                const { data: previousData, error: previousError } = await supabase\n                    .from('weather_data')\n                    .select('pm25')\n                    .eq('city', city)\n                    .gte('created_at', dateRange.previous[0].toISOString())\n                    .lte('created_at', dateRange.previous[1].toISOString());\n\n                if (currentError || previousError) throw new Error('Error fetching data');\n\n                newAverages[period] = {\n                    current: currentData.reduce((acc, val) => acc + val.pm25, 0) / currentData.length,\n                    previous: previousData.reduce((acc, val) => acc + val.pm25, 0) / previousData.length\n                };\n            }\n\n            setAverages(newAverages);\n        } catch (error) {\n            console.error('Error fetching averages:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Calculate risks using the fetched averages\n    const weeklyAnxietyRisk = calculateAnxSym96(averages.week.previous, averages.week.current);\n    const monthlyAnxietyRisk = calculateAnxSym961(averages.month.previous, averages.month.current);\n    // ... other risk calculations\n\n    if (loading) {\n        return <div>Loading brain health calculations...</div>;\n    }\n\n    return (\n        <div className=\"brain-health-calculator\">\n            <h2>PM2.5 Brain Health Analysis for {city}</h2>\n            \n            {/* Weekly Calculator */}\n            <div className=\"calculator-section\">\n                <h3>Weekly PM2.5 Anxiety Risk (AnxSym96)</h3>\n                <p className=\"age-notice\">Results applicable for adults over 65 years old</p>\n                <div className=\"results\">\n                    <p>Previous Week Average: {averages.week.previous.toFixed(2)} μg/m³</p>\n                    <p>Current Week Average: {averages.week.current.toFixed(2)} μg/m³</p>\n                    <p>Change in PM2.5: {weeklyAnxietyRisk.difference} μg/m³</p>\n                    <p>7-Day Odds Ratio: {weeklyAnxietyRisk.oddsRatio}</p>\n                    <p>Risk Status: {\n                        weeklyAnxietyRisk.increased \n                            ? `Increased risk of anxiety symptoms in elderly adults` \n                            : `No increased risk`\n                    }</p>\n                </div>\n            </div>\n\n            {/* Add similar sections for other time periods */}\n            \n        </div>\n    );\n};\n\nexport default BrainHealthPM2_5; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}