{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/charts/MonthlyAnxietyChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { supabase } from '../../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst MonthlyAnxietyChart = ({\n  userPreferences\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [algorithm, setAlgorithm] = useState({\n    threshold: 5,\n    base_ratio: 1.34\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Get the algorithm details\n        const {\n          data: algoData,\n          error: algoError\n        } = await supabase.from('risk_algorithms').select('*').eq('code', 'anxSym961');\n        if (algoError) throw algoError;\n        const algoDetails = (algoData === null || algoData === void 0 ? void 0 : algoData[0]) || {\n          threshold: 5,\n          base_ratio: 1.34,\n          period_days: 30\n        };\n        setAlgorithm(algoDetails);\n\n        // Get the PM2.5 data for the last 270 days (9 months)\n        const {\n          data: pmData,\n          error: pmError\n        } = await supabase.from('weather_data').select('*').eq('city', userPreferences.city).order('created_at', {\n          ascending: false\n        }).limit(270);\n        if (pmError) throw pmError;\n        if (!pmData || pmData.length === 0) {\n          setError('No weather data available for your city');\n          return;\n        }\n\n        // Group data by months (30-day periods)\n        const monthlyData = [];\n        for (let i = 0; i < pmData.length; i += 30) {\n          const monthData = pmData.slice(i, i + 30);\n          const startDate = new Date(monthData[0].created_at);\n\n          // Count days where PM2.5 exceeded threshold\n          const daysExceeded = monthData.filter(day => day.pm25 > algoDetails.threshold).length;\n\n          // Calculate average risk for the month\n          const baseRisk = userPreferences.anxietyLevel || 5;\n          const monthlyRiskIncrease = daysExceeded / 30 * algoDetails.base_ratio;\n          const monthlyRisk = baseRisk * (1 + monthlyRiskIncrease);\n          monthlyData.push({\n            x: startDate,\n            y: monthlyRisk,\n            daysExceeded,\n            totalDays: monthData.length,\n            threshold: algoDetails.threshold\n          });\n        }\n        const formattedData = {\n          labels: monthlyData.map(month => month.x),\n          datasets: [{\n            label: '9-Month Anxiety Risk Trend',\n            data: monthlyData,\n            borderColor: 'rgb(153, 102, 255)',\n            backgroundColor: 'rgba(153, 102, 255, 0.1)',\n            borderWidth: 2,\n            tension: 0.1\n          }]\n        };\n        setChartData(formattedData);\n      } catch (err) {\n        console.error('Error fetching monthly anxiety risk data:', err);\n        setError('Failed to load monthly anxiety risk data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (userPreferences.city) {\n      fetchData();\n    }\n  }, [userPreferences]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading monthly anxiety risk data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 21\n  }, this);\n  if (!chartData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No monthly anxiety risk data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 26\n  }, this);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'month',\n          displayFormats: {\n            month: 'MMM yyyy'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Month Starting'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Monthly Average Anxiety Risk Score'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: true,\n        position: 'bottom'\n      },\n      tooltip: {\n        callbacks: {\n          label: context => {\n            const data = context.raw;\n            return [`Risk Score: ${data.y.toFixed(2)}`, `Days PM2.5 > ${data.threshold}: ${data.daysExceeded}/${data.totalDays}`];\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlyAnxietyChart, \"KgTSBvon18hVeS5G/FBBYec1ENA=\");\n_c = MonthlyAnxietyChart;\nexport default MonthlyAnxietyChart;\nvar _c;\n$RefreshReg$(_c, \"MonthlyAnxietyChart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","supabase","jsxDEV","_jsxDEV","register","MonthlyAnxietyChart","userPreferences","_s","chartData","setChartData","isLoading","setIsLoading","error","setError","algorithm","setAlgorithm","threshold","base_ratio","fetchData","data","algoData","algoError","from","select","eq","algoDetails","period_days","pmData","pmError","city","order","ascending","limit","length","monthlyData","i","monthData","slice","startDate","Date","created_at","daysExceeded","filter","day","pm25","baseRisk","anxietyLevel","monthlyRiskIncrease","monthlyRisk","push","x","y","totalDays","formattedData","labels","map","month","datasets","label","borderColor","backgroundColor","borderWidth","tension","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","scales","type","time","unit","displayFormats","title","display","text","beginAtZero","plugins","legend","position","tooltip","callbacks","context","raw","toFixed","style","height","width","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/charts/MonthlyAnxietyChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { supabase } from '../../supabaseClient';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nconst MonthlyAnxietyChart = ({ userPreferences }) => {\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [algorithm, setAlgorithm] = useState({ threshold: 5, base_ratio: 1.34 });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Get the algorithm details\n        const { data: algoData, error: algoError } = await supabase\n          .from('risk_algorithms')\n          .select('*')\n          .eq('code', 'anxSym961');\n\n        if (algoError) throw algoError;\n        \n        const algoDetails = algoData?.[0] || {\n          threshold: 5,\n          base_ratio: 1.34,\n          period_days: 30\n        };\n        \n        setAlgorithm(algoDetails);\n\n        // Get the PM2.5 data for the last 270 days (9 months)\n        const { data: pmData, error: pmError } = await supabase\n          .from('weather_data')\n          .select('*')\n          .eq('city', userPreferences.city)\n          .order('created_at', { ascending: false })\n          .limit(270);\n\n        if (pmError) throw pmError;\n\n        if (!pmData || pmData.length === 0) {\n          setError('No weather data available for your city');\n          return;\n        }\n\n        // Group data by months (30-day periods)\n        const monthlyData = [];\n        for (let i = 0; i < pmData.length; i += 30) {\n          const monthData = pmData.slice(i, i + 30);\n          const startDate = new Date(monthData[0].created_at);\n          \n          // Count days where PM2.5 exceeded threshold\n          const daysExceeded = monthData.filter(day => day.pm25 > algoDetails.threshold).length;\n          \n          // Calculate average risk for the month\n          const baseRisk = userPreferences.anxietyLevel || 5;\n          const monthlyRiskIncrease = (daysExceeded / 30) * algoDetails.base_ratio;\n          const monthlyRisk = baseRisk * (1 + monthlyRiskIncrease);\n\n          monthlyData.push({\n            x: startDate,\n            y: monthlyRisk,\n            daysExceeded,\n            totalDays: monthData.length,\n            threshold: algoDetails.threshold\n          });\n        }\n\n        const formattedData = {\n          labels: monthlyData.map(month => month.x),\n          datasets: [{\n            label: '9-Month Anxiety Risk Trend',\n            data: monthlyData,\n            borderColor: 'rgb(153, 102, 255)',\n            backgroundColor: 'rgba(153, 102, 255, 0.1)',\n            borderWidth: 2,\n            tension: 0.1\n          }]\n        };\n\n        setChartData(formattedData);\n      } catch (err) {\n        console.error('Error fetching monthly anxiety risk data:', err);\n        setError('Failed to load monthly anxiety risk data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (userPreferences.city) {\n      fetchData();\n    }\n  }, [userPreferences]);\n\n  if (isLoading) return <div>Loading monthly anxiety risk data...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!chartData) return <div>No monthly anxiety risk data available</div>;\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'month',\n          displayFormats: {\n            month: 'MMM yyyy'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Month Starting'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Monthly Average Anxiety Risk Score'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: true,\n        position: 'bottom'\n      },\n      tooltip: {\n        callbacks: {\n          label: (context) => {\n            const data = context.raw;\n            return [\n              `Risk Score: ${data.y.toFixed(2)}`,\n              `Days PM2.5 > ${data.threshold}: ${data.daysExceeded}/${data.totalDays}`\n            ];\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div style={{ height: '400px', width: '100%' }}>\n      <Line data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default MonthlyAnxietyChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}