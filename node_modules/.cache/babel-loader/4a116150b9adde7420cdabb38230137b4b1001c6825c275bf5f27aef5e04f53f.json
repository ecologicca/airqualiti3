{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\nconst Dashboard = ({\n  user\n}) => {\n  _s();\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Original PM2.5': true,\n    'PM2.5 with HVAC (50% reduction)': true,\n    'PM2.5 with Ecologica (30% reduction)': true,\n    'PM2.5 with HVAC + Ecologica (65% total reduction)': true,\n    'Original PM10': true,\n    'PM10 with HVAC (50% reduction)': true,\n    'PM10 with Ecologica (30% reduction)': true,\n    'PM10 with HVAC + Ecologica (65% total reduction)': true\n  });\n  const processChartData = (data, pollutantType) => {\n    const datasets = [{\n      label: `Original ${pollutantType}`,\n      data: data.map(d => ({\n        x: d.date,\n        y: pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5'])\n      })),\n      borderColor: 'rgb(0, 100, 0)',\n      // Dark green\n      backgroundColor: 'rgba(0, 100, 0, 0.2)',\n      borderWidth: 2,\n      pointRadius: 0,\n      // Hide points\n      pointHoverRadius: 4,\n      // Show points on hover\n      fill: true,\n      // Enable area fill\n      tension: 0.4 // Smooth the line\n    }];\n    if (hasHVAC) {\n      datasets.push({\n        label: `${pollutantType} with HVAC`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateHVACReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(34, 139, 34)',\n        // Forest green\n        backgroundColor: 'rgba(34, 139, 34, 0.2)',\n        borderWidth: 2,\n        pointRadius: 0,\n        pointHoverRadius: 4,\n        fill: true,\n        tension: 0.4\n      });\n    }\n    if (hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Ecologica`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateEcologicaReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(60, 179, 113)',\n        // Medium sea green\n        backgroundColor: 'rgba(60, 179, 113, 0.2)',\n        borderWidth: 2,\n        pointRadius: 0,\n        pointHoverRadius: 4,\n        fill: true,\n        tension: 0.4\n      });\n    }\n    if (hasHVAC && hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Both`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateCombinedReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(144, 238, 144)',\n        // Light green\n        backgroundColor: 'rgba(144, 238, 144, 0.2)',\n        borderWidth: 2,\n        pointRadius: 0,\n        pointHoverRadius: 4,\n        fill: true,\n        tension: 0.4\n      });\n    }\n    return {\n      datasets\n    };\n  };\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      var _airQualityData$, _airQualityData$2;\n      console.log('Setting chart data with:', {\n        sampleDataPoint: airQualityData[0],\n        pm10Value: (_airQualityData$ = airQualityData[0]) === null || _airQualityData$ === void 0 ? void 0 : _airQualityData$['PM 10'],\n        pm25Value: (_airQualityData$2 = airQualityData[0]) === null || _airQualityData$2 === void 0 ? void 0 : _airQualityData$2['PM 2.5']\n      });\n      setChartData({\n        pm25: processChartData(airQualityData, 'PM2.5'),\n        pm10: processChartData(airQualityData, 'PM10')\n      });\n    }\n  }, [airQualityData, hasHVAC, hasEcologica, activeDatasets]);\n  const getLast30Days = data => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n    const validData = data.map(item => ({\n      date: new Date(item.Date),\n      'PM 2.5': parseFloat(item['PM 2.5']),\n      'PM 10': parseFloat(item['PM 10']),\n      city: item.City,\n      temp: item.Temp\n    })).filter(item => !isNaN(item.date.getTime()) && !isNaN(item['PM 10']) && !isNaN(item['PM 2.5'])).sort((a, b) => b.date - a.date);\n    console.log('Processed valid data first item:', validData[0]);\n    if (validData.length === 0) return [];\n    const mostRecentDate = validData[0].date;\n    const cutoffDate = new Date(mostRecentDate);\n    cutoffDate.setDate(cutoffDate.getDate() - 30);\n    return validData.filter(item => item.date >= cutoffDate).sort((a, b) => a.date - b.date);\n  };\n  useEffect(() => {\n    const fetchPreferences = async () => {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n        if (error) throw error;\n        if (data) {\n          setHasHVAC(data.has_HVAC);\n          setHasEcologica(data.has_ecologgica);\n          setFirstName(data.first_name || '');\n          setCity(data.city || 'Toronto');\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Raw data from API:', {\n          firstRow: data[0],\n          pm25Example: data[0]['PM 2.5'],\n          pm10Example: data[0]['PM 10']\n        });\n        const last30DaysData = getLast30Days(data);\n        setAirQualityData(last30DaysData);\n      } catch (error) {\n        console.error('Error fetching air quality:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (user) {\n      fetchPreferences();\n    }\n    fetchAirQualityData();\n  }, [user]);\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    },\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day'\n        },\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)'\n        },\n        ticks: {\n          callback: function (value) {\n            return value + ' ug/m³';\n          }\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} ug/m³`;\n          }\n        }\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          padding: 15\n        }\n      }\n    }\n  };\n  const calculateDaysOverThreshold = (data, pollutantType, threshold) => {\n    return data.filter(day => parseFloat(day[pollutantType]) > threshold).length;\n  };\n  const calculateDaysOverPeak = (data, pollutantType, threshold) => {\n    return data.filter(day => parseFloat(day[pollutantType]) > threshold).length;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [firstName ? `${firstName}'s ` : '', city, \" Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"PM2.5 Levels\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this), chartData && chartData.pm25 && /*#__PURE__*/_jsxDEV(Line, {\n              data: chartData.pm25,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-title\",\n              children: \"KEY DATA POINTS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-points\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 2.5', 10)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 30\n                  }, this), 10, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 2.5', 20)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 317,\n                    columnNumber: 30\n                  }, this), 20, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 316,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverPeak(airQualityData, 'PM 2.5', 50)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 326,\n                    columnNumber: 30\n                  }, this), 50, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 325,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"PM10 Levels\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 15\n            }, this), chartData && chartData.pm10 && /*#__PURE__*/_jsxDEV(Line, {\n              data: chartData.pm10,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-title\",\n              children: \"KEY DATA POINTS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-points\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 10', 20)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 358,\n                    columnNumber: 30\n                  }, this), 20, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 10', 40)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 367,\n                    columnNumber: 30\n                  }, this), 40, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverPeak(airQualityData, 'PM 10', 50)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 376,\n                    columnNumber: 30\n                  }, this), 50, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"dstkWP7POhn/u1HNwJ00lb5Kcv0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","jsxDEV","_jsxDEV","register","defaults","responsive","maintainAspectRatio","Dashboard","user","_s","airQualityData","setAirQualityData","chartData","setChartData","isLoading","setIsLoading","hasHVAC","setHasHVAC","hasEcologica","setHasEcologica","city","setCity","firstName","setFirstName","activeDatasets","setActiveDatasets","processChartData","data","pollutantType","datasets","label","map","d","x","date","y","parseFloat","borderColor","backgroundColor","borderWidth","pointRadius","pointHoverRadius","fill","tension","push","calculateHVACReduction","calculateEcologicaReduction","calculateCombinedReduction","length","_airQualityData$","_airQualityData$2","console","log","sampleDataPoint","pm10Value","pm25Value","pm25","pm10","getLast30Days","Array","isArray","validData","item","Date","City","temp","Temp","filter","isNaN","getTime","sort","a","b","mostRecentDate","cutoffDate","setDate","getDate","fetchPreferences","error","from","select","eq","id","single","has_HVAC","has_ecologgica","first_name","fetchAirQualityData","response","fetch","ok","Error","status","json","firstRow","pm25Example","pm10Example","last30DaysData","chartOptions","interaction","mode","axis","intersect","scales","type","time","unit","grid","display","color","beginAtZero","ticks","callback","value","plugins","tooltip","callbacks","context","dataset","parsed","toFixed","legend","position","labels","usePointStyle","padding","calculateDaysOverThreshold","threshold","day","calculateDaysOverPeak","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\n\nconst Dashboard = ({ user }) => {\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Original PM2.5': true,\n    'PM2.5 with HVAC (50% reduction)': true,\n    'PM2.5 with Ecologica (30% reduction)': true,\n    'PM2.5 with HVAC + Ecologica (65% total reduction)': true,\n    'Original PM10': true,\n    'PM10 with HVAC (50% reduction)': true,\n    'PM10 with Ecologica (30% reduction)': true,\n    'PM10 with HVAC + Ecologica (65% total reduction)': true\n  });\n\n  const processChartData = (data, pollutantType) => {\n    const datasets = [\n      {\n        label: `Original ${pollutantType}`,\n        data: data.map(d => ({\n          x: d.date,\n          y: pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5'])\n        })),\n        borderColor: 'rgb(0, 100, 0)', // Dark green\n        backgroundColor: 'rgba(0, 100, 0, 0.2)',\n        borderWidth: 2,\n        pointRadius: 0, // Hide points\n        pointHoverRadius: 4, // Show points on hover\n        fill: true, // Enable area fill\n        tension: 0.4, // Smooth the line\n      }\n    ];\n\n    if (hasHVAC) {\n      datasets.push({\n        label: `${pollutantType} with HVAC`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateHVACReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(34, 139, 34)', // Forest green\n        backgroundColor: 'rgba(34, 139, 34, 0.2)',\n        borderWidth: 2,\n        pointRadius: 0,\n        pointHoverRadius: 4,\n        fill: true,\n        tension: 0.4,\n      });\n    }\n\n    if (hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Ecologica`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateEcologicaReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(60, 179, 113)', // Medium sea green\n        backgroundColor: 'rgba(60, 179, 113, 0.2)',\n        borderWidth: 2,\n        pointRadius: 0,\n        pointHoverRadius: 4,\n        fill: true,\n        tension: 0.4,\n      });\n    }\n\n    if (hasHVAC && hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Both`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateCombinedReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(144, 238, 144)', // Light green\n        backgroundColor: 'rgba(144, 238, 144, 0.2)',\n        borderWidth: 2,\n        pointRadius: 0,\n        pointHoverRadius: 4,\n        fill: true,\n        tension: 0.4,\n      });\n    }\n\n    return { datasets };\n  };\n\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      console.log('Setting chart data with:', {\n        sampleDataPoint: airQualityData[0],\n        pm10Value: airQualityData[0]?.['PM 10'],\n        pm25Value: airQualityData[0]?.['PM 2.5']\n      });\n      \n      setChartData({\n        pm25: processChartData(airQualityData, 'PM2.5'),\n        pm10: processChartData(airQualityData, 'PM10')\n      });\n    }\n  }, [airQualityData, hasHVAC, hasEcologica, activeDatasets]);\n\n  const getLast30Days = (data) => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n\n    const validData = data\n      .map(item => ({\n        date: new Date(item.Date),\n        'PM 2.5': parseFloat(item['PM 2.5']),\n        'PM 10': parseFloat(item['PM 10']),\n        city: item.City,\n        temp: item.Temp\n      }))\n      .filter(item => \n        !isNaN(item.date.getTime()) && \n        !isNaN(item['PM 10']) && \n        !isNaN(item['PM 2.5'])\n      )\n      .sort((a, b) => b.date - a.date);\n\n    console.log('Processed valid data first item:', validData[0]);\n\n    if (validData.length === 0) return [];\n\n    const mostRecentDate = validData[0].date;\n    const cutoffDate = new Date(mostRecentDate);\n    cutoffDate.setDate(cutoffDate.getDate() - 30);\n\n    return validData\n      .filter(item => item.date >= cutoffDate)\n      .sort((a, b) => a.date - b.date);\n  };\n\n  useEffect(() => {\n    const fetchPreferences = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('user_preferences')\n          .select('*')\n          .eq('user_id', user.id)\n          .single();\n\n        if (error) throw error;\n\n        if (data) {\n          setHasHVAC(data.has_HVAC);\n          setHasEcologica(data.has_ecologgica);\n          setFirstName(data.first_name || '');\n          setCity(data.city || 'Toronto');\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Raw data from API:', {\n          firstRow: data[0],\n          pm25Example: data[0]['PM 2.5'],\n          pm10Example: data[0]['PM 10']\n        });\n        const last30DaysData = getLast30Days(data);\n        setAirQualityData(last30DaysData);\n      } catch (error) {\n        console.error('Error fetching air quality:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (user) {\n      fetchPreferences();\n    }\n    fetchAirQualityData();\n  }, [user]);\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    },\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day'\n        },\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)',\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)',\n        },\n        ticks: {\n          callback: function(value) {\n            return value + ' ug/m³';\n          }\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} ug/m³`;\n          }\n        }\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          padding: 15\n        }\n      }\n    }\n  };\n\n  const calculateDaysOverThreshold = (data, pollutantType, threshold) => {\n    return data.filter(day => \n      parseFloat(day[pollutantType]) > threshold\n    ).length;\n  };\n\n  const calculateDaysOverPeak = (data, pollutantType, threshold) => {\n    return data.filter(day => parseFloat(day[pollutantType]) > threshold).length;\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h1>{firstName ? `${firstName}'s ` : ''}{city} Dashboard</h1>\n      \n      <div className=\"dashboard-container\">\n        {/* PM2.5 Section */}\n        <div className=\"dashboard-section\">\n          <div className=\"content-wrapper\">\n            <div className=\"chart-side\">\n              <h2>PM2.5 Levels</h2>\n              {chartData && chartData.pm25 && (\n                <Line\n                  data={chartData.pm25}\n                  options={chartOptions}\n                />\n              )}\n            </div>\n            \n            <div className=\"data-side\">\n              <div className=\"key-data-title\">\n                KEY DATA POINTS\n              </div>\n              <div className=\"key-data-points\">\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 2.5', 10)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {10}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 2.5', 20)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {20}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverPeak(airQualityData, 'PM 2.5', 50)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {50}ug/m³\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* PM10 Section */}\n        <div className=\"dashboard-section\">\n          <div className=\"content-wrapper\">\n            <div className=\"chart-side\">\n              <h2>PM10 Levels</h2>\n              {chartData && chartData.pm10 && (\n                <Line\n                  data={chartData.pm10}\n                  options={chartOptions}\n                />\n              )}\n            </div>\n            \n            <div className=\"data-side\">\n              <div className=\"key-data-title\">\n                KEY DATA POINTS\n              </div>\n              <div className=\"key-data-points\">\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 10', 20)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {20}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 10', 40)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {40}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverPeak(airQualityData, 'PM 10', 50)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {50}ug/m³\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}