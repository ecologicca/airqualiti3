{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst Dashboard = ({\n  user\n}) => {\n  _s();\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n\n  // Add effect to process chart data when airQualityData changes\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      console.log('Processing air quality data for charts:', airQualityData);\n      const processedData = {\n        pm25: {\n          labels: airQualityData.map(d => new Date(d.timestamp)),\n          datasets: [{\n            label: 'PM2.5',\n            data: airQualityData.map(d => parseFloat(d.pm25)),\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        },\n        pm10: {\n          labels: airQualityData.map(d => new Date(d.timestamp)),\n          datasets: [{\n            label: 'PM10',\n            data: airQualityData.map(d => parseFloat(d.pm10)),\n            borderColor: 'rgb(153, 102, 255)',\n            tension: 0.1\n          }]\n        }\n      };\n      console.log('Processed chart data:', processedData);\n      setChartData(processedData);\n    }\n  }, [airQualityData]);\n  useEffect(() => {\n    const fetchPreferences = async () => {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n        if (error) throw error;\n        if (data) {\n          setHasHVAC(data.has_HVAC);\n          setHasEcologica(data.has_ecologgica);\n          setFirstName(data.first_name || '');\n          setCity(data.city || 'Toronto');\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Raw air quality data:', data);\n        setAirQualityData(data);\n      } catch (error) {\n        console.error('Error fetching air quality:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (user) {\n      fetchPreferences();\n    }\n    fetchAirQualityData();\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [firstName ? `${firstName}'s ` : '', city, \" Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        style: {\n          height: '400px',\n          width: '100%',\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"PM2.5 Levels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), chartData ? /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData.pm25,\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              x: {\n                type: 'time',\n                time: {\n                  unit: 'day'\n                }\n              },\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        style: {\n          height: '400px',\n          width: '100%',\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"PM10 Levels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), chartData ? /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData.pm10,\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              x: {\n                type: 'time',\n                time: {\n                  unit: 'day'\n                }\n              },\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"0DdcYgF0rjNGkHLlYGpWufk1CRw=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","jsxDEV","_jsxDEV","register","Dashboard","user","_s","airQualityData","setAirQualityData","chartData","setChartData","isLoading","setIsLoading","hasHVAC","setHasHVAC","hasEcologica","setHasEcologica","city","setCity","firstName","setFirstName","length","console","log","processedData","pm25","labels","map","d","Date","timestamp","datasets","label","data","parseFloat","borderColor","tension","pm10","fetchPreferences","error","from","select","eq","id","single","has_HVAC","has_ecologgica","first_name","fetchAirQualityData","response","fetch","ok","Error","status","json","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","width","position","options","responsive","maintainAspectRatio","scales","x","type","time","unit","y","beginAtZero","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nconst Dashboard = ({ user }) => {\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n\n  // Add effect to process chart data when airQualityData changes\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      console.log('Processing air quality data for charts:', airQualityData);\n      const processedData = {\n        pm25: {\n          labels: airQualityData.map(d => new Date(d.timestamp)),\n          datasets: [{\n            label: 'PM2.5',\n            data: airQualityData.map(d => parseFloat(d.pm25)),\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        },\n        pm10: {\n          labels: airQualityData.map(d => new Date(d.timestamp)),\n          datasets: [{\n            label: 'PM10',\n            data: airQualityData.map(d => parseFloat(d.pm10)),\n            borderColor: 'rgb(153, 102, 255)',\n            tension: 0.1\n          }]\n        }\n      };\n      console.log('Processed chart data:', processedData);\n      setChartData(processedData);\n    }\n  }, [airQualityData]);\n\n  useEffect(() => {\n    const fetchPreferences = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('user_preferences')\n          .select('*')\n          .eq('user_id', user.id)\n          .single();\n\n        if (error) throw error;\n\n        if (data) {\n          setHasHVAC(data.has_HVAC);\n          setHasEcologica(data.has_ecologgica);\n          setFirstName(data.first_name || '');\n          setCity(data.city || 'Toronto');\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Raw air quality data:', data);\n        setAirQualityData(data);\n      } catch (error) {\n        console.error('Error fetching air quality:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (user) {\n      fetchPreferences();\n    }\n    fetchAirQualityData();\n  }, [user]);\n\n  return (\n    <div className=\"dashboard\">\n      <h1>{firstName ? `${firstName}'s ` : ''}{city} Dashboard</h1>\n      \n      <div className=\"chart-container\">\n        <div className=\"chart\" style={{ height: '400px', width: '100%', position: 'relative' }}>\n          <h2>PM2.5 Levels</h2>\n          {chartData ? (\n            <Line\n              data={chartData.pm25}\n              options={{\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    type: 'time',\n                    time: {\n                      unit: 'day'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true\n                  }\n                }\n              }}\n            />\n          ) : (\n            <p>Loading data...</p>\n          )}\n        </div>\n        \n        <div className=\"chart\" style={{ height: '400px', width: '100%', position: 'relative' }}>\n          <h2>PM10 Levels</h2>\n          {chartData ? (\n            <Line\n              data={chartData.pm10}\n              options={{\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    type: 'time',\n                    time: {\n                      unit: 'day'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true\n                  }\n                }\n              }}\n            />\n          ) : (\n            <p>Loading data...</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,SAAS,QACJ,UAAU;AACjB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,0BAA0B;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAX,OAAO,CAACY,QAAQ,CACdX,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,SACF,CAAC;AAED,MAAMK,SAAS,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC4B,YAAY,EAAEC,eAAe,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC8B,IAAI,EAAEC,OAAO,CAAC,GAAG/B,QAAQ,CAAC,SAAS,CAAC;EAC3C,MAAM,CAACgC,SAAS,EAAEC,YAAY,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,IAAImB,cAAc,CAACc,MAAM,GAAG,CAAC,EAAE;MAC7BC,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEhB,cAAc,CAAC;MACtE,MAAMiB,aAAa,GAAG;QACpBC,IAAI,EAAE;UACJC,MAAM,EAAEnB,cAAc,CAACoB,GAAG,CAACC,CAAC,IAAI,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,CAAC;UACtDC,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,OAAO;YACdC,IAAI,EAAE1B,cAAc,CAACoB,GAAG,CAACC,CAAC,IAAIM,UAAU,CAACN,CAAC,CAACH,IAAI,CAAC,CAAC;YACjDU,WAAW,EAAE,mBAAmB;YAChCC,OAAO,EAAE;UACX,CAAC;QACH,CAAC;QACDC,IAAI,EAAE;UACJX,MAAM,EAAEnB,cAAc,CAACoB,GAAG,CAACC,CAAC,IAAI,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,CAAC;UACtDC,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,MAAM;YACbC,IAAI,EAAE1B,cAAc,CAACoB,GAAG,CAACC,CAAC,IAAIM,UAAU,CAACN,CAAC,CAACS,IAAI,CAAC,CAAC;YACjDF,WAAW,EAAE,oBAAoB;YACjCC,OAAO,EAAE;UACX,CAAC;QACH;MACF,CAAC;MACDd,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEC,aAAa,CAAC;MACnDd,YAAY,CAACc,aAAa,CAAC;IAC7B;EACF,CAAC,EAAE,CAACjB,cAAc,CAAC,CAAC;EAEpBnB,SAAS,CAAC,MAAM;IACd,MAAMkD,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAM;UAAEL,IAAI;UAAEM;QAAM,CAAC,GAAG,MAAMlD,QAAQ,CACnCmD,IAAI,CAAC,kBAAkB,CAAC,CACxBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,EAAErC,IAAI,CAACsC,EAAE,CAAC,CACtBC,MAAM,CAAC,CAAC;QAEX,IAAIL,KAAK,EAAE,MAAMA,KAAK;QAEtB,IAAIN,IAAI,EAAE;UACRnB,UAAU,CAACmB,IAAI,CAACY,QAAQ,CAAC;UACzB7B,eAAe,CAACiB,IAAI,CAACa,cAAc,CAAC;UACpC1B,YAAY,CAACa,IAAI,CAACc,UAAU,IAAI,EAAE,CAAC;UACnC7B,OAAO,CAACe,IAAI,CAAChB,IAAI,IAAI,SAAS,CAAC;QACjC;MACF,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACdjB,OAAO,CAACiB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAED,MAAMS,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,CAAC;QACxE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;QAC3D;QACA,MAAMpB,IAAI,GAAG,MAAMgB,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClChC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEU,IAAI,CAAC;QAC1CzB,iBAAiB,CAACyB,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdjB,OAAO,CAACiB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD,CAAC,SAAS;QACR3B,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAED,IAAIP,IAAI,EAAE;MACRiC,gBAAgB,CAAC,CAAC;IACpB;IACAU,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAAC3C,IAAI,CAAC,CAAC;EAEV,oBACEH,OAAA;IAAKqD,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBtD,OAAA;MAAAsD,QAAA,GAAKrC,SAAS,GAAG,GAAGA,SAAS,KAAK,GAAG,EAAE,EAAEF,IAAI,EAAC,YAAU;IAAA;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE7D1D,OAAA;MAAKqD,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BtD,OAAA;QAAKqD,SAAS,EAAC,OAAO;QAACM,KAAK,EAAE;UAAEC,MAAM,EAAE,OAAO;UAAEC,KAAK,EAAE,MAAM;UAAEC,QAAQ,EAAE;QAAW,CAAE;QAAAR,QAAA,gBACrFtD,OAAA;UAAAsD,QAAA,EAAI;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACpBnD,SAAS,gBACRP,OAAA,CAACF,IAAI;UACHiC,IAAI,EAAExB,SAAS,CAACgB,IAAK;UACrBwC,OAAO,EAAE;YACPC,UAAU,EAAE,IAAI;YAChBC,mBAAmB,EAAE,KAAK;YAC1BC,MAAM,EAAE;cACNC,CAAC,EAAE;gBACDC,IAAI,EAAE,MAAM;gBACZC,IAAI,EAAE;kBACJC,IAAI,EAAE;gBACR;cACF,CAAC;cACDC,CAAC,EAAE;gBACDC,WAAW,EAAE;cACf;YACF;UACF;QAAE;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,gBAEF1D,OAAA;UAAAsD,QAAA,EAAG;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CACtB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAEN1D,OAAA;QAAKqD,SAAS,EAAC,OAAO;QAACM,KAAK,EAAE;UAAEC,MAAM,EAAE,OAAO;UAAEC,KAAK,EAAE,MAAM;UAAEC,QAAQ,EAAE;QAAW,CAAE;QAAAR,QAAA,gBACrFtD,OAAA;UAAAsD,QAAA,EAAI;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACnBnD,SAAS,gBACRP,OAAA,CAACF,IAAI;UACHiC,IAAI,EAAExB,SAAS,CAAC4B,IAAK;UACrB4B,OAAO,EAAE;YACPC,UAAU,EAAE,IAAI;YAChBC,mBAAmB,EAAE,KAAK;YAC1BC,MAAM,EAAE;cACNC,CAAC,EAAE;gBACDC,IAAI,EAAE,MAAM;gBACZC,IAAI,EAAE;kBACJC,IAAI,EAAE;gBACR;cACF,CAAC;cACDC,CAAC,EAAE;gBACDC,WAAW,EAAE;cACf;YACF;UACF;QAAE;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,gBAEF1D,OAAA;UAAAsD,QAAA,EAAG;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CACtB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtD,EAAA,CA7IIF,SAAS;AAAAuE,EAAA,GAATvE,SAAS;AA+If,eAAeA,SAAS;AAAC,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}