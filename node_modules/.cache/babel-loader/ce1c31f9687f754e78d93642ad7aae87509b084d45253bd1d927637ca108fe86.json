{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\nconst calculateHVACReduction = value => {\n  return value * 0.7; // 30% reduction\n};\nconst calculateEcologicaReduction = value => {\n  return value * 0.6; // 40% reduction\n};\nconst calculateCombinedReduction = value => {\n  return value * 0.5; // 50% reduction\n};\nconst calculateDeeperSleepMinutes = (data, hasHVAC, hasEcologica) => {\n  const getAdjustedValue = value => {\n    if (hasHVAC && hasEcologica) {\n      return calculateCombinedReduction(value);\n    } else if (hasHVAC) {\n      return calculateHVACReduction(value);\n    } else if (hasEcologica) {\n      return calculateEcologicaReduction(value);\n    }\n    return value;\n  };\n\n  // Count days where PM2.5 is 5 or under after reductions\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  // Calculate total minutes of deeper sleep\n  // days × 8 hours × 60 minutes\n  const deeperSleepMinutes = daysUnderThreshold * 8 * 60;\n  return deeperSleepMinutes;\n};\nconst calculateAnxietyRisk = (baseLevel, pm10) => {\n  if (pm10 >= 10) {\n    const increase = pm10 / 10;\n    const riskIncrease = increase * 0.12; // 12% increase per 10mg\n    return Math.min(10, baseLevel * (1 + riskIncrease));\n  }\n  return baseLevel;\n};\nconst Dashboard = () => {\n  _s();\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Original PM2.5': true,\n    'PM2.5 with HVAC': false,\n    'PM2.5 with Ecologica': false,\n    'PM2.5 with Both': false,\n    'Original PM10': true,\n    'PM10 with HVAC': false,\n    'PM10 with Ecologica': false,\n    'PM10 with Both': false\n  });\n  const [anxietyLevel, setAnxietyLevel] = useState(5);\n  const [anxietyChartData, setAnxietyChartData] = useState(null);\n  const processChartData = (data, metric) => {\n    return {\n      labels: data.map(d => d.date || d.timestamp),\n      datasets: [{\n        label: metric,\n        data: data.map(d => parseFloat(d[metric])),\n        borderColor: metric === 'PM2.5' ? '#90c789' : '#7ab073',\n        backgroundColor: metric === 'PM2.5' ? 'rgba(144, 199, 137, 0.1)' : 'rgba(122, 176, 115, 0.1)',\n        borderWidth: 2,\n        tension: 0.1\n      }]\n    };\n  };\n  const processAnxietyChartData = data => {\n    return {\n      labels: data.map(d => d.date || d.timestamp),\n      datasets: [{\n        label: 'Predicted Anxiety Level',\n        data: data.map(d => ({\n          x: d.date || d.timestamp,\n          y: calculateAnxietyRisk(anxietyLevel, parseFloat(d['PM10']))\n        })),\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.1)',\n        borderWidth: 2,\n        tension: 0.1\n      }]\n    };\n  };\n  const fetchUserPreferences = async () => {\n    try {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) return;\n      const {\n        data,\n        error\n      } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n      if (error) throw error;\n      if (data) {\n        // Set anxiety level from user preferences\n        setAnxietyLevel(data.anxiety_base_level || 5);\n        // Set other preferences\n        setHasHVAC(data.has_HVAC);\n        setHasEcologica(data.has_ecologgica);\n      }\n    } catch (error) {\n      console.error('Error fetching user preferences:', error);\n    }\n  };\n  const fetchAirQualityData = async () => {\n    try {\n      // Change port from 3001 to 5000\n      const response = await fetch('http://localhost:5000/server/airqualitydata.csv');\n      const data = await response.json();\n      console.log('Fetched data:', data); // Debug log\n\n      if (data && data.length > 0) {\n        setAirQualityData(data);\n\n        // Process data for charts\n        const processedData = {\n          pm25: processChartData(data, 'PM2.5'),\n          pm10: processChartData(data, 'PM10'),\n          anxiety: processAnxietyChartData(data)\n        };\n        console.log('Processed chart data:', processedData); // Debug log\n        setChartData(processedData);\n      }\n    } catch (error) {\n      console.error('Error fetching air quality data:', error);\n    }\n  };\n  useEffect(() => {\n    // Fetch both user preferences and air quality data\n    const fetchData = async () => {\n      await fetchUserPreferences();\n      await fetchAirQualityData();\n    };\n    fetchData();\n\n    // Set up interval to refresh data every 5 minutes\n    const interval = setInterval(fetchData, 300000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Add this debug section temporarily\n  useEffect(() => {\n    console.log('Current state:', {\n      airQualityData,\n      chartData,\n      anxietyLevel\n    });\n  }, [airQualityData, chartData, anxietyLevel]);\n  const getLast100Days = data => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n    const validData = data.map(item => ({\n      date: new Date(item.Date),\n      'PM 2.5': parseFloat(item['PM 2.5']),\n      'PM 10': parseFloat(item['PM 10']),\n      city: item.City,\n      temp: item.Temp\n    })).filter(item => !isNaN(item.date.getTime()) && !isNaN(item['PM 10']) && !isNaN(item['PM 2.5']) && item.city === city).sort((a, b) => b.date - a.date);\n    console.log('Processed valid data for city:', city, validData[0]);\n    if (validData.length === 0) return [];\n    const mostRecentDate = validData[0].date;\n    const cutoffDate = new Date(mostRecentDate);\n    cutoffDate.setDate(cutoffDate.getDate() - 100);\n    return validData.filter(item => item.date >= cutoffDate).sort((a, b) => a.date - b.date);\n  };\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: true,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day'\n        },\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)'\n        },\n        ticks: {\n          callback: function (value) {\n            return value + ' ug/m³';\n          }\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} ug/m³`;\n          }\n        }\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          padding: 15,\n          onClick: (event, legendItem, legend) => {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            const meta = ci.getDatasetMeta(index);\n            meta.hidden = !meta.hidden;\n            setActiveDatasets(prev => ({\n              ...prev,\n              [legendItem.text]: !meta.hidden\n            }));\n            ci.update();\n          }\n        }\n      }\n    }\n  };\n  const calculateDaysOverThreshold = (data, pollutantType, threshold) => {\n    return data.filter(day => parseFloat(day[pollutantType]) > threshold).length;\n  };\n  const calculateDaysOverPeak = (data, pollutantType, threshold) => {\n    return data.filter(day => parseFloat(day[pollutantType]) > threshold).length;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [airQualityData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deeper-sleep-banner\",\n      style: {\n        backgroundColor: '#90c789',\n        color: '#1a472a',\n        padding: '20px',\n        borderRadius: '8px',\n        marginBottom: '20px',\n        textAlign: 'center',\n        fontSize: '1.5rem',\n        fontWeight: 'bold'\n      },\n      children: [calculateDeeperSleepMinutes(airQualityData, hasHVAC, hasEcologica).toLocaleString(), \" minutes of deeper sleep\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [firstName ? `${firstName}'s ` : '', city, \" Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"PM2.5 Levels\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 15\n            }, this), chartData && chartData.pm25 && /*#__PURE__*/_jsxDEV(Line, {\n              data: chartData.pm25,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-title\",\n              children: \"KEY DATA POINTS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-points\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 2.5', 10)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 345,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 349,\n                    columnNumber: 30\n                  }, this), 10, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 2.5', 20)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 358,\n                    columnNumber: 30\n                  }, this), 20, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverPeak(airQualityData, 'PM 2.5', 50)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 367,\n                    columnNumber: 30\n                  }, this), 50, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"PM10 Levels\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 15\n            }, this), chartData && chartData.pm10 && /*#__PURE__*/_jsxDEV(Line, {\n              data: chartData.pm10,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-title\",\n              children: \"KEY DATA POINTS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-points\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 10', 20)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 399,\n                    columnNumber: 30\n                  }, this), 20, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 398,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 10', 40)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 408,\n                    columnNumber: 30\n                  }, this), 40, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverPeak(airQualityData, 'PM 10', 50)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 413,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 417,\n                    columnNumber: 30\n                  }, this), 50, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Anxiety Tracking\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 15\n            }, this), chartData && /*#__PURE__*/_jsxDEV(Line, {\n              data: {\n                datasets: [{\n                  label: 'Predicted Anxiety Level',\n                  data: airQualityData.map(d => ({\n                    x: d.date,\n                    y: calculateAnxietyRisk(anxietyLevel, parseFloat(d['PM 10']))\n                  })),\n                  borderColor: 'rgb(255, 99, 132)',\n                  backgroundColor: 'rgba(255, 99, 132, 0.1)',\n                  borderWidth: 2,\n                  tension: 0.1\n                }]\n              },\n              options: {\n                ...chartOptions,\n                scales: {\n                  ...chartOptions.scales,\n                  y: {\n                    beginAtZero: true,\n                    max: 10,\n                    title: {\n                      display: true,\n                      text: 'Anxiety Level'\n                    }\n                  }\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-title\",\n              children: \"KEY DATA POINTS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-points\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: anxietyLevel.toFixed(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 468,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"Base\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 472,\n                    columnNumber: 25\n                  }, this), \"Level\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 471,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: airQualityData.filter(day => calculateAnxietyRisk(anxietyLevel, parseFloat(day['PM 10'])) > anxietyLevel).length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 476,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"Days with\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 482,\n                    columnNumber: 30\n                  }, this), \"Increased Risk\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 481,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: Math.max(...airQualityData.map(day => calculateAnxietyRisk(anxietyLevel, parseFloat(day['PM 10'])))).toFixed(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"Peak\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 492,\n                    columnNumber: 25\n                  }, this), \"Level\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"TFANVz692ImaCFwytxb8V3YULJU=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","jsxDEV","_jsxDEV","register","defaults","responsive","maintainAspectRatio","calculateHVACReduction","value","calculateEcologicaReduction","calculateCombinedReduction","calculateDeeperSleepMinutes","data","hasHVAC","hasEcologica","getAdjustedValue","daysUnderThreshold","filter","day","adjustedValue","parseFloat","length","deeperSleepMinutes","calculateAnxietyRisk","baseLevel","pm10","increase","riskIncrease","Math","min","Dashboard","_s","airQualityData","setAirQualityData","chartData","setChartData","isLoading","setIsLoading","setHasHVAC","setHasEcologica","city","setCity","firstName","setFirstName","activeDatasets","setActiveDatasets","anxietyLevel","setAnxietyLevel","anxietyChartData","setAnxietyChartData","processChartData","metric","labels","map","d","date","timestamp","datasets","label","borderColor","backgroundColor","borderWidth","tension","processAnxietyChartData","x","y","fetchUserPreferences","user","auth","getUser","error","from","select","eq","id","single","anxiety_base_level","has_HVAC","has_ecologgica","console","fetchAirQualityData","response","fetch","json","log","processedData","pm25","anxiety","fetchData","interval","setInterval","clearInterval","getLast100Days","Array","isArray","validData","item","Date","City","temp","Temp","isNaN","getTime","sort","a","b","mostRecentDate","cutoffDate","setDate","getDate","chartOptions","scales","type","time","unit","grid","display","color","beginAtZero","ticks","callback","plugins","tooltip","mode","intersect","callbacks","context","dataset","parsed","toFixed","legend","position","usePointStyle","padding","onClick","event","legendItem","index","datasetIndex","ci","chart","meta","getDatasetMeta","hidden","prev","text","update","calculateDaysOverThreshold","pollutantType","threshold","calculateDaysOverPeak","className","children","style","borderRadius","marginBottom","textAlign","fontSize","fontWeight","toLocaleString","fileName","_jsxFileName","lineNumber","columnNumber","options","max","title","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\n\nconst calculateHVACReduction = (value) => {\n  return value * 0.7; // 30% reduction\n};\n\nconst calculateEcologicaReduction = (value) => {\n  return value * 0.6; // 40% reduction\n};\n\nconst calculateCombinedReduction = (value) => {\n  return value * 0.5; // 50% reduction\n};\n\nconst calculateDeeperSleepMinutes = (data, hasHVAC, hasEcologica) => {\n  const getAdjustedValue = (value) => {\n    if (hasHVAC && hasEcologica) {\n      return calculateCombinedReduction(value);\n    } else if (hasHVAC) {\n      return calculateHVACReduction(value);\n    } else if (hasEcologica) {\n      return calculateEcologicaReduction(value);\n    }\n    return value;\n  };\n\n  // Count days where PM2.5 is 5 or under after reductions\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  // Calculate total minutes of deeper sleep\n  // days × 8 hours × 60 minutes\n  const deeperSleepMinutes = daysUnderThreshold * 8 * 60;\n\n  return deeperSleepMinutes;\n};\n\nconst calculateAnxietyRisk = (baseLevel, pm10) => {\n  if (pm10 >= 10) {\n    const increase = pm10 / 10;\n    const riskIncrease = increase * 0.12; // 12% increase per 10mg\n    return Math.min(10, baseLevel * (1 + riskIncrease));\n  }\n  return baseLevel;\n};\n\nconst Dashboard = () => {\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Original PM2.5': true,\n    'PM2.5 with HVAC': false,\n    'PM2.5 with Ecologica': false,\n    'PM2.5 with Both': false,\n    'Original PM10': true,\n    'PM10 with HVAC': false,\n    'PM10 with Ecologica': false,\n    'PM10 with Both': false\n  });\n  const [anxietyLevel, setAnxietyLevel] = useState(5);\n  const [anxietyChartData, setAnxietyChartData] = useState(null);\n\n  const processChartData = (data, metric) => {\n    return {\n      labels: data.map(d => d.date || d.timestamp),\n      datasets: [{\n        label: metric,\n        data: data.map(d => parseFloat(d[metric])),\n        borderColor: metric === 'PM2.5' ? '#90c789' : '#7ab073',\n        backgroundColor: metric === 'PM2.5' ? 'rgba(144, 199, 137, 0.1)' : 'rgba(122, 176, 115, 0.1)',\n        borderWidth: 2,\n        tension: 0.1\n      }]\n    };\n  };\n\n  const processAnxietyChartData = (data) => {\n    return {\n      labels: data.map(d => d.date || d.timestamp),\n      datasets: [{\n        label: 'Predicted Anxiety Level',\n        data: data.map(d => ({\n          x: d.date || d.timestamp,\n          y: calculateAnxietyRisk(anxietyLevel, parseFloat(d['PM10']))\n        })),\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.1)',\n        borderWidth: 2,\n        tension: 0.1\n      }]\n    };\n  };\n\n  const fetchUserPreferences = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { data, error } = await supabase\n        .from('user_preferences')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n\n      if (error) throw error;\n      if (data) {\n        // Set anxiety level from user preferences\n        setAnxietyLevel(data.anxiety_base_level || 5);\n        // Set other preferences\n        setHasHVAC(data.has_HVAC);\n        setHasEcologica(data.has_ecologgica);\n      }\n    } catch (error) {\n      console.error('Error fetching user preferences:', error);\n    }\n  };\n\n  const fetchAirQualityData = async () => {\n    try {\n      // Change port from 3001 to 5000\n      const response = await fetch('http://localhost:5000/server/airqualitydata.csv');\n      const data = await response.json();\n      \n      console.log('Fetched data:', data); // Debug log\n      \n      if (data && data.length > 0) {\n        setAirQualityData(data);\n        \n        // Process data for charts\n        const processedData = {\n          pm25: processChartData(data, 'PM2.5'),\n          pm10: processChartData(data, 'PM10'),\n          anxiety: processAnxietyChartData(data)\n        };\n        \n        console.log('Processed chart data:', processedData); // Debug log\n        setChartData(processedData);\n      }\n    } catch (error) {\n      console.error('Error fetching air quality data:', error);\n    }\n  };\n\n  useEffect(() => {\n    // Fetch both user preferences and air quality data\n    const fetchData = async () => {\n      await fetchUserPreferences();\n      await fetchAirQualityData();\n    };\n    \n    fetchData();\n    \n    // Set up interval to refresh data every 5 minutes\n    const interval = setInterval(fetchData, 300000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  // Add this debug section temporarily\n  useEffect(() => {\n    console.log('Current state:', {\n      airQualityData,\n      chartData,\n      anxietyLevel\n    });\n  }, [airQualityData, chartData, anxietyLevel]);\n\n  const getLast100Days = (data) => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n\n    const validData = data\n      .map(item => ({\n        date: new Date(item.Date),\n        'PM 2.5': parseFloat(item['PM 2.5']),\n        'PM 10': parseFloat(item['PM 10']),\n        city: item.City,\n        temp: item.Temp\n      }))\n      .filter(item => \n        !isNaN(item.date.getTime()) && \n        !isNaN(item['PM 10']) && \n        !isNaN(item['PM 2.5']) &&\n        item.city === city\n      )\n      .sort((a, b) => b.date - a.date);\n\n    console.log('Processed valid data for city:', city, validData[0]);\n\n    if (validData.length === 0) return [];\n\n    const mostRecentDate = validData[0].date;\n    const cutoffDate = new Date(mostRecentDate);\n    cutoffDate.setDate(cutoffDate.getDate() - 100);\n\n    return validData\n      .filter(item => item.date >= cutoffDate)\n      .sort((a, b) => a.date - b.date);\n  };\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: true,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day'\n        },\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)',\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)',\n        },\n        ticks: {\n          callback: function(value) {\n            return value + ' ug/m³';\n          }\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} ug/m³`;\n          }\n        }\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          padding: 15,\n          onClick: (event, legendItem, legend) => {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            const meta = ci.getDatasetMeta(index);\n\n            meta.hidden = !meta.hidden;\n\n            setActiveDatasets(prev => ({\n              ...prev,\n              [legendItem.text]: !meta.hidden\n            }));\n\n            ci.update();\n          }\n        }\n      }\n    }\n  };\n\n  const calculateDaysOverThreshold = (data, pollutantType, threshold) => {\n    return data.filter(day => \n      parseFloat(day[pollutantType]) > threshold\n    ).length;\n  };\n\n  const calculateDaysOverPeak = (data, pollutantType, threshold) => {\n    return data.filter(day => parseFloat(day[pollutantType]) > threshold).length;\n  };\n\n  return (\n    <div className=\"dashboard\">\n      {airQualityData.length > 0 && (\n        <div className=\"deeper-sleep-banner\" style={{\n          backgroundColor: '#90c789',\n          color: '#1a472a',\n          padding: '20px',\n          borderRadius: '8px',\n          marginBottom: '20px',\n          textAlign: 'center',\n          fontSize: '1.5rem',\n          fontWeight: 'bold'\n        }}>\n          {calculateDeeperSleepMinutes(airQualityData, hasHVAC, hasEcologica).toLocaleString()} minutes of deeper sleep\n        </div>\n      )}\n      <h1>{firstName ? `${firstName}'s ` : ''}{city} Dashboard</h1>\n      \n      <div className=\"dashboard-container\">\n        {/* PM2.5 Section */}\n        <div className=\"dashboard-section\">\n          <div className=\"content-wrapper\">\n            <div className=\"chart-side\">\n              <h2>PM2.5 Levels</h2>\n              {chartData && chartData.pm25 && (\n                <Line\n                  data={chartData.pm25}\n                  options={chartOptions}\n                />\n              )}\n            </div>\n            \n            <div className=\"data-side\">\n              <div className=\"key-data-title\">\n                KEY DATA POINTS\n              </div>\n              <div className=\"key-data-points\">\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 2.5', 10)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {10}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 2.5', 20)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {20}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverPeak(airQualityData, 'PM 2.5', 50)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {50}ug/m³\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* PM10 Section */}\n        <div className=\"dashboard-section\">\n          <div className=\"content-wrapper\">\n            <div className=\"chart-side\">\n              <h2>PM10 Levels</h2>\n              {chartData && chartData.pm10 && (\n                <Line\n                  data={chartData.pm10}\n                  options={chartOptions}\n                />\n              )}\n            </div>\n            \n            <div className=\"data-side\">\n              <div className=\"key-data-title\">\n                KEY DATA POINTS\n              </div>\n              <div className=\"key-data-points\">\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 10', 20)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {20}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 10', 40)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {40}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverPeak(airQualityData, 'PM 10', 50)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {50}ug/m³\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Anxiety Section */}\n        <div className=\"dashboard-section\">\n          <div className=\"content-wrapper\">\n            <div className=\"chart-side\">\n              <h2>Anxiety Tracking</h2>\n              {chartData && (\n                <Line\n                  data={{\n                    datasets: [{\n                      label: 'Predicted Anxiety Level',\n                      data: airQualityData.map(d => ({\n                        x: d.date,\n                        y: calculateAnxietyRisk(anxietyLevel, parseFloat(d['PM 10']))\n                      })),\n                      borderColor: 'rgb(255, 99, 132)',\n                      backgroundColor: 'rgba(255, 99, 132, 0.1)',\n                      borderWidth: 2,\n                      tension: 0.1\n                    }]\n                  }}\n                  options={{\n                    ...chartOptions,\n                    scales: {\n                      ...chartOptions.scales,\n                      y: {\n                        beginAtZero: true,\n                        max: 10,\n                        title: {\n                          display: true,\n                          text: 'Anxiety Level'\n                        }\n                      }\n                    }\n                  }}\n                />\n              )}\n            </div>\n            \n            <div className=\"data-side\">\n              <div className=\"key-data-title\">KEY DATA POINTS</div>\n              <div className=\"key-data-points\">\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {anxietyLevel.toFixed(1)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    Base<br />Level\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {airQualityData.filter(day => \n                      calculateAnxietyRisk(anxietyLevel, parseFloat(day['PM 10'])) > anxietyLevel\n                    ).length}\n                  </span>\n                  <span className=\"key-data-label\">\n                    Days with<br />Increased Risk\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {Math.max(...airQualityData.map(day => \n                      calculateAnxietyRisk(anxietyLevel, parseFloat(day['PM 10']))\n                    )).toFixed(1)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    Peak<br />Level\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,SAAS,QACJ,UAAU;AACjB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,0BAA0B;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAX,OAAO,CAACY,QAAQ,CACdX,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,SACF,CAAC;AAEDR,OAAO,CAACa,QAAQ,CAACC,UAAU,GAAG,IAAI;AAClCd,OAAO,CAACa,QAAQ,CAACE,mBAAmB,GAAG,KAAK;AAE5C,MAAMC,sBAAsB,GAAIC,KAAK,IAAK;EACxC,OAAOA,KAAK,GAAG,GAAG,CAAC,CAAC;AACtB,CAAC;AAED,MAAMC,2BAA2B,GAAID,KAAK,IAAK;EAC7C,OAAOA,KAAK,GAAG,GAAG,CAAC,CAAC;AACtB,CAAC;AAED,MAAME,0BAA0B,GAAIF,KAAK,IAAK;EAC5C,OAAOA,KAAK,GAAG,GAAG,CAAC,CAAC;AACtB,CAAC;AAED,MAAMG,2BAA2B,GAAGA,CAACC,IAAI,EAAEC,OAAO,EAAEC,YAAY,KAAK;EACnE,MAAMC,gBAAgB,GAAIP,KAAK,IAAK;IAClC,IAAIK,OAAO,IAAIC,YAAY,EAAE;MAC3B,OAAOJ,0BAA0B,CAACF,KAAK,CAAC;IAC1C,CAAC,MAAM,IAAIK,OAAO,EAAE;MAClB,OAAON,sBAAsB,CAACC,KAAK,CAAC;IACtC,CAAC,MAAM,IAAIM,YAAY,EAAE;MACvB,OAAOL,2BAA2B,CAACD,KAAK,CAAC;IAC3C;IACA,OAAOA,KAAK;EACd,CAAC;;EAED;EACA,MAAMQ,kBAAkB,GAAGJ,IAAI,CAACK,MAAM,CAACC,GAAG,IAAI;IAC5C,MAAMC,aAAa,GAAGJ,gBAAgB,CAACK,UAAU,CAACF,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjE,OAAOC,aAAa,IAAI,CAAC;EAC3B,CAAC,CAAC,CAACE,MAAM;;EAET;EACA;EACA,MAAMC,kBAAkB,GAAGN,kBAAkB,GAAG,CAAC,GAAG,EAAE;EAEtD,OAAOM,kBAAkB;AAC3B,CAAC;AAED,MAAMC,oBAAoB,GAAGA,CAACC,SAAS,EAAEC,IAAI,KAAK;EAChD,IAAIA,IAAI,IAAI,EAAE,EAAE;IACd,MAAMC,QAAQ,GAAGD,IAAI,GAAG,EAAE;IAC1B,MAAME,YAAY,GAAGD,QAAQ,GAAG,IAAI,CAAC,CAAC;IACtC,OAAOE,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEL,SAAS,IAAI,CAAC,GAAGG,YAAY,CAAC,CAAC;EACrD;EACA,OAAOH,SAAS;AAClB,CAAC;AAED,MAAMM,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC+C,SAAS,EAAEC,YAAY,CAAC,GAAGhD,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACiD,SAAS,EAAEC,YAAY,CAAC,GAAGlD,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC0B,OAAO,EAAEyB,UAAU,CAAC,GAAGnD,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC2B,YAAY,EAAEyB,eAAe,CAAC,GAAGpD,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACqD,IAAI,EAAEC,OAAO,CAAC,GAAGtD,QAAQ,CAAC,SAAS,CAAC;EAC3C,MAAM,CAACuD,SAAS,EAAEC,YAAY,CAAC,GAAGxD,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACyD,cAAc,EAAEC,iBAAiB,CAAC,GAAG1D,QAAQ,CAAC;IACnD,gBAAgB,EAAE,IAAI;IACtB,iBAAiB,EAAE,KAAK;IACxB,sBAAsB,EAAE,KAAK;IAC7B,iBAAiB,EAAE,KAAK;IACxB,eAAe,EAAE,IAAI;IACrB,gBAAgB,EAAE,KAAK;IACvB,qBAAqB,EAAE,KAAK;IAC5B,gBAAgB,EAAE;EACpB,CAAC,CAAC;EACF,MAAM,CAAC2D,YAAY,EAAEC,eAAe,CAAC,GAAG5D,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAAC6D,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG9D,QAAQ,CAAC,IAAI,CAAC;EAE9D,MAAM+D,gBAAgB,GAAGA,CAACtC,IAAI,EAAEuC,MAAM,KAAK;IACzC,OAAO;MACLC,MAAM,EAAExC,IAAI,CAACyC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,IAAID,CAAC,CAACE,SAAS,CAAC;MAC5CC,QAAQ,EAAE,CAAC;QACTC,KAAK,EAAEP,MAAM;QACbvC,IAAI,EAAEA,IAAI,CAACyC,GAAG,CAACC,CAAC,IAAIlC,UAAU,CAACkC,CAAC,CAACH,MAAM,CAAC,CAAC,CAAC;QAC1CQ,WAAW,EAAER,MAAM,KAAK,OAAO,GAAG,SAAS,GAAG,SAAS;QACvDS,eAAe,EAAET,MAAM,KAAK,OAAO,GAAG,0BAA0B,GAAG,0BAA0B;QAC7FU,WAAW,EAAE,CAAC;QACdC,OAAO,EAAE;MACX,CAAC;IACH,CAAC;EACH,CAAC;EAED,MAAMC,uBAAuB,GAAInD,IAAI,IAAK;IACxC,OAAO;MACLwC,MAAM,EAAExC,IAAI,CAACyC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,IAAID,CAAC,CAACE,SAAS,CAAC;MAC5CC,QAAQ,EAAE,CAAC;QACTC,KAAK,EAAE,yBAAyB;QAChC9C,IAAI,EAAEA,IAAI,CAACyC,GAAG,CAACC,CAAC,KAAK;UACnBU,CAAC,EAAEV,CAAC,CAACC,IAAI,IAAID,CAAC,CAACE,SAAS;UACxBS,CAAC,EAAE1C,oBAAoB,CAACuB,YAAY,EAAE1B,UAAU,CAACkC,CAAC,CAAC,MAAM,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QACHK,WAAW,EAAE,mBAAmB;QAChCC,eAAe,EAAE,yBAAyB;QAC1CC,WAAW,EAAE,CAAC;QACdC,OAAO,EAAE;MACX,CAAC;IACH,CAAC;EACH,CAAC;EAED,MAAMI,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI;MACF,MAAM;QAAEtD,IAAI,EAAE;UAAEuD;QAAK;MAAE,CAAC,GAAG,MAAM9E,QAAQ,CAAC+E,IAAI,CAACC,OAAO,CAAC,CAAC;MACxD,IAAI,CAACF,IAAI,EAAE;MAEX,MAAM;QAAEvD,IAAI;QAAE0D;MAAM,CAAC,GAAG,MAAMjF,QAAQ,CACnCkF,IAAI,CAAC,kBAAkB,CAAC,CACxBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,EAAEN,IAAI,CAACO,EAAE,CAAC,CACtBC,MAAM,CAAC,CAAC;MAEX,IAAIL,KAAK,EAAE,MAAMA,KAAK;MACtB,IAAI1D,IAAI,EAAE;QACR;QACAmC,eAAe,CAACnC,IAAI,CAACgE,kBAAkB,IAAI,CAAC,CAAC;QAC7C;QACAtC,UAAU,CAAC1B,IAAI,CAACiE,QAAQ,CAAC;QACzBtC,eAAe,CAAC3B,IAAI,CAACkE,cAAc,CAAC;MACtC;IACF,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EAED,MAAMU,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiD,CAAC;MAC/E,MAAMtE,IAAI,GAAG,MAAMqE,QAAQ,CAACE,IAAI,CAAC,CAAC;MAElCJ,OAAO,CAACK,GAAG,CAAC,eAAe,EAAExE,IAAI,CAAC,CAAC,CAAC;;MAEpC,IAAIA,IAAI,IAAIA,IAAI,CAACS,MAAM,GAAG,CAAC,EAAE;QAC3BY,iBAAiB,CAACrB,IAAI,CAAC;;QAEvB;QACA,MAAMyE,aAAa,GAAG;UACpBC,IAAI,EAAEpC,gBAAgB,CAACtC,IAAI,EAAE,OAAO,CAAC;UACrCa,IAAI,EAAEyB,gBAAgB,CAACtC,IAAI,EAAE,MAAM,CAAC;UACpC2E,OAAO,EAAExB,uBAAuB,CAACnD,IAAI;QACvC,CAAC;QAEDmE,OAAO,CAACK,GAAG,CAAC,uBAAuB,EAAEC,aAAa,CAAC,CAAC,CAAC;QACrDlD,YAAY,CAACkD,aAAa,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EAEDlF,SAAS,CAAC,MAAM;IACd;IACA,MAAMoG,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMtB,oBAAoB,CAAC,CAAC;MAC5B,MAAMc,mBAAmB,CAAC,CAAC;IAC7B,CAAC;IAEDQ,SAAS,CAAC,CAAC;;IAEX;IACA,MAAMC,QAAQ,GAAGC,WAAW,CAACF,SAAS,EAAE,MAAM,CAAC;IAE/C,OAAO,MAAMG,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACArG,SAAS,CAAC,MAAM;IACd2F,OAAO,CAACK,GAAG,CAAC,gBAAgB,EAAE;MAC5BpD,cAAc;MACdE,SAAS;MACTY;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACd,cAAc,EAAEE,SAAS,EAAEY,YAAY,CAAC,CAAC;EAE7C,MAAM8C,cAAc,GAAIhF,IAAI,IAAK;IAC/B,IAAI,CAACiF,KAAK,CAACC,OAAO,CAAClF,IAAI,CAAC,IAAIA,IAAI,CAACS,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;IAExD,MAAM0E,SAAS,GAAGnF,IAAI,CACnByC,GAAG,CAAC2C,IAAI,KAAK;MACZzC,IAAI,EAAE,IAAI0C,IAAI,CAACD,IAAI,CAACC,IAAI,CAAC;MACzB,QAAQ,EAAE7E,UAAU,CAAC4E,IAAI,CAAC,QAAQ,CAAC,CAAC;MACpC,OAAO,EAAE5E,UAAU,CAAC4E,IAAI,CAAC,OAAO,CAAC,CAAC;MAClCxD,IAAI,EAAEwD,IAAI,CAACE,IAAI;MACfC,IAAI,EAAEH,IAAI,CAACI;IACb,CAAC,CAAC,CAAC,CACFnF,MAAM,CAAC+E,IAAI,IACV,CAACK,KAAK,CAACL,IAAI,CAACzC,IAAI,CAAC+C,OAAO,CAAC,CAAC,CAAC,IAC3B,CAACD,KAAK,CAACL,IAAI,CAAC,OAAO,CAAC,CAAC,IACrB,CAACK,KAAK,CAACL,IAAI,CAAC,QAAQ,CAAC,CAAC,IACtBA,IAAI,CAACxD,IAAI,KAAKA,IAChB,CAAC,CACA+D,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAClD,IAAI,GAAGiD,CAAC,CAACjD,IAAI,CAAC;IAElCwB,OAAO,CAACK,GAAG,CAAC,gCAAgC,EAAE5C,IAAI,EAAEuD,SAAS,CAAC,CAAC,CAAC,CAAC;IAEjE,IAAIA,SAAS,CAAC1E,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;IAErC,MAAMqF,cAAc,GAAGX,SAAS,CAAC,CAAC,CAAC,CAACxC,IAAI;IACxC,MAAMoD,UAAU,GAAG,IAAIV,IAAI,CAACS,cAAc,CAAC;IAC3CC,UAAU,CAACC,OAAO,CAACD,UAAU,CAACE,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC;IAE9C,OAAOd,SAAS,CACb9E,MAAM,CAAC+E,IAAI,IAAIA,IAAI,CAACzC,IAAI,IAAIoD,UAAU,CAAC,CACvCJ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACjD,IAAI,GAAGkD,CAAC,CAAClD,IAAI,CAAC;EACpC,CAAC;EAED,MAAMuD,YAAY,GAAG;IACnBzG,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE,IAAI;IACzByG,MAAM,EAAE;MACN/C,CAAC,EAAE;QACDgD,IAAI,EAAE,MAAM;QACZC,IAAI,EAAE;UACJC,IAAI,EAAE;QACR,CAAC;QACDC,IAAI,EAAE;UACJC,OAAO,EAAE,IAAI;UACbC,KAAK,EAAE;QACT;MACF,CAAC;MACDpD,CAAC,EAAE;QACDqD,WAAW,EAAE,IAAI;QACjBH,IAAI,EAAE;UACJC,OAAO,EAAE,IAAI;UACbC,KAAK,EAAE;QACT,CAAC;QACDE,KAAK,EAAE;UACLC,QAAQ,EAAE,SAAAA,CAAShH,KAAK,EAAE;YACxB,OAAOA,KAAK,GAAG,QAAQ;UACzB;QACF;MACF;IACF,CAAC;IACDiH,OAAO,EAAE;MACPC,OAAO,EAAE;QACPC,IAAI,EAAE,OAAO;QACbC,SAAS,EAAE,KAAK;QAChBC,SAAS,EAAE;UACTnE,KAAK,EAAE,SAAAA,CAASoE,OAAO,EAAE;YACvB,OAAO,GAAGA,OAAO,CAACC,OAAO,CAACrE,KAAK,KAAKoE,OAAO,CAACE,MAAM,CAAC/D,CAAC,CAACgE,OAAO,CAAC,CAAC,CAAC,QAAQ;UACzE;QACF;MACF,CAAC;MACDC,MAAM,EAAE;QACNC,QAAQ,EAAE,QAAQ;QAClB/E,MAAM,EAAE;UACNgF,aAAa,EAAE,IAAI;UACnBC,OAAO,EAAE,EAAE;UACXC,OAAO,EAAEA,CAACC,KAAK,EAAEC,UAAU,EAAEN,MAAM,KAAK;YACtC,MAAMO,KAAK,GAAGD,UAAU,CAACE,YAAY;YACrC,MAAMC,EAAE,GAAGT,MAAM,CAACU,KAAK;YACvB,MAAMC,IAAI,GAAGF,EAAE,CAACG,cAAc,CAACL,KAAK,CAAC;YAErCI,IAAI,CAACE,MAAM,GAAG,CAACF,IAAI,CAACE,MAAM;YAE1BlG,iBAAiB,CAACmG,IAAI,KAAK;cACzB,GAAGA,IAAI;cACP,CAACR,UAAU,CAACS,IAAI,GAAG,CAACJ,IAAI,CAACE;YAC3B,CAAC,CAAC,CAAC;YAEHJ,EAAE,CAACO,MAAM,CAAC,CAAC;UACb;QACF;MACF;IACF;EACF,CAAC;EAED,MAAMC,0BAA0B,GAAGA,CAACvI,IAAI,EAAEwI,aAAa,EAAEC,SAAS,KAAK;IACrE,OAAOzI,IAAI,CAACK,MAAM,CAACC,GAAG,IACpBE,UAAU,CAACF,GAAG,CAACkI,aAAa,CAAC,CAAC,GAAGC,SACnC,CAAC,CAAChI,MAAM;EACV,CAAC;EAED,MAAMiI,qBAAqB,GAAGA,CAAC1I,IAAI,EAAEwI,aAAa,EAAEC,SAAS,KAAK;IAChE,OAAOzI,IAAI,CAACK,MAAM,CAACC,GAAG,IAAIE,UAAU,CAACF,GAAG,CAACkI,aAAa,CAAC,CAAC,GAAGC,SAAS,CAAC,CAAChI,MAAM;EAC9E,CAAC;EAED,oBACEnB,OAAA;IAAKqJ,SAAS,EAAC,WAAW;IAAAC,QAAA,GACvBxH,cAAc,CAACX,MAAM,GAAG,CAAC,iBACxBnB,OAAA;MAAKqJ,SAAS,EAAC,qBAAqB;MAACE,KAAK,EAAE;QAC1C7F,eAAe,EAAE,SAAS;QAC1ByD,KAAK,EAAE,SAAS;QAChBgB,OAAO,EAAE,MAAM;QACfqB,YAAY,EAAE,KAAK;QACnBC,YAAY,EAAE,MAAM;QACpBC,SAAS,EAAE,QAAQ;QACnBC,QAAQ,EAAE,QAAQ;QAClBC,UAAU,EAAE;MACd,CAAE;MAAAN,QAAA,GACC7I,2BAA2B,CAACqB,cAAc,EAAEnB,OAAO,EAAEC,YAAY,CAAC,CAACiJ,cAAc,CAAC,CAAC,EAAC,0BACvF;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACN,eACDjK,OAAA;MAAAsJ,QAAA,GAAK9G,SAAS,GAAG,GAAGA,SAAS,KAAK,GAAG,EAAE,EAAEF,IAAI,EAAC,YAAU;IAAA;MAAAwH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE7DjK,OAAA;MAAKqJ,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAElCtJ,OAAA;QAAKqJ,SAAS,EAAC,mBAAmB;QAAAC,QAAA,eAChCtJ,OAAA;UAAKqJ,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BtJ,OAAA;YAAKqJ,SAAS,EAAC,YAAY;YAAAC,QAAA,gBACzBtJ,OAAA;cAAAsJ,QAAA,EAAI;YAAY;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EACpBjI,SAAS,IAAIA,SAAS,CAACoD,IAAI,iBAC1BpF,OAAA,CAACF,IAAI;cACHY,IAAI,EAAEsB,SAAS,CAACoD,IAAK;cACrB8E,OAAO,EAAEtD;YAAa;cAAAkD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvB,CACF;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eAENjK,OAAA;YAAKqJ,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBtJ,OAAA;cAAKqJ,SAAS,EAAC,gBAAgB;cAAAC,QAAA,EAAC;YAEhC;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACNjK,OAAA;cAAKqJ,SAAS,EAAC,iBAAiB;cAAAC,QAAA,gBAC9BtJ,OAAA;gBAAKqJ,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,gBAC7BtJ,OAAA;kBAAMqJ,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,EAC9BL,0BAA0B,CAACnH,cAAc,EAAE,QAAQ,EAAE,EAAE;gBAAC;kBAAAgI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACrD,CAAC,eACPjK,OAAA;kBAAMqJ,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAAC,WACtB,eAAAtJ,OAAA;oBAAA8J,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,EACd,EAAE,EAAC,UACN;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CAAC,eACNjK,OAAA;gBAAKqJ,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,gBAC7BtJ,OAAA;kBAAMqJ,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,EAC9BL,0BAA0B,CAACnH,cAAc,EAAE,QAAQ,EAAE,EAAE;gBAAC;kBAAAgI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACrD,CAAC,eACPjK,OAAA;kBAAMqJ,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAAC,WACtB,eAAAtJ,OAAA;oBAAA8J,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,EACd,EAAE,EAAC,UACN;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CAAC,eACNjK,OAAA;gBAAKqJ,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,gBAC7BtJ,OAAA;kBAAMqJ,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,EAC9BF,qBAAqB,CAACtH,cAAc,EAAE,QAAQ,EAAE,EAAE;gBAAC;kBAAAgI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAChD,CAAC,eACPjK,OAAA;kBAAMqJ,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAAC,WACtB,eAAAtJ,OAAA;oBAAA8J,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,EACd,EAAE,EAAC,UACN;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGNjK,OAAA;QAAKqJ,SAAS,EAAC,mBAAmB;QAAAC,QAAA,eAChCtJ,OAAA;UAAKqJ,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BtJ,OAAA;YAAKqJ,SAAS,EAAC,YAAY;YAAAC,QAAA,gBACzBtJ,OAAA;cAAAsJ,QAAA,EAAI;YAAW;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EACnBjI,SAAS,IAAIA,SAAS,CAACT,IAAI,iBAC1BvB,OAAA,CAACF,IAAI;cACHY,IAAI,EAAEsB,SAAS,CAACT,IAAK;cACrB2I,OAAO,EAAEtD;YAAa;cAAAkD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvB,CACF;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eAENjK,OAAA;YAAKqJ,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBtJ,OAAA;cAAKqJ,SAAS,EAAC,gBAAgB;cAAAC,QAAA,EAAC;YAEhC;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACNjK,OAAA;cAAKqJ,SAAS,EAAC,iBAAiB;cAAAC,QAAA,gBAC9BtJ,OAAA;gBAAKqJ,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,gBAC7BtJ,OAAA;kBAAMqJ,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,EAC9BL,0BAA0B,CAACnH,cAAc,EAAE,OAAO,EAAE,EAAE;gBAAC;kBAAAgI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACpD,CAAC,eACPjK,OAAA;kBAAMqJ,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAAC,WACtB,eAAAtJ,OAAA;oBAAA8J,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,EACd,EAAE,EAAC,UACN;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CAAC,eACNjK,OAAA;gBAAKqJ,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,gBAC7BtJ,OAAA;kBAAMqJ,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,EAC9BL,0BAA0B,CAACnH,cAAc,EAAE,OAAO,EAAE,EAAE;gBAAC;kBAAAgI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACpD,CAAC,eACPjK,OAAA;kBAAMqJ,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAAC,WACtB,eAAAtJ,OAAA;oBAAA8J,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,EACd,EAAE,EAAC,UACN;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CAAC,eACNjK,OAAA;gBAAKqJ,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,gBAC7BtJ,OAAA;kBAAMqJ,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,EAC9BF,qBAAqB,CAACtH,cAAc,EAAE,OAAO,EAAE,EAAE;gBAAC;kBAAAgI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC/C,CAAC,eACPjK,OAAA;kBAAMqJ,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAAC,WACtB,eAAAtJ,OAAA;oBAAA8J,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,EACd,EAAE,EAAC,UACN;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGNjK,OAAA;QAAKqJ,SAAS,EAAC,mBAAmB;QAAAC,QAAA,eAChCtJ,OAAA;UAAKqJ,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BtJ,OAAA;YAAKqJ,SAAS,EAAC,YAAY;YAAAC,QAAA,gBACzBtJ,OAAA;cAAAsJ,QAAA,EAAI;YAAgB;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EACxBjI,SAAS,iBACRhC,OAAA,CAACF,IAAI;cACHY,IAAI,EAAE;gBACJ6C,QAAQ,EAAE,CAAC;kBACTC,KAAK,EAAE,yBAAyB;kBAChC9C,IAAI,EAAEoB,cAAc,CAACqB,GAAG,CAACC,CAAC,KAAK;oBAC7BU,CAAC,EAAEV,CAAC,CAACC,IAAI;oBACTU,CAAC,EAAE1C,oBAAoB,CAACuB,YAAY,EAAE1B,UAAU,CAACkC,CAAC,CAAC,OAAO,CAAC,CAAC;kBAC9D,CAAC,CAAC,CAAC;kBACHK,WAAW,EAAE,mBAAmB;kBAChCC,eAAe,EAAE,yBAAyB;kBAC1CC,WAAW,EAAE,CAAC;kBACdC,OAAO,EAAE;gBACX,CAAC;cACH,CAAE;cACFsG,OAAO,EAAE;gBACP,GAAGtD,YAAY;gBACfC,MAAM,EAAE;kBACN,GAAGD,YAAY,CAACC,MAAM;kBACtB9C,CAAC,EAAE;oBACDqD,WAAW,EAAE,IAAI;oBACjB+C,GAAG,EAAE,EAAE;oBACPC,KAAK,EAAE;sBACLlD,OAAO,EAAE,IAAI;sBACb6B,IAAI,EAAE;oBACR;kBACF;gBACF;cACF;YAAE;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CACF;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eAENjK,OAAA;YAAKqJ,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBtJ,OAAA;cAAKqJ,SAAS,EAAC,gBAAgB;cAAAC,QAAA,EAAC;YAAe;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACrDjK,OAAA;cAAKqJ,SAAS,EAAC,iBAAiB;cAAAC,QAAA,gBAC9BtJ,OAAA;gBAAKqJ,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,gBAC7BtJ,OAAA;kBAAMqJ,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,EAC9B1G,YAAY,CAACmF,OAAO,CAAC,CAAC;gBAAC;kBAAA+B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACpB,CAAC,eACPjK,OAAA;kBAAMqJ,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAAC,MAC3B,eAAAtJ,OAAA;oBAAA8J,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,SACZ;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CAAC,eACNjK,OAAA;gBAAKqJ,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,gBAC7BtJ,OAAA;kBAAMqJ,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,EAC9BxH,cAAc,CAACf,MAAM,CAACC,GAAG,IACxBK,oBAAoB,CAACuB,YAAY,EAAE1B,UAAU,CAACF,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG4B,YACjE,CAAC,CAACzB;gBAAM;kBAAA2I,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACJ,CAAC,eACPjK,OAAA;kBAAMqJ,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAAC,WACtB,eAAAtJ,OAAA;oBAAA8J,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,kBACjB;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CAAC,eACNjK,OAAA;gBAAKqJ,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,gBAC7BtJ,OAAA;kBAAMqJ,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,EAC9B5H,IAAI,CAACyI,GAAG,CAAC,GAAGrI,cAAc,CAACqB,GAAG,CAACnC,GAAG,IACjCK,oBAAoB,CAACuB,YAAY,EAAE1B,UAAU,CAACF,GAAG,CAAC,OAAO,CAAC,CAAC,CAC7D,CAAC,CAAC,CAAC+G,OAAO,CAAC,CAAC;gBAAC;kBAAA+B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACT,CAAC,eACPjK,OAAA;kBAAMqJ,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAAC,MAC3B,eAAAtJ,OAAA;oBAAA8J,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,SACZ;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpI,EAAA,CAxaID,SAAS;AAAAyI,EAAA,GAATzI,SAAS;AA0af,eAAeA,SAAS;AAAC,IAAAyI,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}