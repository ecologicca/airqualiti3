{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/airqualiti3/src/pages/dashboard/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport PM25Chart from '../../components/charts/PM25Chart';\nimport PM10Chart from '../../components/charts/PM10Chart';\nimport CityComparisonChart from '../../components/charts/CityComparisonChart';\nimport AnxietyRiskChart from '../../components/charts/AnxietyRiskChart';\nimport HealthImpactPanel from '../../components/HealthImpactPanel';\nimport '../../styles/style.css';\n\n// Function to fetch data from OpenAQ API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchOpenAQData = async (city, coordinates) => {\n  try {\n    // Calculate date range for 60 days\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 60);\n\n    // Use CORS proxy for development\n    const proxyUrl = 'https://api.allorigins.win/raw?url=';\n    const openAQUrl = `https://api.openaq.org/v3/measurements?coordinates=${coordinates.lat},${coordinates.lon}&radius=10000&date_from=${startDate.toISOString()}&date_to=${endDate.toISOString()}&parameter=pm25,pm10&limit=1000`;\n\n    // Get historical air quality data\n    const response = await fetch(proxyUrl + encodeURIComponent(openAQUrl), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data.results || data.results.length === 0) {\n      console.log('No data available for location:', city);\n      return [];\n    }\n\n    // Group measurements by day\n    const measurementsByDay = data.results.reduce((acc, measurement) => {\n      const date = new Date(measurement.date.utc).toISOString().split('T')[0];\n      if (!acc[date]) {\n        acc[date] = {\n          'PM 2.5': null,\n          'PM 10': null,\n          measurements: []\n        };\n      }\n      acc[date].measurements.push(measurement);\n\n      // Update PM values based on parameter\n      if (measurement.parameter === 'pm25') {\n        acc[date]['PM 2.5'] = measurement.value;\n      } else if (measurement.parameter === 'pm10') {\n        acc[date]['PM 10'] = measurement.value;\n      }\n      return acc;\n    }, {});\n\n    // Convert to array and format for our app\n    return Object.entries(measurementsByDay).map(([date, data]) => ({\n      date: new Date(date).toISOString(),\n      'PM 2.5': data['PM 2.5'],\n      'PM 10': data['PM 10'],\n      city: city,\n      health_impact: calculateHealthImpact({\n        parameters: [{\n          parameter: 'pm25',\n          value: data['PM 2.5']\n        }, {\n          parameter: 'pm10',\n          value: data['PM 10']\n        }]\n      }),\n      who_guidelines: getWHOGuidelines({\n        parameters: [{\n          parameter: 'pm25',\n          value: data['PM 2.5']\n        }, {\n          parameter: 'pm10',\n          value: data['PM 10']\n        }]\n      }),\n      source: 'openaq'\n    }));\n  } catch (error) {\n    console.error('Error fetching OpenAQ data:', error);\n    return [];\n  }\n};\n\n// Helper function to calculate health impact based on PM2.5 and PM10 levels\nconst calculateHealthImpact = measurement => {\n  var _measurement$paramete, _measurement$paramete2;\n  const pm25 = (_measurement$paramete = measurement.parameters.find(p => p.parameter === 'pm25')) === null || _measurement$paramete === void 0 ? void 0 : _measurement$paramete.value;\n  const pm10 = (_measurement$paramete2 = measurement.parameters.find(p => p.parameter === 'pm10')) === null || _measurement$paramete2 === void 0 ? void 0 : _measurement$paramete2.value;\n  if (!pm25 && !pm10) return 'No data available';\n\n  // Using WHO guidelines for health impact assessment\n  if (pm25 <= 10 && pm10 <= 20) return 'Good';\n  if (pm25 <= 25 && pm10 <= 50) return 'Moderate';\n  if (pm25 <= 50 && pm10 <= 100) return 'Unhealthy for Sensitive Groups';\n  if (pm25 <= 75 && pm10 <= 200) return 'Unhealthy';\n  return 'Very Unhealthy';\n};\n\n// Helper function to get WHO guidelines status\nconst getWHOGuidelines = measurement => {\n  var _measurement$paramete3, _measurement$paramete4;\n  const pm25 = (_measurement$paramete3 = measurement.parameters.find(p => p.parameter === 'pm25')) === null || _measurement$paramete3 === void 0 ? void 0 : _measurement$paramete3.value;\n  const pm10 = (_measurement$paramete4 = measurement.parameters.find(p => p.parameter === 'pm10')) === null || _measurement$paramete4 === void 0 ? void 0 : _measurement$paramete4.value;\n  return {\n    'PM2.5': {\n      value: pm25,\n      threshold: 10,\n      exceeds: pm25 > 10\n    },\n    'PM10': {\n      value: pm10,\n      threshold: 20,\n      exceeds: pm10 > 20\n    }\n  };\n};\n\n// Utility function for deeper sleep calculation\nconst calculateDeeperSleepMinutes = (data, hasEcologica) => {\n  const getAdjustedValue = value => {\n    // Always apply indoor reduction first\n    const indoorValue = value * 0.7;\n    // Then apply Ecologica if present\n    if (hasEcologica) return value * 0.5;\n    return indoorValue;\n  };\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n  return daysUnderThreshold * 8 * 60;\n};\nconst Dashboard = () => {\n  _s();\n  const [userPreferences, setUserPreferences] = useState({\n    hasEcologica: false,\n    city: 'Toronto',\n    firstName: '',\n    anxietyLevel: 5\n  });\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [healthData, setHealthData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (!user) return;\n        const {\n          data,\n          error\n        } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n        if (error) throw error;\n        if (data) {\n          setUserPreferences({\n            hasEcologica: data.has_ecologgica || false,\n            city: data.city || 'Toronto',\n            firstName: data.first_name || '',\n            anxietyLevel: data.anxiety_base_level || 5\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n    const fetchAirQualityData = async () => {\n      try {\n        setIsLoading(true);\n\n        // Calculate date range for 60 days\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - 60);\n\n        // Get coordinates for the city (this should be stored in your database or use a geocoding service)\n        const cityCoordinates = {\n          'Toronto': {\n            lat: 43.6532,\n            lon: -79.3832\n          },\n          'Vancouver': {\n            lat: 49.2827,\n            lon: -123.1207\n          },\n          'Montreal': {\n            lat: 45.5017,\n            lon: -73.5673\n          },\n          'Boston': {\n            lat: 42.3601,\n            lon: -71.0589\n          },\n          'Calgary': {\n            lat: 51.0447,\n            lon: -114.0719\n          },\n          'Dallas': {\n            lat: 32.7767,\n            lon: -96.7970\n          },\n          'Edmonton': {\n            lat: 53.5461,\n            lon: -113.4938\n          },\n          'Miami': {\n            lat: 25.7617,\n            lon: -80.1918\n          },\n          'New York': {\n            lat: 40.7128,\n            lon: -74.0060\n          },\n          'San Francisco': {\n            lat: 37.7749,\n            lon: -122.4194\n          }\n        }[userPreferences.city] || {\n          lat: 43.6532,\n          lon: -79.3832\n        }; // Default to Toronto\n\n        // Fetch data from both sources\n        const [supabaseData, openAQData] = await Promise.all([\n        // Get data from the weather_data table in Supabase\n        supabase.from('weather_data').select('*').eq('city', userPreferences.city).gte('created_at', startDate.toISOString()).lte('created_at', endDate.toISOString()).order('created_at', {\n          ascending: false\n        }).then(({\n          data,\n          error\n        }) => {\n          if (error) throw error;\n          return data;\n        }),\n        // Get data from OpenAQ\n        fetchOpenAQData(userPreferences.city, cityCoordinates)]);\n\n        // Transform Supabase data\n        const transformedSupabaseData = supabaseData.map(item => ({\n          date: item.created_at,\n          'PM 2.5': item.pm25,\n          'PM 10': item.pm10,\n          temp: item.temp,\n          city: item.city,\n          health_impact: item.health_impact,\n          who_guidelines: item.who_guidelines,\n          source: 'supabase'\n        }));\n\n        // Combine and sort data from both sources\n        const combinedData = [...transformedSupabaseData, ...openAQData].sort((a, b) => new Date(b.date) - new Date(a.date));\n        setAirQualityData(combinedData);\n\n        // Set health data from the most recent measurement\n        if (combinedData.length > 0) {\n          setHealthData({\n            pm25: combinedData[0]['PM 2.5'],\n            health_impact: combinedData[0].health_impact,\n            who_guidelines: combinedData[0].who_guidelines\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching air quality data:', error);\n        setAirQualityData([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchUserPreferences();\n    // Only fetch air quality data after we have the user's city\n    if (userPreferences.city) {\n      fetchAirQualityData();\n    }\n    const interval = setInterval(() => {\n      if (userPreferences.city) {\n        fetchAirQualityData();\n      }\n    }, 60 * 60 * 1000); // Refresh every hour\n\n    return () => clearInterval(interval);\n  }, [userPreferences.city]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [userPreferences.firstName ? `${userPreferences.firstName}'s ` : '', \"Air Quality Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: /*#__PURE__*/_jsxDEV(HealthImpactPanel, {\n        healthData: healthData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"PM2.5 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PM25Chart, {\n            userPreferences: userPreferences\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"PM10 Levels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PM10Chart, {\n        userPreferences: userPreferences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"City Comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CityComparisonChart, {\n        userPreferences: userPreferences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Anxiety Risk\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnxietyRiskChart, {\n        userPreferences: userPreferences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"cE4TceWpcqlK4yh7XHpgp9ZgHiY=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","PM25Chart","PM10Chart","CityComparisonChart","AnxietyRiskChart","HealthImpactPanel","jsxDEV","_jsxDEV","fetchOpenAQData","city","coordinates","endDate","Date","startDate","setDate","getDate","proxyUrl","openAQUrl","lat","lon","toISOString","response","fetch","encodeURIComponent","method","headers","ok","Error","status","data","json","results","length","console","log","measurementsByDay","reduce","acc","measurement","date","utc","split","measurements","push","parameter","value","Object","entries","map","health_impact","calculateHealthImpact","parameters","who_guidelines","getWHOGuidelines","source","error","_measurement$paramete","_measurement$paramete2","pm25","find","p","pm10","_measurement$paramete3","_measurement$paramete4","threshold","exceeds","calculateDeeperSleepMinutes","hasEcologica","getAdjustedValue","indoorValue","daysUnderThreshold","filter","day","adjustedValue","parseFloat","Dashboard","_s","userPreferences","setUserPreferences","firstName","anxietyLevel","airQualityData","setAirQualityData","healthData","setHealthData","isLoading","setIsLoading","fetchUserPreferences","user","auth","getUser","from","select","eq","id","single","has_ecologgica","first_name","anxiety_base_level","fetchAirQualityData","cityCoordinates","supabaseData","openAQData","Promise","all","gte","lte","order","ascending","then","transformedSupabaseData","item","created_at","temp","combinedData","sort","a","b","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/airqualiti3/src/pages/dashboard/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport PM25Chart from '../../components/charts/PM25Chart';\nimport PM10Chart from '../../components/charts/PM10Chart';\nimport CityComparisonChart from '../../components/charts/CityComparisonChart';\nimport AnxietyRiskChart from '../../components/charts/AnxietyRiskChart';\nimport HealthImpactPanel from '../../components/HealthImpactPanel';\nimport '../../styles/style.css';\n\n// Function to fetch data from OpenAQ API\nconst fetchOpenAQData = async (city, coordinates) => {\n  try {\n    // Calculate date range for 60 days\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 60);\n\n    // Use CORS proxy for development\n    const proxyUrl = 'https://api.allorigins.win/raw?url=';\n    const openAQUrl = `https://api.openaq.org/v3/measurements?coordinates=${coordinates.lat},${coordinates.lon}&radius=10000&date_from=${startDate.toISOString()}&date_to=${endDate.toISOString()}&parameter=pm25,pm10&limit=1000`;\n    \n    // Get historical air quality data\n    const response = await fetch(proxyUrl + encodeURIComponent(openAQUrl), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (!data.results || data.results.length === 0) {\n      console.log('No data available for location:', city);\n      return [];\n    }\n\n    // Group measurements by day\n    const measurementsByDay = data.results.reduce((acc, measurement) => {\n      const date = new Date(measurement.date.utc).toISOString().split('T')[0];\n      if (!acc[date]) {\n        acc[date] = {\n          'PM 2.5': null,\n          'PM 10': null,\n          measurements: []\n        };\n      }\n      acc[date].measurements.push(measurement);\n      \n      // Update PM values based on parameter\n      if (measurement.parameter === 'pm25') {\n        acc[date]['PM 2.5'] = measurement.value;\n      } else if (measurement.parameter === 'pm10') {\n        acc[date]['PM 10'] = measurement.value;\n      }\n      \n      return acc;\n    }, {});\n\n    // Convert to array and format for our app\n    return Object.entries(measurementsByDay).map(([date, data]) => ({\n      date: new Date(date).toISOString(),\n      'PM 2.5': data['PM 2.5'],\n      'PM 10': data['PM 10'],\n      city: city,\n      health_impact: calculateHealthImpact({ parameters: [\n        { parameter: 'pm25', value: data['PM 2.5'] },\n        { parameter: 'pm10', value: data['PM 10'] }\n      ]}),\n      who_guidelines: getWHOGuidelines({ parameters: [\n        { parameter: 'pm25', value: data['PM 2.5'] },\n        { parameter: 'pm10', value: data['PM 10'] }\n      ]}),\n      source: 'openaq'\n    }));\n  } catch (error) {\n    console.error('Error fetching OpenAQ data:', error);\n    return [];\n  }\n};\n\n// Helper function to calculate health impact based on PM2.5 and PM10 levels\nconst calculateHealthImpact = (measurement) => {\n  const pm25 = measurement.parameters.find(p => p.parameter === 'pm25')?.value;\n  const pm10 = measurement.parameters.find(p => p.parameter === 'pm10')?.value;\n  \n  if (!pm25 && !pm10) return 'No data available';\n  \n  // Using WHO guidelines for health impact assessment\n  if (pm25 <= 10 && pm10 <= 20) return 'Good';\n  if (pm25 <= 25 && pm10 <= 50) return 'Moderate';\n  if (pm25 <= 50 && pm10 <= 100) return 'Unhealthy for Sensitive Groups';\n  if (pm25 <= 75 && pm10 <= 200) return 'Unhealthy';\n  return 'Very Unhealthy';\n};\n\n// Helper function to get WHO guidelines status\nconst getWHOGuidelines = (measurement) => {\n  const pm25 = measurement.parameters.find(p => p.parameter === 'pm25')?.value;\n  const pm10 = measurement.parameters.find(p => p.parameter === 'pm10')?.value;\n  \n  return {\n    'PM2.5': {\n      value: pm25,\n      threshold: 10,\n      exceeds: pm25 > 10\n    },\n    'PM10': {\n      value: pm10,\n      threshold: 20,\n      exceeds: pm10 > 20\n    }\n  };\n};\n\n// Utility function for deeper sleep calculation\nconst calculateDeeperSleepMinutes = (data, hasEcologica) => {\n  const getAdjustedValue = (value) => {\n    // Always apply indoor reduction first\n    const indoorValue = value * 0.7;\n    // Then apply Ecologica if present\n    if (hasEcologica) return value * 0.5;\n    return indoorValue;\n  };\n\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  return daysUnderThreshold * 8 * 60;\n};\n\nconst Dashboard = () => {\n  const [userPreferences, setUserPreferences] = useState({\n    hasEcologica: false,\n    city: 'Toronto',\n    firstName: '',\n    anxietyLevel: 5\n  });\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [healthData, setHealthData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) return;\n\n        const { data, error } = await supabase\n          .from('user_preferences')\n          .select('*')\n          .eq('user_id', user.id)\n          .single();\n\n        if (error) throw error;\n        \n        if (data) {\n          setUserPreferences({\n            hasEcologica: data.has_ecologgica || false,\n            city: data.city || 'Toronto',\n            firstName: data.first_name || '',\n            anxietyLevel: data.anxiety_base_level || 5\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n\n    const fetchAirQualityData = async () => {\n      try {\n        setIsLoading(true);\n        \n        // Calculate date range for 60 days\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - 60);\n        \n        // Get coordinates for the city (this should be stored in your database or use a geocoding service)\n        const cityCoordinates = {\n          'Toronto': { lat: 43.6532, lon: -79.3832 },\n          'Vancouver': { lat: 49.2827, lon: -123.1207 },\n          'Montreal': { lat: 45.5017, lon: -73.5673 },\n          'Boston': { lat: 42.3601, lon: -71.0589 },\n          'Calgary': { lat: 51.0447, lon: -114.0719 },\n          'Dallas': { lat: 32.7767, lon: -96.7970 },\n          'Edmonton': { lat: 53.5461, lon: -113.4938 },\n          'Miami': { lat: 25.7617, lon: -80.1918 },\n          'New York': { lat: 40.7128, lon: -74.0060 },\n          'San Francisco': { lat: 37.7749, lon: -122.4194 }\n        }[userPreferences.city] || { lat: 43.6532, lon: -79.3832 }; // Default to Toronto\n\n        // Fetch data from both sources\n        const [supabaseData, openAQData] = await Promise.all([\n          // Get data from the weather_data table in Supabase\n          supabase\n            .from('weather_data')\n            .select('*')\n            .eq('city', userPreferences.city)\n            .gte('created_at', startDate.toISOString())\n            .lte('created_at', endDate.toISOString())\n            .order('created_at', { ascending: false })\n            .then(({ data, error }) => {\n              if (error) throw error;\n              return data;\n            }),\n          \n          // Get data from OpenAQ\n          fetchOpenAQData(userPreferences.city, cityCoordinates)\n        ]);\n\n        // Transform Supabase data\n        const transformedSupabaseData = supabaseData.map(item => ({\n          date: item.created_at,\n          'PM 2.5': item.pm25,\n          'PM 10': item.pm10,\n          temp: item.temp,\n          city: item.city,\n          health_impact: item.health_impact,\n          who_guidelines: item.who_guidelines,\n          source: 'supabase'\n        }));\n\n        // Combine and sort data from both sources\n        const combinedData = [...transformedSupabaseData, ...openAQData]\n          .sort((a, b) => new Date(b.date) - new Date(a.date));\n        \n        setAirQualityData(combinedData);\n        \n        // Set health data from the most recent measurement\n        if (combinedData.length > 0) {\n          setHealthData({\n            pm25: combinedData[0]['PM 2.5'],\n            health_impact: combinedData[0].health_impact,\n            who_guidelines: combinedData[0].who_guidelines\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching air quality data:', error);\n        setAirQualityData([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUserPreferences();\n    // Only fetch air quality data after we have the user's city\n    if (userPreferences.city) {\n      fetchAirQualityData();\n    }\n\n    const interval = setInterval(() => {\n      if (userPreferences.city) {\n        fetchAirQualityData();\n      }\n    }, 60 * 60 * 1000); // Refresh every hour\n\n    return () => clearInterval(interval);\n  }, [userPreferences.city]);\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"dashboard\">\n      <h1>\n        {userPreferences.firstName ? `${userPreferences.firstName}'s ` : ''}\n        Air Quality Dashboard\n      </h1>\n      \n      <div className=\"dashboard-section\">\n        <HealthImpactPanel healthData={healthData} />\n      </div>\n\n      <div className=\"dashboard-section\">\n        <div className=\"chart-container\">\n          <div className=\"chart-area\">\n            <h2>PM2.5 Levels</h2>\n            <PM25Chart userPreferences={userPreferences} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"dashboard-section\">\n        <h2>PM10 Levels</h2>\n        <PM10Chart userPreferences={userPreferences} />\n      </div>\n\n      <div className=\"dashboard-section\">\n        <h2>City Comparison</h2>\n        <CityComparisonChart userPreferences={userPreferences} />\n      </div>\n\n      <div className=\"dashboard-section\">\n        <h2>Anxiety Risk</h2>\n        <AnxietyRiskChart userPreferences={userPreferences} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}