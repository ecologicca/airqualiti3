{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { supabase } from './supabaseClient';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport 'chartjs-adapter-moment';\nimport dayjs from 'dayjs';\nimport { Line } from 'react-chartjs-2';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst Dashboard = ({\n  user\n}) => {\n  _s();\n  const [city, setCity] = useState('');\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [keyDataPoints, setKeyDataPoints] = useState({\n    over10: 0,\n    over20: 0,\n    over50: 0\n  });\n  const [error, setError] = useState(null);\n  const pm25ChartInstance = useRef(null);\n  const pm10ChartInstance = useRef(null);\n  const pm25Ref = useRef(null);\n  const pm10Ref = useRef(null);\n  const [firstName, setFirstName] = useState('');\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'µg/m³'\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Time'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: ${context.parsed.y} µg/m³`;\n          }\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    if (user) {\n      fetchPreferences();\n    } else {\n      console.error(\"User is not defined, cannot fetch preferences.\");\n    }\n  }, [user]);\n  const fetchPreferences = async () => {\n    if (!user || !user.id) {\n      console.error(\"User ID is undefined, cannot fetch preferences.\");\n      setError(\"User not authenticated.\");\n      return;\n    }\n    console.log(\"Fetching preferences for User ID:\", user.id);\n    const {\n      data,\n      error\n    } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n    if (error) {\n      console.error(\"Error fetching preferences:\", error.message);\n      setError(\"Error fetching preferences: \" + error.message);\n      return;\n    }\n    if (data) {\n      console.log(\"Fetched user preferences:\", data);\n      setCity(data.city);\n      setHasHVAC(data.has_HVAC);\n      setHasEcologica(data.has_ecologgica);\n      setFirstName(data.first_name || '');\n      fetchAirQualityData(data.city);\n    }\n  };\n  const fetchAirQualityData = async selectedCity => {\n    console.log(\"Selected City:\", selectedCity);\n    try {\n      const response = await fetch('http://localhost:5000/api/airqualitydata');\n      const data = await response.json();\n      console.log(\"Raw API response:\", data);\n\n      // Filter for the selected city\n      const cityData = data.filter(row => {\n        var _row$City;\n        return ((_row$City = row.City) === null || _row$City === void 0 ? void 0 : _row$City.toLowerCase()) === selectedCity.toLowerCase();\n      });\n      console.log(\"Filtered city data:\", cityData);\n      if (!cityData.length) {\n        console.error(`No data found for city: ${selectedCity}`);\n        setError(`No air quality data available for ${selectedCity}`);\n        return;\n      }\n\n      // Sort data by date\n      const sortedData = cityData.sort((a, b) => {\n        return dayjs(a.Date, 'M/D/YYYY H:mm:ss').valueOf() - dayjs(b.Date, 'M/D/YYYY H:mm:ss').valueOf();\n      });\n\n      // Take the most recent 30 days of data\n      const recentData = sortedData.slice(-30);\n      console.log(\"Most recent 30 days of data:\", recentData);\n\n      // Apply user preferences to adjust data\n      const adjustedData = applyPreferences(recentData);\n      setAirQualityData(adjustedData);\n\n      // Initialize charts with adjusted data\n      initChart(pm25Ref, pm25ChartInstance, 'PM 2.5', adjustedData.map(row => ({\n        x: dayjs(row.Date, 'M/D/YYYY H:mm:ss').toDate(),\n        y: row.adjustedPM25\n      })));\n      initChart(pm10Ref, pm10ChartInstance, 'PM 10', adjustedData.map(row => ({\n        x: dayjs(row.Date, 'M/D/YYYY H:mm:ss').toDate(),\n        y: row.adjustedPM10\n      })));\n\n      // Calculate key data points after charts are initialized\n      calculateKeyDataPoints(adjustedData);\n    } catch (error) {\n      console.error('Error fetching air quality data:', error);\n      setError(\"Error fetching air quality data.\");\n    }\n  };\n  const applyPreferences = data => {\n    return data.map(row => {\n      const adjustedPM25 = row['PM 2.5'] * (hasHVAC ? 0.6 : 1) * (hasEcologica ? 0.75 : 1);\n      const adjustedPM10 = row['PM 10'] * (hasEcologica ? 0.75 : 1);\n      return {\n        ...row,\n        adjustedPM25,\n        adjustedPM10\n      };\n    });\n  };\n  const calculateKeyDataPoints = data => {\n    const over10 = data.filter(row => row.adjustedPM25 > 10).length;\n    const over20 = data.filter(row => row.adjustedPM25 > 20).length;\n    const over50 = data.filter(row => row.adjustedPM25 > 50).length;\n    setKeyDataPoints({\n      over10,\n      over20,\n      over50\n    });\n  };\n  const initChart = (ref, chartInstanceRef, label, data) => {\n    console.log(`Initializing ${label} chart with data:`, data);\n    if (!ref.current) {\n      console.error(`Canvas reference for ${label} is null`);\n      return;\n    }\n    if (chartInstanceRef.current) {\n      console.log(`Destroying existing ${label} chart instance...`);\n      chartInstanceRef.current.destroy();\n    }\n    const ctx = ref.current.getContext('2d');\n\n    // Create the new chart\n    const newChart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: airQualityData.map(row => row.Date),\n        datasets: [{\n          label: label,\n          data: data,\n          borderColor: 'rgba(34, 139, 34, 1)',\n          backgroundColor: 'rgba(34, 139, 34, 0.2)',\n          tension: 0.1,\n          fill: true\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'day'\n            },\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'µg/m³'\n            }\n          }\n        }\n      }\n    });\n    chartInstanceRef.current = newChart; // Save the new chart instance\n  };\n  const calculateImprovedAirQuality = (originalValue, hasHVAC, hasEcologica) => {\n    let improvedValue = originalValue;\n    if (hasHVAC) {\n      improvedValue *= 0.5; // Reduce by 50% for HVAC\n    }\n    if (hasEcologica) {\n      improvedValue *= 0.7; // Further reduce by 30% for Ecologica\n    }\n    return improvedValue.toFixed(2);\n  };\n  const getChartData = () => {\n    const baseData = {\n      labels: airQualityData.map(d => d.timestamp),\n      datasets: [{\n        label: 'Original PM2.5',\n        data: airQualityData.map(d => d.pm25),\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }]\n    };\n    if (hasHVAC || hasEcologica) {\n      baseData.datasets.push({\n        label: `Improved PM2.5 ${hasHVAC ? '(HVAC)' : ''} ${hasEcologica ? '(Ecologica)' : ''}`,\n        data: airQualityData.map(d => calculateImprovedAirQuality(d.pm25, hasHVAC, hasEcologica)),\n        borderColor: hasEcologica ? 'rgb(54, 162, 235)' : 'rgb(255, 159, 64)',\n        tension: 0.1\n      });\n    }\n    return baseData;\n  };\n  const getChartData10 = () => {\n    const baseData = {\n      labels: airQualityData.map(d => d.timestamp),\n      datasets: [{\n        label: 'Original PM10',\n        data: airQualityData.map(d => d.pm10),\n        borderColor: 'rgb(153, 102, 255)',\n        tension: 0.1\n      }]\n    };\n    if (hasHVAC || hasEcologica) {\n      baseData.datasets.push({\n        label: `Improved PM10 ${hasHVAC ? '(HVAC)' : ''} ${hasEcologica ? '(Ecologica)' : ''}`,\n        data: airQualityData.map(d => calculateImprovedAirQuality(d.pm10, hasHVAC, hasEcologica)),\n        borderColor: hasEcologica ? 'rgb(54, 162, 235)' : 'rgb(255, 159, 64)',\n        tension: 0.1\n      });\n    }\n    return baseData;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [firstName ? `${firstName}'s ` : '', city, \" Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"PM2.5 Levels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), airQualityData.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n          data: getChartData(),\n          options: chartOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"PM10 Levels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), airQualityData.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n          data: getChartData10(),\n          options: chartOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), (hasHVAC || hasEcologica) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"improvements-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Air Quality Improvements:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this), hasHVAC && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u2022 HVAC System: 50% reduction in particulate matter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 23\n      }, this), hasEcologica && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u2022 Ecologica System: Additional 30% reduction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 28\n      }, this), hasHVAC && hasEcologica && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u2022 Total improvement: 65% reduction in particulate matter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"ReMmAzVn9W3Bppe7DqotTyHSRTw=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useRef","supabase","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","dayjs","Line","jsxDEV","_jsxDEV","register","Dashboard","user","_s","city","setCity","hasHVAC","setHasHVAC","hasEcologica","setHasEcologica","airQualityData","setAirQualityData","keyDataPoints","setKeyDataPoints","over10","over20","over50","error","setError","pm25ChartInstance","pm10ChartInstance","pm25Ref","pm10Ref","firstName","setFirstName","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","title","display","text","x","plugins","legend","position","tooltip","callbacks","label","context","dataset","parsed","fetchPreferences","console","id","log","data","from","select","eq","single","message","has_HVAC","has_ecologgica","first_name","fetchAirQualityData","selectedCity","response","fetch","json","cityData","filter","row","_row$City","City","toLowerCase","length","sortedData","sort","a","b","Date","valueOf","recentData","slice","adjustedData","applyPreferences","initChart","map","toDate","adjustedPM25","adjustedPM10","calculateKeyDataPoints","ref","chartInstanceRef","current","destroy","ctx","getContext","newChart","type","labels","datasets","borderColor","backgroundColor","tension","fill","options","time","unit","calculateImprovedAirQuality","originalValue","improvedValue","toFixed","getChartData","baseData","d","timestamp","pm25","push","getChartData10","pm10","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { supabase } from './supabaseClient';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\nimport 'chartjs-adapter-moment';\nimport dayjs from 'dayjs';\nimport { Line } from 'react-chartjs-2';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst Dashboard = ({ user }) => {\n  const [city, setCity] = useState('');\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [keyDataPoints, setKeyDataPoints] = useState({ over10: 0, over20: 0, over50: 0 });\n  const [error, setError] = useState(null);\n  const pm25ChartInstance = useRef(null);\n  const pm10ChartInstance = useRef(null);\n  const pm25Ref = useRef(null);\n  const pm10Ref = useRef(null);\n  const [firstName, setFirstName] = useState('');\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'µg/m³'\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Time'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y} µg/m³`;\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (user) {\n      fetchPreferences();\n    } else {\n      console.error(\"User is not defined, cannot fetch preferences.\");\n    }\n  }, [user]);\n\n  const fetchPreferences = async () => {\n    if (!user || !user.id) {\n      console.error(\"User ID is undefined, cannot fetch preferences.\");\n      setError(\"User not authenticated.\");\n      return;\n    }\n\n    console.log(\"Fetching preferences for User ID:\", user.id);\n\n    const { data, error } = await supabase\n      .from('user_preferences')\n      .select('*')\n      .eq('user_id', user.id)\n      .single();\n\n    if (error) {\n      console.error(\"Error fetching preferences:\", error.message);\n      setError(\"Error fetching preferences: \" + error.message);\n      return;\n    }\n\n    if (data) {\n      console.log(\"Fetched user preferences:\", data);\n      setCity(data.city);\n      setHasHVAC(data.has_HVAC);\n      setHasEcologica(data.has_ecologgica);\n      setFirstName(data.first_name || '');\n      fetchAirQualityData(data.city);\n    }\n  };\n\n  const fetchAirQualityData = async (selectedCity) => {\n    console.log(\"Selected City:\", selectedCity);\n    try {\n      const response = await fetch('http://localhost:5000/api/airqualitydata');\n      const data = await response.json();\n      console.log(\"Raw API response:\", data);\n\n      // Filter for the selected city\n      const cityData = data.filter(row => row.City?.toLowerCase() === selectedCity.toLowerCase());\n      console.log(\"Filtered city data:\", cityData);\n\n      if (!cityData.length) {\n        console.error(`No data found for city: ${selectedCity}`);\n        setError(`No air quality data available for ${selectedCity}`);\n        return;\n      }\n\n      // Sort data by date\n      const sortedData = cityData.sort((a, b) => {\n        return dayjs(a.Date, 'M/D/YYYY H:mm:ss').valueOf() - dayjs(b.Date, 'M/D/YYYY H:mm:ss').valueOf();\n      });\n\n      // Take the most recent 30 days of data\n      const recentData = sortedData.slice(-30);\n      console.log(\"Most recent 30 days of data:\", recentData);\n\n      // Apply user preferences to adjust data\n      const adjustedData = applyPreferences(recentData);\n      setAirQualityData(adjustedData);\n\n      // Initialize charts with adjusted data\n      initChart(pm25Ref, pm25ChartInstance, 'PM 2.5', adjustedData.map(row => ({\n        x: dayjs(row.Date, 'M/D/YYYY H:mm:ss').toDate(),\n        y: row.adjustedPM25\n      })));\n\n      initChart(pm10Ref, pm10ChartInstance, 'PM 10', adjustedData.map(row => ({\n        x: dayjs(row.Date, 'M/D/YYYY H:mm:ss').toDate(),\n        y: row.adjustedPM10\n      })));\n\n      // Calculate key data points after charts are initialized\n      calculateKeyDataPoints(adjustedData);\n    } catch (error) {\n      console.error('Error fetching air quality data:', error);\n      setError(\"Error fetching air quality data.\");\n    }\n  };\n\n  const applyPreferences = (data) => {\n    return data.map((row) => {\n      const adjustedPM25 = row['PM 2.5'] * (hasHVAC ? 0.6 : 1) * (hasEcologica ? 0.75 : 1);\n      const adjustedPM10 = row['PM 10'] * (hasEcologica ? 0.75 : 1);\n      return { ...row, adjustedPM25, adjustedPM10 };\n    });\n  };\n\n  const calculateKeyDataPoints = (data) => {\n    const over10 = data.filter(row => row.adjustedPM25 > 10).length;\n    const over20 = data.filter(row => row.adjustedPM25 > 20).length;\n    const over50 = data.filter(row => row.adjustedPM25 > 50).length;\n    setKeyDataPoints({ over10, over20, over50 });\n  };\n\n  const initChart = (ref, chartInstanceRef, label, data) => {\n    console.log(`Initializing ${label} chart with data:`, data);\n    if (!ref.current) {\n      console.error(`Canvas reference for ${label} is null`);\n      return;\n    }\n\n    if (chartInstanceRef.current) {\n      console.log(`Destroying existing ${label} chart instance...`);\n      chartInstanceRef.current.destroy();\n    }\n\n    const ctx = ref.current.getContext('2d');\n\n    // Create the new chart\n    const newChart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: airQualityData.map(row => row.Date),\n        datasets: [{\n          label: label,\n          data: data,\n          borderColor: 'rgba(34, 139, 34, 1)',\n          backgroundColor: 'rgba(34, 139, 34, 0.2)',\n          tension: 0.1,\n          fill: true,\n        }],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: {\n            type: 'time',\n            time: { unit: 'day' },\n            title: { display: true, text: 'Date' },\n          },\n          y: {\n            beginAtZero: true,\n            title: { display: true, text: 'µg/m³' },\n          },\n        },\n      },\n    });\n\n    chartInstanceRef.current = newChart; // Save the new chart instance\n  };\n\n  const calculateImprovedAirQuality = (originalValue, hasHVAC, hasEcologica) => {\n    let improvedValue = originalValue;\n    \n    if (hasHVAC) {\n      improvedValue *= 0.5; // Reduce by 50% for HVAC\n    }\n    \n    if (hasEcologica) {\n      improvedValue *= 0.7; // Further reduce by 30% for Ecologica\n    }\n    \n    return improvedValue.toFixed(2);\n  };\n\n  const getChartData = () => {\n    const baseData = {\n      labels: airQualityData.map(d => d.timestamp),\n      datasets: [\n        {\n          label: 'Original PM2.5',\n          data: airQualityData.map(d => d.pm25),\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }\n      ]\n    };\n\n    if (hasHVAC || hasEcologica) {\n      baseData.datasets.push({\n        label: `Improved PM2.5 ${hasHVAC ? '(HVAC)' : ''} ${hasEcologica ? '(Ecologica)' : ''}`,\n        data: airQualityData.map(d => \n          calculateImprovedAirQuality(d.pm25, hasHVAC, hasEcologica)\n        ),\n        borderColor: hasEcologica ? 'rgb(54, 162, 235)' : 'rgb(255, 159, 64)',\n        tension: 0.1\n      });\n    }\n\n    return baseData;\n  };\n\n  const getChartData10 = () => {\n    const baseData = {\n      labels: airQualityData.map(d => d.timestamp),\n      datasets: [\n        {\n          label: 'Original PM10',\n          data: airQualityData.map(d => d.pm10),\n          borderColor: 'rgb(153, 102, 255)',\n          tension: 0.1\n        }\n      ]\n    };\n\n    if (hasHVAC || hasEcologica) {\n      baseData.datasets.push({\n        label: `Improved PM10 ${hasHVAC ? '(HVAC)' : ''} ${hasEcologica ? '(Ecologica)' : ''}`,\n        data: airQualityData.map(d => \n          calculateImprovedAirQuality(d.pm10, hasHVAC, hasEcologica)\n        ),\n        borderColor: hasEcologica ? 'rgb(54, 162, 235)' : 'rgb(255, 159, 64)',\n        tension: 0.1\n      });\n    }\n\n    return baseData;\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h1>{firstName ? `${firstName}'s ` : ''}{city} Dashboard</h1>\n      \n      <div className=\"chart-container\">\n        <div className=\"chart\">\n          <h2>PM2.5 Levels</h2>\n          {airQualityData.length > 0 ? (\n            <Line data={getChartData()} options={chartOptions} />\n          ) : (\n            <p>Loading data...</p>\n          )}\n        </div>\n        \n        <div className=\"chart\">\n          <h2>PM10 Levels</h2>\n          {airQualityData.length > 0 ? (\n            <Line data={getChartData10()} options={chartOptions} />\n          ) : (\n            <p>Loading data...</p>\n          )}\n        </div>\n      </div>\n\n      {/* Add a legend explaining the improvements */}\n      {(hasHVAC || hasEcologica) && (\n        <div className=\"improvements-legend\">\n          <h3>Air Quality Improvements:</h3>\n          {hasHVAC && <p>• HVAC System: 50% reduction in particulate matter</p>}\n          {hasEcologica && <p>• Ecologica System: Additional 30% reduction</p>}\n          {hasHVAC && hasEcologica && (\n            <p>• Total improvement: 65% reduction in particulate matter</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}