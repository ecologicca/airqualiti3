{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\nconst calculateHVACReduction = value => {\n  return value * 0.7; // 30% reduction\n};\nconst calculateEcologicaReduction = value => {\n  return value * 0.6; // 40% reduction\n};\nconst calculateCombinedReduction = value => {\n  return value * 0.5; // 50% reduction\n};\nconst calculateDeeperSleepMinutes = (data, hasHVAC, hasEcologica) => {\n  const getAdjustedValue = value => {\n    if (hasHVAC && hasEcologica) {\n      return calculateCombinedReduction(value);\n    } else if (hasHVAC) {\n      return calculateHVACReduction(value);\n    } else if (hasEcologica) {\n      return calculateEcologicaReduction(value);\n    }\n    return value;\n  };\n\n  // Count days where PM2.5 is 5 or under after reductions\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  // Calculate total minutes of deeper sleep\n  // days × 8 hours × 60 minutes\n  const deeperSleepMinutes = daysUnderThreshold * 8 * 60;\n  return deeperSleepMinutes;\n};\nconst Dashboard = () => {\n  _s();\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Original PM2.5': true,\n    'PM2.5 with HVAC': false,\n    'PM2.5 with Ecologica': false,\n    'PM2.5 with Both': false,\n    'Original PM10': true,\n    'PM10 with HVAC': false,\n    'PM10 with Ecologica': false,\n    'PM10 with Both': false\n  });\n  const processChartData = (data, pollutantType) => {\n    const datasets = [{\n      label: `Original ${pollutantType}`,\n      data: data.map(d => ({\n        x: d.date,\n        y: pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5'])\n      })),\n      borderColor: 'rgb(0, 100, 0)',\n      // Dark green\n      backgroundColor: 'rgba(0, 100, 0, 0.1)',\n      borderWidth: 2,\n      tension: 0.1,\n      hidden: !activeDatasets[`Original ${pollutantType}`]\n    }];\n    if (hasHVAC) {\n      datasets.push({\n        label: `${pollutantType} with HVAC`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateHVACReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(34, 139, 34)',\n        // Forest green\n        backgroundColor: 'rgba(34, 139, 34, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`${pollutantType} with HVAC`]\n      });\n    }\n    if (hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Ecologica`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateEcologicaReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(60, 179, 113)',\n        // Medium sea green\n        backgroundColor: 'rgba(60, 179, 113, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`${pollutantType} with Ecologica`]\n      });\n    }\n    if (hasHVAC && hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Both`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateCombinedReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(144, 238, 144)',\n        // Light green\n        backgroundColor: 'rgba(144, 238, 144, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`${pollutantType} with Both`]\n      });\n    }\n    return {\n      datasets\n    };\n  };\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      var _airQualityData$, _airQualityData$2;\n      console.log('Setting chart data with:', {\n        sampleDataPoint: airQualityData[0],\n        pm10Value: (_airQualityData$ = airQualityData[0]) === null || _airQualityData$ === void 0 ? void 0 : _airQualityData$['PM 10'],\n        pm25Value: (_airQualityData$2 = airQualityData[0]) === null || _airQualityData$2 === void 0 ? void 0 : _airQualityData$2['PM 2.5']\n      });\n      setChartData({\n        pm25: processChartData(airQualityData, 'PM2.5'),\n        pm10: processChartData(airQualityData, 'PM10')\n      });\n    }\n  }, [airQualityData, hasHVAC, hasEcologica, activeDatasets]);\n  const getLast30Days = data => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n    const validData = data.map(item => ({\n      date: new Date(item.Date),\n      'PM 2.5': parseFloat(item['PM 2.5']),\n      'PM 10': parseFloat(item['PM 10']),\n      city: item.City,\n      temp: item.Temp\n    })).filter(item => !isNaN(item.date.getTime()) && !isNaN(item['PM 10']) && !isNaN(item['PM 2.5']) && item.city === city).sort((a, b) => b.date - a.date);\n    console.log('Processed valid data for city:', city, validData[0]);\n    if (validData.length === 0) return [];\n    const mostRecentDate = validData[0].date;\n    const cutoffDate = new Date(mostRecentDate);\n    cutoffDate.setDate(cutoffDate.getDate() - 30);\n    return validData.filter(item => item.date >= cutoffDate).sort((a, b) => a.date - b.date);\n  };\n  useEffect(() => {\n    async function fetchPreferences() {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (!user) return;\n        const {\n          data,\n          error\n        } = await supabase.from('user_preferences').select('has_HVAC, has_ecologgica, city').eq('user_id', user.id).single();\n        console.log('Fetched preferences:', data);\n        if (error) {\n          console.error('Error fetching preferences:', error);\n          return;\n        }\n        if (data) {\n          console.log('Setting city to:', data.city);\n          setCity(data.city);\n          setHasHVAC(data.has_HVAC);\n          setHasEcologica(data.has_ecologgica);\n          setActiveDatasets(prev => ({\n            ...prev,\n            'PM2.5 with HVAC': data.has_HVAC,\n            'PM2.5 with Ecologica': data.has_ecologgica,\n            'PM2.5 with Both': data.has_HVAC && data.has_ecologgica,\n            'PM10 with HVAC': data.has_HVAC,\n            'PM10 with Ecologica': data.has_ecologgica,\n            'PM10 with Both': data.has_HVAC && data.has_ecologgica\n          }));\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n    fetchPreferences();\n  }, []);\n  const fetchAirQualityData = async () => {\n    try {\n      var _data$, _data$2;\n      const response = await fetch(`http://localhost:5000/api/airqualitydata?city=${city}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Raw data from API:', {\n        city: city,\n        firstRow: data[0],\n        pm25Example: (_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$['PM 2.5'],\n        pm10Example: (_data$2 = data[0]) === null || _data$2 === void 0 ? void 0 : _data$2['PM 10']\n      });\n      const last30DaysData = getLast30Days(data.filter(item => item.City === city));\n      setAirQualityData(last30DaysData);\n    } catch (error) {\n      console.error('Error fetching air quality:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchAirQualityData();\n  }, [city]);\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: true,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day'\n        },\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)'\n        },\n        ticks: {\n          callback: function (value) {\n            return value + ' ug/m³';\n          }\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} ug/m³`;\n          }\n        }\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          padding: 15,\n          onClick: (event, legendItem, legend) => {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            const meta = ci.getDatasetMeta(index);\n            meta.hidden = !meta.hidden;\n            setActiveDatasets(prev => ({\n              ...prev,\n              [legendItem.text]: !meta.hidden\n            }));\n            ci.update();\n          }\n        }\n      }\n    }\n  };\n  const calculateDaysOverThreshold = (data, pollutantType, threshold) => {\n    return data.filter(day => parseFloat(day[pollutantType]) > threshold).length;\n  };\n  const calculateDaysOverPeak = (data, pollutantType, threshold) => {\n    return data.filter(day => parseFloat(day[pollutantType]) > threshold).length;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [airQualityData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deeper-sleep-banner\",\n      style: {\n        backgroundColor: '#90c789',\n        color: '#1a472a',\n        padding: '20px',\n        borderRadius: '8px',\n        marginBottom: '20px',\n        textAlign: 'center',\n        fontSize: '1.5rem',\n        fontWeight: 'bold'\n      },\n      children: [calculateDeeperSleepMinutes(airQualityData, hasHVAC, hasEcologica).toLocaleString(), \" minutes of deeper sleep\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [firstName ? `${firstName}'s ` : '', city, \" Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"PM2.5 Levels\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 15\n            }, this), chartData && chartData.pm25 && /*#__PURE__*/_jsxDEV(Line, {\n              data: chartData.pm25,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-title\",\n              children: \"KEY DATA POINTS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-points\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 2.5', 10)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 381,\n                    columnNumber: 30\n                  }, this), 10, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 2.5', 20)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 390,\n                    columnNumber: 30\n                  }, this), 20, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverPeak(airQualityData, 'PM 2.5', 50)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 399,\n                    columnNumber: 30\n                  }, this), 50, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 398,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"PM10 Levels\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 15\n            }, this), chartData && chartData.pm10 && /*#__PURE__*/_jsxDEV(Line, {\n              data: chartData.pm10,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-title\",\n              children: \"KEY DATA POINTS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-points\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 10', 20)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 427,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 431,\n                    columnNumber: 30\n                  }, this), 20, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 10', 40)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 436,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 440,\n                    columnNumber: 30\n                  }, this), 40, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 439,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverPeak(airQualityData, 'PM 10', 50)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 445,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 30\n                  }, this), 50, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 340,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"IYlBoNEGQkx3RnwkflcUAGum+i8=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","jsxDEV","_jsxDEV","register","defaults","responsive","maintainAspectRatio","calculateHVACReduction","value","calculateEcologicaReduction","calculateCombinedReduction","calculateDeeperSleepMinutes","data","hasHVAC","hasEcologica","getAdjustedValue","daysUnderThreshold","filter","day","adjustedValue","parseFloat","length","deeperSleepMinutes","Dashboard","_s","airQualityData","setAirQualityData","chartData","setChartData","isLoading","setIsLoading","setHasHVAC","setHasEcologica","city","setCity","firstName","setFirstName","activeDatasets","setActiveDatasets","processChartData","pollutantType","datasets","label","map","d","x","date","y","borderColor","backgroundColor","borderWidth","tension","hidden","push","_airQualityData$","_airQualityData$2","console","log","sampleDataPoint","pm10Value","pm25Value","pm25","pm10","getLast30Days","Array","isArray","validData","item","Date","City","temp","Temp","isNaN","getTime","sort","a","b","mostRecentDate","cutoffDate","setDate","getDate","fetchPreferences","user","auth","getUser","error","from","select","eq","id","single","has_HVAC","has_ecologgica","prev","fetchAirQualityData","_data$","_data$2","response","fetch","ok","Error","status","json","firstRow","pm25Example","pm10Example","last30DaysData","chartOptions","scales","type","time","unit","grid","display","color","beginAtZero","ticks","callback","plugins","tooltip","mode","intersect","callbacks","context","dataset","parsed","toFixed","legend","position","labels","usePointStyle","padding","onClick","event","legendItem","index","datasetIndex","ci","chart","meta","getDatasetMeta","text","update","calculateDaysOverThreshold","threshold","calculateDaysOverPeak","className","children","style","borderRadius","marginBottom","textAlign","fontSize","fontWeight","toLocaleString","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\n\nconst calculateHVACReduction = (value) => {\n  return value * 0.7; // 30% reduction\n};\n\nconst calculateEcologicaReduction = (value) => {\n  return value * 0.6; // 40% reduction\n};\n\nconst calculateCombinedReduction = (value) => {\n  return value * 0.5; // 50% reduction\n};\n\nconst calculateDeeperSleepMinutes = (data, hasHVAC, hasEcologica) => {\n  const getAdjustedValue = (value) => {\n    if (hasHVAC && hasEcologica) {\n      return calculateCombinedReduction(value);\n    } else if (hasHVAC) {\n      return calculateHVACReduction(value);\n    } else if (hasEcologica) {\n      return calculateEcologicaReduction(value);\n    }\n    return value;\n  };\n\n  // Count days where PM2.5 is 5 or under after reductions\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  // Calculate total minutes of deeper sleep\n  // days × 8 hours × 60 minutes\n  const deeperSleepMinutes = daysUnderThreshold * 8 * 60;\n\n  return deeperSleepMinutes;\n};\n\nconst Dashboard = () => {\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Original PM2.5': true,\n    'PM2.5 with HVAC': false,\n    'PM2.5 with Ecologica': false,\n    'PM2.5 with Both': false,\n    'Original PM10': true,\n    'PM10 with HVAC': false,\n    'PM10 with Ecologica': false,\n    'PM10 with Both': false\n  });\n\n  const processChartData = (data, pollutantType) => {\n    const datasets = [\n      {\n        label: `Original ${pollutantType}`,\n        data: data.map(d => ({\n          x: d.date,\n          y: pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5'])\n        })),\n        borderColor: 'rgb(0, 100, 0)', // Dark green\n        backgroundColor: 'rgba(0, 100, 0, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`Original ${pollutantType}`]\n      }\n    ];\n\n    if (hasHVAC) {\n      datasets.push({\n        label: `${pollutantType} with HVAC`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateHVACReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(34, 139, 34)', // Forest green\n        backgroundColor: 'rgba(34, 139, 34, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`${pollutantType} with HVAC`]\n      });\n    }\n\n    if (hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Ecologica`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateEcologicaReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(60, 179, 113)', // Medium sea green\n        backgroundColor: 'rgba(60, 179, 113, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`${pollutantType} with Ecologica`]\n      });\n    }\n\n    if (hasHVAC && hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Both`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateCombinedReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(144, 238, 144)', // Light green\n        backgroundColor: 'rgba(144, 238, 144, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`${pollutantType} with Both`]\n      });\n    }\n\n    return { datasets };\n  };\n\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      console.log('Setting chart data with:', {\n        sampleDataPoint: airQualityData[0],\n        pm10Value: airQualityData[0]?.['PM 10'],\n        pm25Value: airQualityData[0]?.['PM 2.5']\n      });\n      \n      setChartData({\n        pm25: processChartData(airQualityData, 'PM2.5'),\n        pm10: processChartData(airQualityData, 'PM10')\n      });\n    }\n  }, [airQualityData, hasHVAC, hasEcologica, activeDatasets]);\n\n  const getLast30Days = (data) => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n\n    const validData = data\n      .map(item => ({\n        date: new Date(item.Date),\n        'PM 2.5': parseFloat(item['PM 2.5']),\n        'PM 10': parseFloat(item['PM 10']),\n        city: item.City,\n        temp: item.Temp\n      }))\n      .filter(item => \n        !isNaN(item.date.getTime()) && \n        !isNaN(item['PM 10']) && \n        !isNaN(item['PM 2.5']) &&\n        item.city === city\n      )\n      .sort((a, b) => b.date - a.date);\n\n    console.log('Processed valid data for city:', city, validData[0]);\n\n    if (validData.length === 0) return [];\n\n    const mostRecentDate = validData[0].date;\n    const cutoffDate = new Date(mostRecentDate);\n    cutoffDate.setDate(cutoffDate.getDate() - 30);\n\n    return validData\n      .filter(item => item.date >= cutoffDate)\n      .sort((a, b) => a.date - b.date);\n  };\n\n  useEffect(() => {\n    async function fetchPreferences() {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) return;\n\n        const { data, error } = await supabase\n          .from('user_preferences')\n          .select('has_HVAC, has_ecologgica, city')\n          .eq('user_id', user.id)\n          .single();\n\n        console.log('Fetched preferences:', data);\n\n        if (error) {\n          console.error('Error fetching preferences:', error);\n          return;\n        }\n\n        if (data) {\n          console.log('Setting city to:', data.city);\n          setCity(data.city);\n          setHasHVAC(data.has_HVAC);\n          setHasEcologica(data.has_ecologgica);\n          \n          setActiveDatasets(prev => ({\n            ...prev,\n            'PM2.5 with HVAC': data.has_HVAC,\n            'PM2.5 with Ecologica': data.has_ecologgica,\n            'PM2.5 with Both': (data.has_HVAC && data.has_ecologgica),\n            'PM10 with HVAC': data.has_HVAC,\n            'PM10 with Ecologica': data.has_ecologgica,\n            'PM10 with Both': (data.has_HVAC && data.has_ecologgica)\n          }));\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n\n    fetchPreferences();\n  }, []);\n\n  const fetchAirQualityData = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/airqualitydata?city=${city}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Raw data from API:', {\n        city: city,\n        firstRow: data[0],\n        pm25Example: data[0]?.['PM 2.5'],\n        pm10Example: data[0]?.['PM 10']\n      });\n      const last30DaysData = getLast30Days(data.filter(item => item.City === city));\n      setAirQualityData(last30DaysData);\n    } catch (error) {\n      console.error('Error fetching air quality:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAirQualityData();\n  }, [city]);\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: true,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day'\n        },\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)',\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)',\n        },\n        ticks: {\n          callback: function(value) {\n            return value + ' ug/m³';\n          }\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} ug/m³`;\n          }\n        }\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          padding: 15,\n          onClick: (event, legendItem, legend) => {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            const meta = ci.getDatasetMeta(index);\n\n            meta.hidden = !meta.hidden;\n\n            setActiveDatasets(prev => ({\n              ...prev,\n              [legendItem.text]: !meta.hidden\n            }));\n\n            ci.update();\n          }\n        }\n      }\n    }\n  };\n\n  const calculateDaysOverThreshold = (data, pollutantType, threshold) => {\n    return data.filter(day => \n      parseFloat(day[pollutantType]) > threshold\n    ).length;\n  };\n\n  const calculateDaysOverPeak = (data, pollutantType, threshold) => {\n    return data.filter(day => parseFloat(day[pollutantType]) > threshold).length;\n  };\n\n  return (\n    <div className=\"dashboard\">\n      {airQualityData.length > 0 && (\n        <div className=\"deeper-sleep-banner\" style={{\n          backgroundColor: '#90c789',\n          color: '#1a472a',\n          padding: '20px',\n          borderRadius: '8px',\n          marginBottom: '20px',\n          textAlign: 'center',\n          fontSize: '1.5rem',\n          fontWeight: 'bold'\n        }}>\n          {calculateDeeperSleepMinutes(airQualityData, hasHVAC, hasEcologica).toLocaleString()} minutes of deeper sleep\n        </div>\n      )}\n      <h1>{firstName ? `${firstName}'s ` : ''}{city} Dashboard</h1>\n      \n      <div className=\"dashboard-container\">\n        {/* PM2.5 Section */}\n        <div className=\"dashboard-section\">\n          <div className=\"content-wrapper\">\n            <div className=\"chart-side\">\n              <h2>PM2.5 Levels</h2>\n              {chartData && chartData.pm25 && (\n                <Line\n                  data={chartData.pm25}\n                  options={chartOptions}\n                />\n              )}\n            </div>\n            \n            <div className=\"data-side\">\n              <div className=\"key-data-title\">\n                KEY DATA POINTS\n              </div>\n              <div className=\"key-data-points\">\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 2.5', 10)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {10}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 2.5', 20)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {20}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverPeak(airQualityData, 'PM 2.5', 50)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {50}ug/m³\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* PM10 Section */}\n        <div className=\"dashboard-section\">\n          <div className=\"content-wrapper\">\n            <div className=\"chart-side\">\n              <h2>PM10 Levels</h2>\n              {chartData && chartData.pm10 && (\n                <Line\n                  data={chartData.pm10}\n                  options={chartOptions}\n                />\n              )}\n            </div>\n            \n            <div className=\"data-side\">\n              <div className=\"key-data-title\">\n                KEY DATA POINTS\n              </div>\n              <div className=\"key-data-points\">\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 10', 20)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {20}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 10', 40)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {40}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverPeak(airQualityData, 'PM 10', 50)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {50}ug/m³\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}