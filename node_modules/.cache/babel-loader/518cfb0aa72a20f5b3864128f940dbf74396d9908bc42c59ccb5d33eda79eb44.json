{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/UserPreferences.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserPreferences = () => {\n  _s();\n  const [availableCities, setAvailableCities] = useState(['Barcelona']);\n  const [preferences, setPreferences] = useState({\n    has_HVAC: false,\n    has_ecologgica: false,\n    first_name: '',\n    last_name: '',\n    city: 'Barcelona'\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchPreferences = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user) {\n          const {\n            data: preferencesData,\n            error\n          } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n          if (error) throw error;\n          if (preferencesData) {\n            setPreferences({\n              has_HVAC: preferencesData.has_HVAC || false,\n              has_ecologgica: preferencesData.has_ecologgica || false,\n              first_name: preferencesData.first_name || '',\n              last_name: preferencesData.last_name || '',\n              city: preferencesData.city || 'Barcelona'\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n    fetchPreferences();\n  }, []);\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from('airqualitydata').select('city').order('city');\n        if (error) {\n          throw error;\n        }\n        if (data) {\n          const uniqueCities = [...new Set(data.map(item => item.city))];\n          setAvailableCities(uniqueCities);\n        }\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCities();\n  }, []);\n  const handleSave = async () => {\n    try {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) {\n        console.error('No user found');\n        alert('Please log in to save preferences');\n        return;\n      }\n      console.log('Attempting to save preferences:', {\n        user_id: user.id,\n        ...preferences\n      });\n      const {\n        data,\n        error\n      } = await supabase.from('user_preferences').upsert({\n        user_id: user.id,\n        has_HVAC: preferences.has_HVAC,\n        has_ecologgica: preferences.has_ecologgica,\n        first_name: preferences.first_name.trim(),\n        last_name: preferences.last_name.trim(),\n        city: preferences.city || 'Barcelona'\n      }, {\n        onConflict: 'user_id',\n        ignoreDuplicates: false\n      }).select();\n      if (error) {\n        console.error('Detailed save error:', error);\n        throw error;\n      }\n      console.log('Save successful:', data);\n      alert('Preferences saved successfully!');\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Error saving preferences:', error.message);\n      alert(`Failed to save preferences: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Preferences\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"First Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: preferences.first_name,\n          onChange: e => setPreferences({\n            ...preferences,\n            first_name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Last Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: preferences.last_name,\n          onChange: e => setPreferences({\n            ...preferences,\n            last_name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"City:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: preferences.city,\n          onChange: e => setPreferences({\n            ...preferences,\n            city: e.target.value\n          }),\n          className: \"form-select\",\n          disabled: isLoading,\n          children: isLoading ? /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Loading cities...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this) : availableCities.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: city,\n            children: city\n          }, city, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: preferences.has_HVAC,\n        onChange: e => setPreferences({\n          ...preferences,\n          has_HVAC: e.target.checked\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), \"Use HVAC\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: preferences.has_ecologgica,\n        onChange: e => setPreferences({\n          ...preferences,\n          has_ecologgica: e.target.checked\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), \"Use Ecologica Product\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      children: \"Save Preferences\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(UserPreferences, \"RUJTRWIyF7rpPM8VosWQrBMtFYQ=\", false, function () {\n  return [useNavigate];\n});\n_c = UserPreferences;\nexport default UserPreferences;\nvar _c;\n$RefreshReg$(_c, \"UserPreferences\");","map":{"version":3,"names":["React","useState","useEffect","supabase","useNavigate","jsxDEV","_jsxDEV","UserPreferences","_s","availableCities","setAvailableCities","preferences","setPreferences","has_HVAC","has_ecologgica","first_name","last_name","city","isLoading","setIsLoading","navigate","fetchPreferences","data","user","auth","getUser","preferencesData","error","from","select","eq","id","single","console","fetchCities","order","uniqueCities","Set","map","item","handleSave","alert","log","user_id","upsert","trim","onConflict","ignoreDuplicates","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","disabled","checked","onClick","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/UserPreferences.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { useNavigate } from 'react-router-dom';\n\nconst UserPreferences = () => {\n  const [availableCities, setAvailableCities] = useState(['Barcelona']);\n  const [preferences, setPreferences] = useState({ \n    has_HVAC: false, \n    has_ecologgica: false,\n    first_name: '',\n    last_name: '',\n    city: 'Barcelona'\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchPreferences = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          const { data: preferencesData, error } = await supabase\n            .from('user_preferences')\n            .select('*')\n            .eq('user_id', user.id)\n            .single();\n\n          if (error) throw error;\n\n          if (preferencesData) {\n            setPreferences({\n              has_HVAC: preferencesData.has_HVAC || false,\n              has_ecologgica: preferencesData.has_ecologgica || false,\n              first_name: preferencesData.first_name || '',\n              last_name: preferencesData.last_name || '',\n              city: preferencesData.city || 'Barcelona'\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n\n    fetchPreferences();\n  }, []);\n\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('airqualitydata')\n          .select('city')\n          .order('city');\n        \n        if (error) {\n          throw error;\n        }\n\n        if (data) {\n          const uniqueCities = [...new Set(data.map(item => item.city))];\n          setAvailableCities(uniqueCities);\n        }\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCities();\n  }, []);\n\n  const handleSave = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        console.error('No user found');\n        alert('Please log in to save preferences');\n        return;\n      }\n\n      console.log('Attempting to save preferences:', {\n        user_id: user.id,\n        ...preferences\n      });\n\n      const { data, error } = await supabase\n        .from('user_preferences')\n        .upsert({ \n          user_id: user.id, \n          has_HVAC: preferences.has_HVAC, \n          has_ecologgica: preferences.has_ecologgica,\n          first_name: preferences.first_name.trim(),\n          last_name: preferences.last_name.trim(),\n          city: preferences.city || 'Barcelona'\n        }, {\n          onConflict: 'user_id',\n          ignoreDuplicates: false\n        })\n        .select();\n\n      if (error) {\n        console.error('Detailed save error:', error);\n        throw error;\n      }\n\n      console.log('Save successful:', data);\n      alert('Preferences saved successfully!');\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Error saving preferences:', error.message);\n      alert(`Failed to save preferences: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"container form-container\">\n      <h2>User Preferences</h2>\n      <div>\n        <label>\n          First Name:\n          <input\n            type=\"text\"\n            value={preferences.first_name}\n            onChange={(e) => setPreferences({ ...preferences, first_name: e.target.value })}\n          />\n        </label>\n      </div>\n      <div>\n        <label>\n          Last Name:\n          <input\n            type=\"text\"\n            value={preferences.last_name}\n            onChange={(e) => setPreferences({ ...preferences, last_name: e.target.value })}\n          />\n        </label>\n      </div>\n      <div>\n        <label>\n          City:\n          <select\n            value={preferences.city}\n            onChange={(e) => setPreferences({ ...preferences, city: e.target.value })}\n            className=\"form-select\"\n            disabled={isLoading}\n          >\n            {isLoading ? (\n              <option>Loading cities...</option>\n            ) : (\n              availableCities.map((city) => (\n                <option key={city} value={city}>\n                  {city}\n                </option>\n              ))\n            )}\n          </select>\n        </label>\n      </div>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={preferences.has_HVAC}\n          onChange={(e) => setPreferences({ ...preferences, has_HVAC: e.target.checked })}\n        />\n        Use HVAC\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={preferences.has_ecologgica}\n          onChange={(e) => setPreferences({ ...preferences, has_ecologgica: e.target.checked })}\n        />\n        Use Ecologica Product\n      </label>\n      <button onClick={handleSave}>Save Preferences</button>\n    </div>\n  );\n};\n\nexport default UserPreferences;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}