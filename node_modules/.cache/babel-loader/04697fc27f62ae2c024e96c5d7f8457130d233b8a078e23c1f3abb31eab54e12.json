{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/app.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Questionnaire from './Questionnaire';\nimport { supabase } from './supabaseClient';\nimport Chart from 'chart.js/auto';\nimport './styles.css'; //styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [user, setUser] = useState(null); // Get the logged-in user from Supabase\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [selectedCity, setSelectedCity] = useState('');\n  const [hasCompletedQuestionnaire, setHasCompletedQuestionnaire] = useState(false);\n  const [pm25Chart, setPm25Chart] = useState(null);\n  const [pm10Chart, setPm10Chart] = useState(null);\n  const [error, setError] = useState(null); // <-- Define error state to store errors\n\n  // Fetch the logged-in user information\n  useEffect(() => {\n    const fetchUser = async () => {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      setUser(user);\n    };\n    fetchUser();\n  }, []);\n\n  // Fetch user preferences to check if they've completed the questionnaire\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      if (!user) return;\n      const {\n        data,\n        error\n      } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n      if (data) {\n        setHasCompletedQuestionnaire(true);\n        setSelectedCity(data.city);\n        applyAdjustments(data.has_HVAC, data.has_ecologgica); // Apply adjustments based on preferences\n      } else {\n        setHasCompletedQuestionnaire(false);\n      }\n    };\n    fetchUserPreferences();\n  }, [user]);\n\n  // Fetch air quality data and initialize charts\n  useEffect(() => {\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`Error fetching air quality data: ${response.statusText}`);\n        }\n        const data = await response.json();\n        console.log('Air Quality Data:', data); // Log the fetched data to see if it's coming through\n        setAirQualityData(data);\n      } catch (error) {\n        console.error(\"Error fetching air quality data:\", error);\n        setError(\"Error fetching air quality data\");\n      }\n    };\n    fetchAirQualityData();\n  }, [hasCompletedQuestionnaire]);\n\n  // Initialize charts for PM 2.5 and PM 10\n  const initCharts = data => {\n    const ctx25 = document.getElementById('pm25Chart').getContext('2d');\n    const ctx10 = document.getElementById('pm10Chart').getContext('2d');\n    const cityData = data.filter(row => row.City === selectedCity);\n    const labels = cityData.map(row => row.Date);\n    const pm25Data = cityData.map(row => row['PM 2.5']);\n    const pm10Data = cityData.map(row => row['PM 10']);\n    const newPm25Chart = new Chart(ctx25, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'PM 2.5',\n          data: pm25Data,\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'µg/m³'\n            }\n          }\n        }\n      }\n    });\n    const newPm10Chart = new Chart(ctx10, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'PM 10',\n          data: pm10Data,\n          borderColor: 'rgb(255, 99, 132)',\n          tension: 0.1\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'µg/m³'\n            }\n          }\n        }\n      }\n    });\n    setPm25Chart(newPm25Chart);\n    setPm10Chart(newPm10Chart);\n  };\n\n  // Apply PM 2.5 and PM 10 adjustments based on user preferences\n  const applyAdjustments = (hasHVAC, hasEcologgica) => {\n    let pm25Multiplier = 1,\n      pm10Multiplier = 1;\n    if (hasHVAC) pm25Multiplier -= 0.40;\n    if (hasEcologgica) {\n      pm25Multiplier -= 0.25;\n      pm10Multiplier -= 0.25;\n    }\n    updateChartsDataWithAdjustments(pm25Multiplier, pm10Multiplier);\n  };\n\n  // Update chart data with adjustments\n  const updateChartsDataWithAdjustments = (pm25Multiplier, pm10Multiplier) => {\n    const cityData = airQualityData.filter(row => row.City === selectedCity);\n    const labels = cityData.map(row => row.Date);\n    const pm25Data = cityData.map(row => parseFloat(row['PM 2.5']) * pm25Multiplier);\n    const pm10Data = cityData.map(row => parseFloat(row['PM 10']) * pm10Multiplier);\n    updateChartData(pm25Chart, labels, pm25Data);\n    updateChartData(pm10Chart, labels, pm10Data);\n  };\n\n  // Helper function to update chart data\n  const updateChartData = (chart, labels, data) => {\n    if (!chart) return;\n    chart.data.labels = labels;\n    chart.data.datasets[0].data = data;\n    chart.update();\n  };\n\n  // Handle city change from dropdown\n  const handleCityChange = event => {\n    const city = event.target.value;\n    setSelectedCity(city);\n    updateChartsDataWithAdjustments(1, 1); // Reset any adjustments on city change\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 15\n    }, this), hasCompletedQuestionnaire ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Air Quality Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upper-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"city-select\",\n            children: \"Select City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"city-select\",\n            value: selectedCity,\n            onChange: handleCityChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this), [...new Set(airQualityData.map(row => row.City))].map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: city,\n              children: city\n            }, city, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Key Data Points\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"City: \", selectedCity]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"PM 2.5 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"pm25Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"PM 10 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"pm10Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Questionnaire, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 3\n  }, this);\n};\n_s(App, \"PagzeBaPLdH0DryIIHzleMqcngo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Questionnaire","supabase","Chart","jsxDEV","_jsxDEV","App","_s","user","setUser","airQualityData","setAirQualityData","selectedCity","setSelectedCity","hasCompletedQuestionnaire","setHasCompletedQuestionnaire","pm25Chart","setPm25Chart","pm10Chart","setPm10Chart","error","setError","fetchUser","data","auth","getUser","fetchUserPreferences","from","select","eq","id","single","city","applyAdjustments","has_HVAC","has_ecologgica","fetchAirQualityData","response","fetch","ok","Error","statusText","json","console","log","initCharts","ctx25","document","getElementById","getContext","ctx10","cityData","filter","row","City","labels","map","Date","pm25Data","pm10Data","newPm25Chart","type","datasets","label","borderColor","tension","options","scales","x","title","display","text","y","beginAtZero","newPm10Chart","hasHVAC","hasEcologgica","pm25Multiplier","pm10Multiplier","updateChartsDataWithAdjustments","parseFloat","updateChartData","chart","update","handleCityChange","event","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","Set","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/app.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Questionnaire from './Questionnaire';\nimport { supabase } from './supabaseClient';\nimport Chart from 'chart.js/auto';\nimport './styles.css'; //styling\n\nconst App = () => {\n  const [user, setUser] = useState(null);  // Get the logged-in user from Supabase\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [selectedCity, setSelectedCity] = useState('');\n  const [hasCompletedQuestionnaire, setHasCompletedQuestionnaire] = useState(false);\n  const [pm25Chart, setPm25Chart] = useState(null);\n  const [pm10Chart, setPm10Chart] = useState(null);\n  const [error, setError] = useState(null);  // <-- Define error state to store errors\n  \n  // Fetch the logged-in user information\n  useEffect(() => {\n    const fetchUser = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      setUser(user);\n    };\n    fetchUser();\n  }, []);\n\n// Fetch user preferences to check if they've completed the questionnaire\nuseEffect(() => {\n  const fetchUserPreferences = async () => {\n    if (!user) return;\n    const { data, error } = await supabase\n      .from('user_preferences')\n      .select('*')\n      .eq('user_id', user.id)\n      .single();\n\n    if (data) {\n      setHasCompletedQuestionnaire(true);\n      setSelectedCity(data.city);\n      applyAdjustments(data.has_HVAC, data.has_ecologgica); // Apply adjustments based on preferences\n    } else {\n      setHasCompletedQuestionnaire(false);\n    }\n  };\n  fetchUserPreferences();\n}, [user]);\n\n  // Fetch air quality data and initialize charts\n  useEffect(() => {\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`Error fetching air quality data: ${response.statusText}`);\n        }\n        const data = await response.json();\n        console.log('Air Quality Data:', data); // Log the fetched data to see if it's coming through\n        setAirQualityData(data);\n      } catch (error) {\n        console.error(\"Error fetching air quality data:\", error);\n        setError(\"Error fetching air quality data\");\n      }\n    };\n  \n    fetchAirQualityData();\n  }, [hasCompletedQuestionnaire]);\n\n  // Initialize charts for PM 2.5 and PM 10\n  const initCharts = (data) => {\n    const ctx25 = document.getElementById('pm25Chart').getContext('2d');\n    const ctx10 = document.getElementById('pm10Chart').getContext('2d');\n\n    const cityData = data.filter(row => row.City === selectedCity);\n\n    const labels = cityData.map(row => row.Date);\n    const pm25Data = cityData.map(row => row['PM 2.5']);\n    const pm10Data = cityData.map(row => row['PM 10']);\n\n    const newPm25Chart = new Chart(ctx25, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{ label: 'PM 2.5', data: pm25Data, borderColor: 'rgb(75, 192, 192)', tension: 0.1 }],\n      },\n      options: {\n        scales: {\n          x: { type: 'time', title: { display: true, text: 'Date' } },\n          y: { beginAtZero: true, title: { display: true, text: 'µg/m³' } }\n        },\n      },\n    });\n\n    const newPm10Chart = new Chart(ctx10, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{ label: 'PM 10', data: pm10Data, borderColor: 'rgb(255, 99, 132)', tension: 0.1 }],\n      },\n      options: {\n        scales: {\n          x: { type: 'time', title: { display: true, text: 'Date' } },\n          y: { beginAtZero: true, title: { display: true, text: 'µg/m³' } }\n        },\n      },\n    });\n\n    setPm25Chart(newPm25Chart);\n    setPm10Chart(newPm10Chart);\n  };\n\n  // Apply PM 2.5 and PM 10 adjustments based on user preferences\n  const applyAdjustments = (hasHVAC, hasEcologgica) => {\n    let pm25Multiplier = 1, pm10Multiplier = 1;\n    if (hasHVAC) pm25Multiplier -= 0.40;\n    if (hasEcologgica) {\n      pm25Multiplier -= 0.25;\n      pm10Multiplier -= 0.25;\n    }\n    updateChartsDataWithAdjustments(pm25Multiplier, pm10Multiplier);\n  };\n\n // Update chart data with adjustments\n const updateChartsDataWithAdjustments = (pm25Multiplier, pm10Multiplier) => {\n  const cityData = airQualityData.filter(row => row.City === selectedCity);\n  const labels = cityData.map(row => row.Date);\n  const pm25Data = cityData.map(row => parseFloat(row['PM 2.5']) * pm25Multiplier);\n  const pm10Data = cityData.map(row => parseFloat(row['PM 10']) * pm10Multiplier);\n\n  updateChartData(pm25Chart, labels, pm25Data);\n  updateChartData(pm10Chart, labels, pm10Data);\n};\n\n// Helper function to update chart data\nconst updateChartData = (chart, labels, data) => {\n  if (!chart) return;\n  chart.data.labels = labels;\n  chart.data.datasets[0].data = data;\n  chart.update();\n};\n\n// Handle city change from dropdown\nconst handleCityChange = (event) => {\n  const city = event.target.value;\n  setSelectedCity(city);\n  updateChartsDataWithAdjustments(1, 1); // Reset any adjustments on city change\n};\n\nreturn (\n  <div className=\"dashboard-container\">\n    {error && <p className=\"error-message\">{error}</p>}\n    {hasCompletedQuestionnaire ? (\n      <div className=\"dashboard\">\n        <h1>Air Quality Dashboard</h1>\n        <div className=\"upper-section\">\n          <div className=\"left-box\">\n            <label htmlFor=\"city-select\">Select City</label>\n            <select id=\"city-select\" value={selectedCity} onChange={handleCityChange}>\n              <option value=\"\">Select a City</option>\n              {[...new Set(airQualityData.map(row => row.City))].map(city => (\n                <option key={city} value={city}>{city}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"right-box\">\n            <h2>Key Data Points</h2>\n            <ul>\n              <li>City: {selectedCity}</li>\n              {/* Add other key data points as needed */}\n            </ul>\n          </div>\n        </div>\n        <div className=\"chart-section\">\n          <div className=\"chart-container\">\n            <h3>PM 2.5 Levels</h3>\n            <canvas id=\"pm25Chart\"></canvas>\n          </div>\n          <div className=\"chart-container\">\n            <h3>PM 10 Levels</h3>\n            <canvas id=\"pm10Chart\"></canvas>\n          </div>\n        </div>\n      </div>\n    ) : (\n      <Questionnaire user={user} />\n    )}\n  </div>\n);\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}