{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/UserPreferences.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { useNavigate } from 'react-router-dom';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserPreferences = () => {\n  _s();\n  const [availableCities, setAvailableCities] = useState(['Toronto', 'San Francisco', 'New York', 'Dallas', 'Boston', 'Miami', 'Houston'].sort());\n  const [preferences, setPreferences] = useState({\n    has_HVAC: false,\n    has_ecologgica: false,\n    first_name: '',\n    last_name: '',\n    city: 'Toronto',\n    anxiety_base_level: 5,\n    // Default middle value\n    track_anxiety: false // New checkbox state\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchPreferences = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user) {\n          const {\n            data: preferencesData,\n            error\n          } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n          if (error) throw error;\n          if (preferencesData) {\n            setPreferences({\n              has_HVAC: preferencesData.has_HVAC || false,\n              has_ecologgica: preferencesData.has_ecologgica || false,\n              first_name: preferencesData.first_name || '',\n              last_name: preferencesData.last_name || '',\n              city: preferencesData.city || 'Toronto',\n              anxiety_base_level: preferencesData.anxiety_base_level || 5,\n              track_anxiety: preferencesData.track_anxiety || false\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n    fetchPreferences();\n  }, []);\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from('airqualitydata').select('city').order('city');\n        if (error) {\n          throw error;\n        }\n        if (data) {\n          const uniqueCities = [...new Set(data.map(item => item.city))];\n          setAvailableCities(uniqueCities);\n        }\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCities();\n  }, []);\n  const handleSave = async () => {\n    try {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) {\n        console.error('No user found');\n        alert('Please log in to save preferences');\n        return;\n      }\n      console.log('Attempting to save preferences:', {\n        user_id: user.id,\n        ...preferences\n      });\n      const {\n        data,\n        error\n      } = await supabase.from('user_preferences').upsert({\n        user_id: user.id,\n        ...preferences,\n        anxiety_base_level: Number(preferences.anxiety_base_level),\n        track_anxiety: preferences.track_anxiety\n      }, {\n        onConflict: 'user_id',\n        ignoreDuplicates: false\n      }).select();\n      if (error) {\n        console.error('Detailed save error:', error);\n        throw error;\n      }\n      console.log('Save successful:', data);\n      alert('Preferences saved successfully!');\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Error saving preferences:', error.message);\n      alert(`Failed to save preferences: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"preferences-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preferences-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"preferences-title\",\n        children: \"User Preferences\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"preferences-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"First Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: preferences.first_name,\n            onChange: e => setPreferences({\n              ...preferences,\n              first_name: e.target.value\n            }),\n            className: \"form-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Last Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: preferences.last_name,\n            onChange: e => setPreferences({\n              ...preferences,\n              last_name: e.target.value\n            }),\n            className: \"form-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"City:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: preferences.city,\n            onChange: e => setPreferences({\n              ...preferences,\n              city: e.target.value\n            }),\n            className: \"form-select\",\n            children: availableCities.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: city,\n              children: city\n            }, city, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: preferences.has_HVAC,\n              onChange: e => setPreferences({\n                ...preferences,\n                has_HVAC: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this), \"Use HVAC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: preferences.has_ecologgica,\n              onChange: e => setPreferences({\n                ...preferences,\n                has_ecologgica: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this), \"Use Ecologica Product\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Base Anxiety Level (1-10):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"1\",\n            max: \"10\",\n            value: preferences.anxiety_base_level,\n            onChange: e => setPreferences({\n              ...preferences,\n              anxiety_base_level: parseInt(e.target.value)\n            }),\n            className: \"form-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider-value\",\n            children: preferences.anxiety_base_level\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: preferences.track_anxiety,\n              onChange: e => setPreferences({\n                ...preferences,\n                track_anxiety: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), \"Track Anxiety Levels\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSave,\n          className: \"save-button\",\n          children: \"Save Preferences\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(UserPreferences, \"RjOYs5rq06dfs2YlzN3/kxkG5ok=\", false, function () {\n  return [useNavigate];\n});\n_c = UserPreferences;\nexport default UserPreferences;\nvar _c;\n$RefreshReg$(_c, \"UserPreferences\");","map":{"version":3,"names":["React","useState","useEffect","supabase","useNavigate","jsxDEV","_jsxDEV","UserPreferences","_s","availableCities","setAvailableCities","sort","preferences","setPreferences","has_HVAC","has_ecologgica","first_name","last_name","city","anxiety_base_level","track_anxiety","isLoading","setIsLoading","navigate","fetchPreferences","data","user","auth","getUser","preferencesData","error","from","select","eq","id","single","console","fetchCities","order","uniqueCities","Set","map","item","handleSave","alert","log","user_id","upsert","Number","onConflict","ignoreDuplicates","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","checked","min","max","parseInt","onClick","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/UserPreferences.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { useNavigate } from 'react-router-dom';\nimport './styles.css';\n\nconst UserPreferences = () => {\n  const [availableCities, setAvailableCities] = useState([\n    'Toronto',\n    'San Francisco',\n    'New York',\n    'Dallas',\n    'Boston',\n    'Miami',\n    'Houston'\n  ].sort());\n\n  const [preferences, setPreferences] = useState({\n    has_HVAC: false,\n    has_ecologgica: false,\n    first_name: '',\n    last_name: '',\n    city: 'Toronto',\n    anxiety_base_level: 5, // Default middle value\n    track_anxiety: false, // New checkbox state\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchPreferences = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          const { data: preferencesData, error } = await supabase\n            .from('user_preferences')\n            .select('*')\n            .eq('user_id', user.id)\n            .single();\n\n          if (error) throw error;\n\n          if (preferencesData) {\n            setPreferences({\n              has_HVAC: preferencesData.has_HVAC || false,\n              has_ecologgica: preferencesData.has_ecologgica || false,\n              first_name: preferencesData.first_name || '',\n              last_name: preferencesData.last_name || '',\n              city: preferencesData.city || 'Toronto',\n              anxiety_base_level: preferencesData.anxiety_base_level || 5,\n              track_anxiety: preferencesData.track_anxiety || false\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n\n    fetchPreferences();\n  }, []);\n\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('airqualitydata')\n          .select('city')\n          .order('city');\n        \n        if (error) {\n          throw error;\n        }\n\n        if (data) {\n          const uniqueCities = [...new Set(data.map(item => item.city))];\n          setAvailableCities(uniqueCities);\n        }\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCities();\n  }, []);\n\n  const handleSave = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        console.error('No user found');\n        alert('Please log in to save preferences');\n        return;\n      }\n\n      console.log('Attempting to save preferences:', {\n        user_id: user.id,\n        ...preferences\n      });\n\n      const { data, error } = await supabase\n        .from('user_preferences')\n        .upsert({ \n          user_id: user.id, \n          ...preferences,\n          anxiety_base_level: Number(preferences.anxiety_base_level),\n          track_anxiety: preferences.track_anxiety\n        }, {\n          onConflict: 'user_id',\n          ignoreDuplicates: false\n        })\n        .select();\n\n      if (error) {\n        console.error('Detailed save error:', error);\n        throw error;\n      }\n\n      console.log('Save successful:', data);\n      alert('Preferences saved successfully!');\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Error saving preferences:', error.message);\n      alert(`Failed to save preferences: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"preferences-container\">\n      <div className=\"preferences-content\">\n        <h1 className=\"preferences-title\">User Preferences</h1>\n        \n        <form className=\"preferences-form\">\n          <div className=\"form-group\">\n            <label>First Name:</label>\n            <input\n              type=\"text\"\n              value={preferences.first_name}\n              onChange={(e) => setPreferences({ ...preferences, first_name: e.target.value })}\n              className=\"form-input\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Last Name:</label>\n            <input\n              type=\"text\"\n              value={preferences.last_name}\n              onChange={(e) => setPreferences({ ...preferences, last_name: e.target.value })}\n              className=\"form-input\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>City:</label>\n            <select\n              value={preferences.city}\n              onChange={(e) => setPreferences({ ...preferences, city: e.target.value })}\n              className=\"form-select\"\n            >\n              {availableCities.map((city) => (\n                <option key={city} value={city}>\n                  {city}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"checkbox-label\">\n              <input\n                type=\"checkbox\"\n                checked={preferences.has_HVAC}\n                onChange={(e) => setPreferences({ ...preferences, has_HVAC: e.target.checked })}\n              />\n              Use HVAC\n            </label>\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"checkbox-label\">\n              <input\n                type=\"checkbox\"\n                checked={preferences.has_ecologgica}\n                onChange={(e) => setPreferences({ ...preferences, has_ecologgica: e.target.checked })}\n              />\n              Use Ecologica Product\n            </label>\n          </div>\n\n          <div className=\"form-group\">\n            <label>Base Anxiety Level (1-10):</label>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"10\"\n              value={preferences.anxiety_base_level}\n              onChange={(e) => setPreferences({ \n                ...preferences, \n                anxiety_base_level: parseInt(e.target.value) \n              })}\n              className=\"form-slider\"\n            />\n            <span className=\"slider-value\">{preferences.anxiety_base_level}</span>\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"checkbox-label\">\n              <input\n                type=\"checkbox\"\n                checked={preferences.track_anxiety}\n                onChange={(e) => setPreferences({ \n                  ...preferences, \n                  track_anxiety: e.target.checked \n                })}\n              />\n              Track Anxiety Levels\n            </label>\n          </div>\n\n          <button onClick={handleSave} className=\"save-button\">\n            Save Preferences\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default UserPreferences;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}