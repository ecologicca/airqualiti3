{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/charts/AnxietyRiskChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { supabase } from '../../supabaseClient';\nimport ChartLegend from './ChartLegend';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\n\n// Utility functions\nconst calculateIndoorReduction = value => {\n  return value * 0.7; // 30% reduction for indoor air quality\n};\nconst calculateAirPurifierReduction = value => {\n  return value * 0.6; // 40% reduction\n};\nconst calculateCombinedReduction = value => {\n  return value * 0.5; // 50% reduction\n};\nconst calculateAnxietyRisk = (baseLevel, pm10, hasAirPurifier) => {\n  let adjustedPM10 = pm10;\n\n  // Always apply indoor reduction first\n  adjustedPM10 = calculateIndoorReduction(pm10);\n\n  // Apply Air Purifier reduction if enabled\n  if (hasAirPurifier) {\n    adjustedPM10 = calculateCombinedReduction(pm10);\n  }\n  if (!adjustedPM10) return baseLevel;\n  if (adjustedPM10 >= 10) {\n    const increase = adjustedPM10 / 10;\n    const riskIncrease = increase * 0.12;\n    return Math.min(10, baseLevel * (1 + riskIncrease));\n  }\n  return baseLevel;\n};\nconst aggregateDataByDay = data => {\n  const aggregated = {};\n  data.forEach(item => {\n    const date = new Date(item.date);\n    const dateKey = date.toISOString().split('T')[0];\n    if (!aggregated[dateKey]) {\n      aggregated[dateKey] = {\n        sum: 0,\n        count: 0,\n        date: date,\n        pm10Values: []\n      };\n    }\n    if (item['PM 10']) {\n      aggregated[dateKey].pm10Values.push(item['PM 10']);\n      aggregated[dateKey].count += 1;\n    }\n  });\n  return Object.values(aggregated).map(item => ({\n    date: item.date,\n    'PM 10': item.count > 0 ? item.pm10Values.reduce((a, b) => a + b, 0) / item.count : null\n  }));\n};\nconst AnxietyRiskChart = ({\n  data,\n  userPreferences\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Outdoor': true,\n    'Indoor': true\n  });\n  const [showAirPurifier, setShowAirPurifier] = useState((userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.hasAirPurifier) || false);\n  const toggleDataset = name => {\n    setActiveDatasets(prev => ({\n      ...prev,\n      [name]: !prev[name]\n    }));\n  };\n  useEffect(() => {\n    try {\n      if (!data || data.length === 0) {\n        setError('No data available');\n        setIsLoading(false);\n        return;\n      }\n\n      // Aggregate the data by day\n      const aggregatedData = aggregateDataByDay(data);\n      const formattedData = {\n        labels: aggregatedData.map(item => new Date(item.date)),\n        datasets: [{\n          label: 'Outdoor',\n          data: aggregatedData.map(item => ({\n            x: new Date(item.date),\n            y: item['PM 10'] ? calculateAnxietyRisk(userPreferences.anxietyLevel, item['PM 10'], false) : null\n          })),\n          borderColor: '#043A24',\n          backgroundColor: 'rgba(4, 58, 36, 0.1)',\n          borderWidth: 2,\n          tension: 0.1,\n          hidden: !activeDatasets['Outdoor']\n        }, {\n          label: 'Indoor',\n          data: aggregatedData.map(item => ({\n            x: new Date(item.date),\n            y: item['PM 10'] ? calculateAnxietyRisk(userPreferences.anxietyLevel, calculateIndoorReduction(item['PM 10']), false) : null\n          })),\n          borderColor: '#D9F6BB',\n          backgroundColor: 'rgba(217, 246, 187, 0.1)',\n          borderWidth: 2,\n          tension: 0.1,\n          hidden: !activeDatasets['Indoor']\n        }]\n      };\n      if (showAirPurifier) {\n        formattedData.datasets.push({\n          label: 'With Air Purifier',\n          data: aggregatedData.map(item => ({\n            x: new Date(item.date),\n            y: item['PM 10'] ? calculateAnxietyRisk(userPreferences.anxietyLevel, item['PM 10'], true) : null\n          })),\n          borderColor: '#A9ED8A',\n          backgroundColor: 'rgba(169, 237, 138, 0.1)',\n          borderWidth: 2,\n          tension: 0.1\n        });\n      }\n      setChartData(formattedData);\n      setError(null);\n    } catch (err) {\n      console.error('Error processing anxiety risk data:', err);\n      setError('Failed to process data');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [data, showAirPurifier, activeDatasets, userPreferences.anxietyLevel]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading anxiety risk data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 21\n  }, this);\n  if (!chartData || !data.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No anxiety risk data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 42\n  }, this);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        max: 10,\n        title: {\n          display: true,\n          text: 'Anxiety Risk Level'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-side\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '400px',\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartLegend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(AnxietyRiskChart, \"Ff2C/BH74nauwfAnWtFX6DEvOCc=\");\n_c = AnxietyRiskChart;\nexport default AnxietyRiskChart;\nvar _c;\n$RefreshReg$(_c, \"AnxietyRiskChart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","supabase","ChartLegend","jsxDEV","_jsxDEV","register","calculateIndoorReduction","value","calculateAirPurifierReduction","calculateCombinedReduction","calculateAnxietyRisk","baseLevel","pm10","hasAirPurifier","adjustedPM10","increase","riskIncrease","Math","min","aggregateDataByDay","data","aggregated","forEach","item","date","Date","dateKey","toISOString","split","sum","count","pm10Values","push","Object","values","map","reduce","a","b","AnxietyRiskChart","userPreferences","_s","chartData","setChartData","isLoading","setIsLoading","error","setError","activeDatasets","setActiveDatasets","showAirPurifier","setShowAirPurifier","toggleDataset","name","prev","length","aggregatedData","formattedData","labels","datasets","label","x","y","anxietyLevel","borderColor","backgroundColor","borderWidth","tension","hidden","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","scales","type","time","unit","displayFormats","day","title","display","text","beginAtZero","max","plugins","legend","tooltip","mode","intersect","className","style","height","width","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/charts/AnxietyRiskChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { supabase } from '../../supabaseClient';\nimport ChartLegend from './ChartLegend';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\n// Utility functions\nconst calculateIndoorReduction = (value) => {\n  return value * 0.7; // 30% reduction for indoor air quality\n};\n\nconst calculateAirPurifierReduction = (value) => {\n  return value * 0.6; // 40% reduction\n};\n\nconst calculateCombinedReduction = (value) => {\n  return value * 0.5; // 50% reduction\n};\n\nconst calculateAnxietyRisk = (baseLevel, pm10, hasAirPurifier) => {\n  let adjustedPM10 = pm10;\n  \n  // Always apply indoor reduction first\n  adjustedPM10 = calculateIndoorReduction(pm10);\n  \n  // Apply Air Purifier reduction if enabled\n  if (hasAirPurifier) {\n    adjustedPM10 = calculateCombinedReduction(pm10);\n  }\n\n  if (!adjustedPM10) return baseLevel;\n  if (adjustedPM10 >= 10) {\n    const increase = adjustedPM10 / 10;\n    const riskIncrease = increase * 0.12;\n    return Math.min(10, baseLevel * (1 + riskIncrease));\n  }\n  return baseLevel;\n};\n\nconst aggregateDataByDay = (data) => {\n  const aggregated = {};\n  \n  data.forEach(item => {\n    const date = new Date(item.date);\n    const dateKey = date.toISOString().split('T')[0];\n    \n    if (!aggregated[dateKey]) {\n      aggregated[dateKey] = {\n        sum: 0,\n        count: 0,\n        date: date,\n        pm10Values: []\n      };\n    }\n    \n    if (item['PM 10']) {\n      aggregated[dateKey].pm10Values.push(item['PM 10']);\n      aggregated[dateKey].count += 1;\n    }\n  });\n  \n  return Object.values(aggregated).map(item => ({\n    date: item.date,\n    'PM 10': item.count > 0 ? \n      item.pm10Values.reduce((a, b) => a + b, 0) / item.count : \n      null\n  }));\n};\n\nconst AnxietyRiskChart = ({ data, userPreferences }) => {\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Outdoor': true,\n    'Indoor': true\n  });\n  const [showAirPurifier, setShowAirPurifier] = useState(userPreferences?.hasAirPurifier || false);\n\n  const toggleDataset = (name) => {\n    setActiveDatasets(prev => ({\n      ...prev,\n      [name]: !prev[name]\n    }));\n  };\n\n  useEffect(() => {\n    try {\n      if (!data || data.length === 0) {\n        setError('No data available');\n        setIsLoading(false);\n        return;\n      }\n\n      // Aggregate the data by day\n      const aggregatedData = aggregateDataByDay(data);\n\n      const formattedData = {\n        labels: aggregatedData.map(item => new Date(item.date)),\n        datasets: [\n          {\n            label: 'Outdoor',\n            data: aggregatedData.map(item => ({\n              x: new Date(item.date),\n              y: item['PM 10'] ? \n                calculateAnxietyRisk(userPreferences.anxietyLevel, item['PM 10'], false) :\n                null\n            })),\n            borderColor: '#043A24',\n            backgroundColor: 'rgba(4, 58, 36, 0.1)',\n            borderWidth: 2,\n            tension: 0.1,\n            hidden: !activeDatasets['Outdoor']\n          },\n          {\n            label: 'Indoor',\n            data: aggregatedData.map(item => ({\n              x: new Date(item.date),\n              y: item['PM 10'] ? \n                calculateAnxietyRisk(userPreferences.anxietyLevel, calculateIndoorReduction(item['PM 10']), false) :\n                null\n            })),\n            borderColor: '#D9F6BB',\n            backgroundColor: 'rgba(217, 246, 187, 0.1)',\n            borderWidth: 2,\n            tension: 0.1,\n            hidden: !activeDatasets['Indoor']\n          }\n        ]\n      };\n\n      if (showAirPurifier) {\n        formattedData.datasets.push({\n          label: 'With Air Purifier',\n          data: aggregatedData.map(item => ({\n            x: new Date(item.date),\n            y: item['PM 10'] ? \n              calculateAnxietyRisk(userPreferences.anxietyLevel, item['PM 10'], true) :\n              null\n          })),\n          borderColor: '#A9ED8A',\n          backgroundColor: 'rgba(169, 237, 138, 0.1)',\n          borderWidth: 2,\n          tension: 0.1\n        });\n      }\n\n      setChartData(formattedData);\n      setError(null);\n    } catch (err) {\n      console.error('Error processing anxiety risk data:', err);\n      setError('Failed to process data');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [data, showAirPurifier, activeDatasets, userPreferences.anxietyLevel]);\n\n  if (isLoading) return <div>Loading anxiety risk data...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!chartData || !data.length) return <div>No anxiety risk data available</div>;\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        max: 10,\n        title: {\n          display: true,\n          text: 'Anxiety Risk Level'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false\n      }\n    }\n  };\n\n  return (\n    <div className=\"chart-container\">\n      <div className=\"chart-side\">\n        <div style={{ height: '400px', width: '100%' }}>\n          <Line data={chartData} options={options} />\n        </div>\n        <ChartLegend />\n      </div>\n    </div>\n  );\n};\n\nexport default AnxietyRiskChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}