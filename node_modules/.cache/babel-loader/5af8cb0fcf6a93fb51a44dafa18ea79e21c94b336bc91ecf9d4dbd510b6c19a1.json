{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\nconst calculateHVACReduction = value => {\n  return value * 0.7; // 30% reduction\n};\nconst calculateEcologicaReduction = value => {\n  return value * 0.6; // 40% reduction\n};\nconst calculateCombinedReduction = value => {\n  return value * 0.5; // 50% reduction\n};\nconst calculateDeeperSleepMinutes = (data, hasHVAC, hasEcologica) => {\n  const getAdjustedValue = value => {\n    if (hasHVAC && hasEcologica) {\n      return calculateCombinedReduction(value);\n    } else if (hasHVAC) {\n      return calculateHVACReduction(value);\n    } else if (hasEcologica) {\n      return calculateEcologicaReduction(value);\n    }\n    return value;\n  };\n\n  // Count days where PM2.5 is 5 or under after reductions\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  // Calculate total minutes of deeper sleep\n  // days × 8 hours × 60 minutes\n  const deeperSleepMinutes = daysUnderThreshold * 8 * 60;\n  return deeperSleepMinutes;\n};\nfunction getLast30Days(data, cityParam) {\n  console.log('getLast30Days input:', {\n    totalRecords: data === null || data === void 0 ? void 0 : data.length,\n    cityParam,\n    sampleData: data === null || data === void 0 ? void 0 : data.slice(0, 3) // Look at first 3 records\n  });\n  const thirtyDaysAgo = new Date();\n  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n  const filteredData = data.filter(point => {\n    const pointDate = new Date(point.date);\n    const isValidDate = pointDate >= thirtyDaysAgo;\n    const isValidCity = point.city === cityParam;\n    if (!isValidCity || !isValidDate) {\n      console.log('Filtered out:', {\n        date: point.date,\n        city: point.city,\n        matchesCity: isValidCity,\n        withinDate: isValidDate\n      });\n    }\n    return isValidDate && isValidCity;\n  });\n  console.log('getLast30Days output:', {\n    filteredRecords: filteredData.length,\n    sampleFiltered: filteredData.slice(0, 3)\n  });\n  return filteredData;\n}\nconst Dashboard = () => {\n  _s();\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n\n  // Calculate reductions\n  const calculateHVACReduction = value => value * 0.7; // 30% reduction\n  const calculateEcologicaReduction = value => value * 0.6; // 40% reduction\n  const calculateCombinedReduction = value => value * 0.5; // 50% reduction\n\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user) {\n          const {\n            data: preferences,\n            error\n          } = await supabase.from('user_preferences').select('city, first_name, has_HVAC, has_ecologgica').eq('user_id', user.id).single();\n          if (error) throw error;\n          if (preferences) {\n            setCity(preferences.city);\n            setFirstName(preferences.first_name || '');\n            setHasHVAC(preferences.has_HVAC || false);\n            setHasEcologica(preferences.has_ecologgica || false);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user preferences:', error);\n      }\n    };\n    fetchUserPreferences();\n  }, []);\n\n  // Modify the Line chart data to include reduction calculations\n  const getChartData = data => ({\n    labels: data.map(d => d.date),\n    datasets: [{\n      label: 'Original PM2.5',\n      data: data.map(d => d['PM 2.5']),\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }, hasHVAC && {\n      label: 'PM2.5 with HVAC',\n      data: data.map(d => calculateHVACReduction(d['PM 2.5'])),\n      borderColor: 'rgb(34, 139, 34)',\n      tension: 0.1\n    }, hasEcologica && {\n      label: 'PM2.5 with Ecologica',\n      data: data.map(d => calculateEcologicaReduction(d['PM 2.5'])),\n      borderColor: 'rgb(60, 179, 113)',\n      tension: 0.1\n    }, hasHVAC && hasEcologica && {\n      label: 'PM2.5 with Both',\n      data: data.map(d => calculateCombinedReduction(d['PM 2.5'])),\n      borderColor: 'rgb(144, 238, 144)',\n      tension: 0.1\n    }].filter(Boolean) // Remove false values from conditional rendering\n  });\n  useEffect(() => {\n    const fetchAirQualityData = async () => {\n      try {\n        console.log('Fetching data for city:', city);\n        const API_URL = 'http://localhost:5000';\n        const response = await fetch(`${API_URL}/api/airqualitydata`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Raw API response:', {\n          length: data === null || data === void 0 ? void 0 : data.length,\n          sampleData: data === null || data === void 0 ? void 0 : data.slice(0, 3),\n          cities: [...new Set(data === null || data === void 0 ? void 0 : data.map(d => d.city))] // List unique cities\n        });\n        const last30DaysData = getLast30Days(data, city);\n        if (last30DaysData.length === 0) {\n          console.warn('No data after filtering for', city);\n        }\n        setAirQualityData(last30DaysData);\n      } catch (error) {\n        console.error('Error fetching air quality:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAirQualityData();\n  }, [city]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [firstName ? `${firstName}'s ` : '', city, \" Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this) : airQualityData.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n      data: getChartData(airQualityData),\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"No data available for \", city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"wyMkyhnCqkzqDI23pirUQh7OKCg=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","jsxDEV","_jsxDEV","register","defaults","responsive","maintainAspectRatio","calculateHVACReduction","value","calculateEcologicaReduction","calculateCombinedReduction","calculateDeeperSleepMinutes","data","hasHVAC","hasEcologica","getAdjustedValue","daysUnderThreshold","filter","day","adjustedValue","parseFloat","length","deeperSleepMinutes","getLast30Days","cityParam","console","log","totalRecords","sampleData","slice","thirtyDaysAgo","Date","setDate","getDate","filteredData","point","pointDate","date","isValidDate","isValidCity","city","matchesCity","withinDate","filteredRecords","sampleFiltered","Dashboard","_s","airQualityData","setAirQualityData","isLoading","setIsLoading","setCity","firstName","setFirstName","setHasHVAC","setHasEcologica","fetchUserPreferences","user","auth","getUser","preferences","error","from","select","eq","id","single","first_name","has_HVAC","has_ecologgica","getChartData","labels","map","d","datasets","label","borderColor","tension","Boolean","fetchAirQualityData","API_URL","response","fetch","ok","Error","status","json","cities","Set","last30DaysData","warn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","chartOptions","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\n\nconst calculateHVACReduction = (value) => {\n  return value * 0.7; // 30% reduction\n};\n\nconst calculateEcologicaReduction = (value) => {\n  return value * 0.6; // 40% reduction\n};\n\nconst calculateCombinedReduction = (value) => {\n  return value * 0.5; // 50% reduction\n};\n\nconst calculateDeeperSleepMinutes = (data, hasHVAC, hasEcologica) => {\n  const getAdjustedValue = (value) => {\n    if (hasHVAC && hasEcologica) {\n      return calculateCombinedReduction(value);\n    } else if (hasHVAC) {\n      return calculateHVACReduction(value);\n    } else if (hasEcologica) {\n      return calculateEcologicaReduction(value);\n    }\n    return value;\n  };\n\n  // Count days where PM2.5 is 5 or under after reductions\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  // Calculate total minutes of deeper sleep\n  // days × 8 hours × 60 minutes\n  const deeperSleepMinutes = daysUnderThreshold * 8 * 60;\n\n  return deeperSleepMinutes;\n};\n\nfunction getLast30Days(data, cityParam) {\n    console.log('getLast30Days input:', {\n        totalRecords: data?.length,\n        cityParam,\n        sampleData: data?.slice(0, 3) // Look at first 3 records\n    });\n\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    \n    const filteredData = data.filter(point => {\n        const pointDate = new Date(point.date);\n        const isValidDate = pointDate >= thirtyDaysAgo;\n        const isValidCity = point.city === cityParam;\n        \n        if (!isValidCity || !isValidDate) {\n            console.log('Filtered out:', {\n                date: point.date,\n                city: point.city,\n                matchesCity: isValidCity,\n                withinDate: isValidDate\n            });\n        }\n        \n        return isValidDate && isValidCity;\n    });\n\n    console.log('getLast30Days output:', {\n        filteredRecords: filteredData.length,\n        sampleFiltered: filteredData.slice(0, 3)\n    });\n\n    return filteredData;\n}\n\nconst Dashboard = () => {\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n\n  // Calculate reductions\n  const calculateHVACReduction = (value) => value * 0.7; // 30% reduction\n  const calculateEcologicaReduction = (value) => value * 0.6; // 40% reduction\n  const calculateCombinedReduction = (value) => value * 0.5; // 50% reduction\n\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          const { data: preferences, error } = await supabase\n            .from('user_preferences')\n            .select('city, first_name, has_HVAC, has_ecologgica')\n            .eq('user_id', user.id)\n            .single();\n\n          if (error) throw error;\n          if (preferences) {\n            setCity(preferences.city);\n            setFirstName(preferences.first_name || '');\n            setHasHVAC(preferences.has_HVAC || false);\n            setHasEcologica(preferences.has_ecologgica || false);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user preferences:', error);\n      }\n    };\n    fetchUserPreferences();\n  }, []);\n\n  // Modify the Line chart data to include reduction calculations\n  const getChartData = (data) => ({\n    labels: data.map(d => d.date),\n    datasets: [\n      {\n        label: 'Original PM2.5',\n        data: data.map(d => d['PM 2.5']),\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      },\n      hasHVAC && {\n        label: 'PM2.5 with HVAC',\n        data: data.map(d => calculateHVACReduction(d['PM 2.5'])),\n        borderColor: 'rgb(34, 139, 34)',\n        tension: 0.1\n      },\n      hasEcologica && {\n        label: 'PM2.5 with Ecologica',\n        data: data.map(d => calculateEcologicaReduction(d['PM 2.5'])),\n        borderColor: 'rgb(60, 179, 113)',\n        tension: 0.1\n      },\n      (hasHVAC && hasEcologica) && {\n        label: 'PM2.5 with Both',\n        data: data.map(d => calculateCombinedReduction(d['PM 2.5'])),\n        borderColor: 'rgb(144, 238, 144)',\n        tension: 0.1\n      }\n    ].filter(Boolean) // Remove false values from conditional rendering\n  });\n\n  useEffect(() => {\n    const fetchAirQualityData = async () => {\n      try {\n        console.log('Fetching data for city:', city);\n        const API_URL = 'http://localhost:5000';\n        const response = await fetch(`${API_URL}/api/airqualitydata`);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Raw API response:', {\n            length: data?.length,\n            sampleData: data?.slice(0, 3),\n            cities: [...new Set(data?.map(d => d.city))] // List unique cities\n        });\n        \n        const last30DaysData = getLast30Days(data, city);\n        \n        if (last30DaysData.length === 0) {\n            console.warn('No data after filtering for', city);\n        }\n        \n        setAirQualityData(last30DaysData);\n      } catch (error) {\n        console.error('Error fetching air quality:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchAirQualityData();\n  }, [city]);\n\n  return (\n    <div className=\"dashboard\">\n      <h1>{firstName ? `${firstName}'s ` : ''}{city} Dashboard</h1>\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        airQualityData.length > 0 ? (\n          <Line \n            data={getChartData(airQualityData)} \n            options={chartOptions} \n          />\n        ) : (\n          <div>No data available for {city}</div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}