{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/airqualiti3/src/pages/dashboard/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport PM25Chart from '../../components/charts/PM25Chart';\nimport PM10Chart from '../../components/charts/PM10Chart';\nimport CityComparisonChart from '../../components/charts/CityComparisonChart';\nimport AnxietyRiskChart from '../../components/charts/AnxietyRiskChart';\nimport HealthImpactPanel from '../../components/HealthImpactPanel';\nimport '../../styles/style.css';\n\n// Function to fetch data from OpenAQ API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchOpenAQData = async (city, coordinates) => {\n  try {\n    // Get current air quality data\n    const response = await fetch(`https://api.openaq.org/v3/latest?coordinates=${coordinates.lat},${coordinates.lon}&radius=10000`);\n    const data = await response.json();\n    if (!data.results || data.results.length === 0) {\n      throw new Error('No data available for this location');\n    }\n\n    // Transform the data to match our expected format\n    return data.results.map(measurement => {\n      var _measurement$paramete, _measurement$paramete2;\n      return {\n        date: new Date(measurement.date.utc).toISOString(),\n        'PM 2.5': ((_measurement$paramete = measurement.parameters.find(p => p.parameter === 'pm25')) === null || _measurement$paramete === void 0 ? void 0 : _measurement$paramete.value) || null,\n        'PM 10': ((_measurement$paramete2 = measurement.parameters.find(p => p.parameter === 'pm10')) === null || _measurement$paramete2 === void 0 ? void 0 : _measurement$paramete2.value) || null,\n        city: city,\n        health_impact: calculateHealthImpact(measurement),\n        who_guidelines: getWHOGuidelines(measurement)\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching OpenAQ data:', error);\n    return [];\n  }\n};\n\n// Helper function to calculate health impact based on PM2.5 and PM10 levels\nconst calculateHealthImpact = measurement => {\n  var _measurement$paramete3, _measurement$paramete4;\n  const pm25 = (_measurement$paramete3 = measurement.parameters.find(p => p.parameter === 'pm25')) === null || _measurement$paramete3 === void 0 ? void 0 : _measurement$paramete3.value;\n  const pm10 = (_measurement$paramete4 = measurement.parameters.find(p => p.parameter === 'pm10')) === null || _measurement$paramete4 === void 0 ? void 0 : _measurement$paramete4.value;\n  if (!pm25 && !pm10) return 'No data available';\n\n  // Using WHO guidelines for health impact assessment\n  if (pm25 <= 10 && pm10 <= 20) return 'Good';\n  if (pm25 <= 25 && pm10 <= 50) return 'Moderate';\n  if (pm25 <= 50 && pm10 <= 100) return 'Unhealthy for Sensitive Groups';\n  if (pm25 <= 75 && pm10 <= 200) return 'Unhealthy';\n  return 'Very Unhealthy';\n};\n\n// Helper function to get WHO guidelines status\nconst getWHOGuidelines = measurement => {\n  var _measurement$paramete5, _measurement$paramete6;\n  const pm25 = (_measurement$paramete5 = measurement.parameters.find(p => p.parameter === 'pm25')) === null || _measurement$paramete5 === void 0 ? void 0 : _measurement$paramete5.value;\n  const pm10 = (_measurement$paramete6 = measurement.parameters.find(p => p.parameter === 'pm10')) === null || _measurement$paramete6 === void 0 ? void 0 : _measurement$paramete6.value;\n  return {\n    'PM2.5': {\n      value: pm25,\n      threshold: 10,\n      exceeds: pm25 > 10\n    },\n    'PM10': {\n      value: pm10,\n      threshold: 20,\n      exceeds: pm10 > 20\n    }\n  };\n};\n\n// Utility function for deeper sleep calculation\nconst calculateDeeperSleepMinutes = (data, hasEcologica) => {\n  const getAdjustedValue = value => {\n    // Always apply indoor reduction first\n    const indoorValue = value * 0.7;\n    // Then apply Ecologica if present\n    if (hasEcologica) return value * 0.5;\n    return indoorValue;\n  };\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n  return daysUnderThreshold * 8 * 60;\n};\nconst Dashboard = () => {\n  _s();\n  const [userPreferences, setUserPreferences] = useState({\n    hasEcologica: false,\n    city: 'Toronto',\n    firstName: '',\n    anxietyLevel: 5\n  });\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [healthData, setHealthData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (!user) return;\n        const {\n          data,\n          error\n        } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n        if (error) throw error;\n        if (data) {\n          setUserPreferences({\n            hasEcologica: data.has_ecologgica || false,\n            city: data.city || 'Toronto',\n            firstName: data.first_name || '',\n            anxietyLevel: data.anxiety_base_level || 5\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n    const fetchAirQualityData = async () => {\n      try {\n        setIsLoading(true);\n\n        // Get coordinates for the city (this should be stored in your database or use a geocoding service)\n        const cityCoordinates = {\n          'Toronto': {\n            lat: 43.6532,\n            lon: -79.3832\n          },\n          'Vancouver': {\n            lat: 49.2827,\n            lon: -123.1207\n          },\n          'Montreal': {\n            lat: 45.5017,\n            lon: -73.5673\n          }\n          // Add more cities as needed\n        }[userPreferences.city] || {\n          lat: 43.6532,\n          lon: -79.3832\n        }; // Default to Toronto\n\n        // Fetch data from both sources\n        const [supabaseData, openAQData] = await Promise.all([\n        // Get data from the weather_data table in Supabase\n        supabase.from('weather_data').select('*').eq('city', userPreferences.city).order('created_at', {\n          ascending: false\n        }).limit(60).then(({\n          data,\n          error\n        }) => {\n          if (error) throw error;\n          return data;\n        }),\n        // Get data from OpenAQ\n        fetchOpenAQData(userPreferences.city, cityCoordinates)]);\n\n        // Transform Supabase data\n        const transformedSupabaseData = supabaseData.map(item => ({\n          date: item.created_at,\n          'PM 2.5': item.pm25,\n          'PM 10': item.pm10,\n          temp: item.temp,\n          city: item.city,\n          health_impact: item.health_impact,\n          who_guidelines: item.who_guidelines,\n          source: 'supabase'\n        }));\n\n        // Combine and sort data from both sources\n        const combinedData = [...transformedSupabaseData, ...openAQData].sort((a, b) => new Date(b.date) - new Date(a.date));\n        setAirQualityData(combinedData);\n\n        // Set health data from the most recent measurement\n        if (combinedData.length > 0) {\n          setHealthData({\n            pm25: combinedData[0]['PM 2.5'],\n            health_impact: combinedData[0].health_impact,\n            who_guidelines: combinedData[0].who_guidelines\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching air quality data:', error);\n        setAirQualityData([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchUserPreferences();\n    // Only fetch air quality data after we have the user's city\n    if (userPreferences.city) {\n      fetchAirQualityData();\n    }\n    const interval = setInterval(() => {\n      if (userPreferences.city) {\n        fetchAirQualityData();\n      }\n    }, 60 * 60 * 1000); // Refresh every hour\n\n    return () => clearInterval(interval);\n  }, [userPreferences.city]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [userPreferences.firstName ? `${userPreferences.firstName}'s ` : '', \"Air Quality Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: /*#__PURE__*/_jsxDEV(HealthImpactPanel, {\n        healthData: healthData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"PM2.5 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PM25Chart, {\n            userPreferences: userPreferences\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"PM10 Levels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PM10Chart, {\n        userPreferences: userPreferences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"City Comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CityComparisonChart, {\n        userPreferences: userPreferences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Anxiety Risk\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnxietyRiskChart, {\n        userPreferences: userPreferences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"cE4TceWpcqlK4yh7XHpgp9ZgHiY=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","PM25Chart","PM10Chart","CityComparisonChart","AnxietyRiskChart","HealthImpactPanel","jsxDEV","_jsxDEV","fetchOpenAQData","city","coordinates","response","fetch","lat","lon","data","json","results","length","Error","map","measurement","_measurement$paramete","_measurement$paramete2","date","Date","utc","toISOString","parameters","find","p","parameter","value","health_impact","calculateHealthImpact","who_guidelines","getWHOGuidelines","error","console","_measurement$paramete3","_measurement$paramete4","pm25","pm10","_measurement$paramete5","_measurement$paramete6","threshold","exceeds","calculateDeeperSleepMinutes","hasEcologica","getAdjustedValue","indoorValue","daysUnderThreshold","filter","day","adjustedValue","parseFloat","Dashboard","_s","userPreferences","setUserPreferences","firstName","anxietyLevel","airQualityData","setAirQualityData","healthData","setHealthData","isLoading","setIsLoading","fetchUserPreferences","user","auth","getUser","from","select","eq","id","single","has_ecologgica","first_name","anxiety_base_level","fetchAirQualityData","cityCoordinates","supabaseData","openAQData","Promise","all","order","ascending","limit","then","transformedSupabaseData","item","created_at","temp","source","combinedData","sort","a","b","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/airqualiti3/src/pages/dashboard/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport PM25Chart from '../../components/charts/PM25Chart';\nimport PM10Chart from '../../components/charts/PM10Chart';\nimport CityComparisonChart from '../../components/charts/CityComparisonChart';\nimport AnxietyRiskChart from '../../components/charts/AnxietyRiskChart';\nimport HealthImpactPanel from '../../components/HealthImpactPanel';\nimport '../../styles/style.css';\n\n// Function to fetch data from OpenAQ API\nconst fetchOpenAQData = async (city, coordinates) => {\n  try {\n    // Get current air quality data\n    const response = await fetch(\n      `https://api.openaq.org/v3/latest?coordinates=${coordinates.lat},${coordinates.lon}&radius=10000`\n    );\n    const data = await response.json();\n    \n    if (!data.results || data.results.length === 0) {\n      throw new Error('No data available for this location');\n    }\n\n    // Transform the data to match our expected format\n    return data.results.map(measurement => ({\n      date: new Date(measurement.date.utc).toISOString(),\n      'PM 2.5': measurement.parameters.find(p => p.parameter === 'pm25')?.value || null,\n      'PM 10': measurement.parameters.find(p => p.parameter === 'pm10')?.value || null,\n      city: city,\n      health_impact: calculateHealthImpact(measurement),\n      who_guidelines: getWHOGuidelines(measurement)\n    }));\n  } catch (error) {\n    console.error('Error fetching OpenAQ data:', error);\n    return [];\n  }\n};\n\n// Helper function to calculate health impact based on PM2.5 and PM10 levels\nconst calculateHealthImpact = (measurement) => {\n  const pm25 = measurement.parameters.find(p => p.parameter === 'pm25')?.value;\n  const pm10 = measurement.parameters.find(p => p.parameter === 'pm10')?.value;\n  \n  if (!pm25 && !pm10) return 'No data available';\n  \n  // Using WHO guidelines for health impact assessment\n  if (pm25 <= 10 && pm10 <= 20) return 'Good';\n  if (pm25 <= 25 && pm10 <= 50) return 'Moderate';\n  if (pm25 <= 50 && pm10 <= 100) return 'Unhealthy for Sensitive Groups';\n  if (pm25 <= 75 && pm10 <= 200) return 'Unhealthy';\n  return 'Very Unhealthy';\n};\n\n// Helper function to get WHO guidelines status\nconst getWHOGuidelines = (measurement) => {\n  const pm25 = measurement.parameters.find(p => p.parameter === 'pm25')?.value;\n  const pm10 = measurement.parameters.find(p => p.parameter === 'pm10')?.value;\n  \n  return {\n    'PM2.5': {\n      value: pm25,\n      threshold: 10,\n      exceeds: pm25 > 10\n    },\n    'PM10': {\n      value: pm10,\n      threshold: 20,\n      exceeds: pm10 > 20\n    }\n  };\n};\n\n// Utility function for deeper sleep calculation\nconst calculateDeeperSleepMinutes = (data, hasEcologica) => {\n  const getAdjustedValue = (value) => {\n    // Always apply indoor reduction first\n    const indoorValue = value * 0.7;\n    // Then apply Ecologica if present\n    if (hasEcologica) return value * 0.5;\n    return indoorValue;\n  };\n\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  return daysUnderThreshold * 8 * 60;\n};\n\nconst Dashboard = () => {\n  const [userPreferences, setUserPreferences] = useState({\n    hasEcologica: false,\n    city: 'Toronto',\n    firstName: '',\n    anxietyLevel: 5\n  });\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [healthData, setHealthData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) return;\n\n        const { data, error } = await supabase\n          .from('user_preferences')\n          .select('*')\n          .eq('user_id', user.id)\n          .single();\n\n        if (error) throw error;\n        \n        if (data) {\n          setUserPreferences({\n            hasEcologica: data.has_ecologgica || false,\n            city: data.city || 'Toronto',\n            firstName: data.first_name || '',\n            anxietyLevel: data.anxiety_base_level || 5\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n\n    const fetchAirQualityData = async () => {\n      try {\n        setIsLoading(true);\n        \n        // Get coordinates for the city (this should be stored in your database or use a geocoding service)\n        const cityCoordinates = {\n          'Toronto': { lat: 43.6532, lon: -79.3832 },\n          'Vancouver': { lat: 49.2827, lon: -123.1207 },\n          'Montreal': { lat: 45.5017, lon: -73.5673 },\n          // Add more cities as needed\n        }[userPreferences.city] || { lat: 43.6532, lon: -79.3832 }; // Default to Toronto\n\n        // Fetch data from both sources\n        const [supabaseData, openAQData] = await Promise.all([\n          // Get data from the weather_data table in Supabase\n          supabase\n            .from('weather_data')\n            .select('*')\n            .eq('city', userPreferences.city)\n            .order('created_at', { ascending: false })\n            .limit(60)\n            .then(({ data, error }) => {\n              if (error) throw error;\n              return data;\n            }),\n          \n          // Get data from OpenAQ\n          fetchOpenAQData(userPreferences.city, cityCoordinates)\n        ]);\n\n        // Transform Supabase data\n        const transformedSupabaseData = supabaseData.map(item => ({\n          date: item.created_at,\n          'PM 2.5': item.pm25,\n          'PM 10': item.pm10,\n          temp: item.temp,\n          city: item.city,\n          health_impact: item.health_impact,\n          who_guidelines: item.who_guidelines,\n          source: 'supabase'\n        }));\n\n        // Combine and sort data from both sources\n        const combinedData = [...transformedSupabaseData, ...openAQData]\n          .sort((a, b) => new Date(b.date) - new Date(a.date));\n        \n        setAirQualityData(combinedData);\n        \n        // Set health data from the most recent measurement\n        if (combinedData.length > 0) {\n          setHealthData({\n            pm25: combinedData[0]['PM 2.5'],\n            health_impact: combinedData[0].health_impact,\n            who_guidelines: combinedData[0].who_guidelines\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching air quality data:', error);\n        setAirQualityData([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUserPreferences();\n    // Only fetch air quality data after we have the user's city\n    if (userPreferences.city) {\n      fetchAirQualityData();\n    }\n\n    const interval = setInterval(() => {\n      if (userPreferences.city) {\n        fetchAirQualityData();\n      }\n    }, 60 * 60 * 1000); // Refresh every hour\n\n    return () => clearInterval(interval);\n  }, [userPreferences.city]);\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"dashboard\">\n      <h1>\n        {userPreferences.firstName ? `${userPreferences.firstName}'s ` : ''}\n        Air Quality Dashboard\n      </h1>\n      \n      <div className=\"dashboard-section\">\n        <HealthImpactPanel healthData={healthData} />\n      </div>\n\n      <div className=\"dashboard-section\">\n        <div className=\"chart-container\">\n          <div className=\"chart-area\">\n            <h2>PM2.5 Levels</h2>\n            <PM25Chart userPreferences={userPreferences} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"dashboard-section\">\n        <h2>PM10 Levels</h2>\n        <PM10Chart userPreferences={userPreferences} />\n      </div>\n\n      <div className=\"dashboard-section\">\n        <h2>City Comparison</h2>\n        <CityComparisonChart userPreferences={userPreferences} />\n      </div>\n\n      <div className=\"dashboard-section\">\n        <h2>Anxiety Risk</h2>\n        <AnxietyRiskChart userPreferences={userPreferences} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}