{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { Link } from 'react-router-dom';\nimport Navbar from './Navbar'; // Import your existing Navbar component\nimport BrainHealthPM2_5 from './components/BrainHealthPM2_5';\nimport AnxietyRiskChart from './components/charts/AnxietyRiskChart';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\nconst calculateHVACReduction = value => {\n  return value * 0.7; // 30% reduction\n};\nconst calculateEcologicaReduction = value => {\n  return value * 0.6; // 40% reduction\n};\nconst calculateCombinedReduction = value => {\n  return value * 0.5; // 50% reduction\n};\nconst calculateDeeperSleepMinutes = (data, hasHVAC, hasEcologica) => {\n  const getAdjustedValue = value => {\n    if (hasHVAC && hasEcologica) {\n      return calculateCombinedReduction(value);\n    } else if (hasHVAC) {\n      return calculateHVACReduction(value);\n    } else if (hasEcologica) {\n      return calculateEcologicaReduction(value);\n    }\n    return value;\n  };\n\n  // Count days where PM2.5 is 5 or under after reductions\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  // Calculate total minutes of deeper sleep\n  // days × 8 hours × 60 minutes\n  const deeperSleepMinutes = daysUnderThreshold * 8 * 60;\n  return deeperSleepMinutes;\n};\nconst calculateAnxietyRisk = (baseLevel, pm10) => {\n  if (pm10 >= 10) {\n    const increase = pm10 / 10;\n    const riskIncrease = increase * 0.12; // 12% increase per 10mg\n    return Math.min(10, baseLevel * (1 + riskIncrease));\n  }\n  return baseLevel;\n};\n\n// Add this before the Dashboard component definition\nconst DatasetToggle = ({\n  name,\n  isActive,\n  onToggle,\n  color\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    display: 'flex',\n    alignItems: 'center',\n    margin: '5px 0'\n  },\n  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => onToggle(name),\n    style: {\n      width: '20px',\n      height: '20px',\n      borderRadius: '50%',\n      border: `2px solid ${color}`,\n      backgroundColor: isActive ? color : 'white',\n      cursor: 'pointer',\n      marginRight: '8px',\n      padding: 0\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      fontSize: '0.9rem'\n    },\n    children: name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 84,\n  columnNumber: 3\n}, this);\n_c = DatasetToggle;\nconst Dashboard = ({\n  city = 'Toronto'\n}) => {\n  _s();\n  const [timeSeriesData, setTimeSeriesData] = useState({});\n  const [algorithms, setAlgorithms] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchAlgorithms = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('risk_algorithms').select('*').order('period_days');\n    if (error) throw error;\n    return data;\n  };\n  const fetchTimeSeriesData = async () => {\n    setLoading(true);\n    try {\n      // Fetch algorithms first\n      const algos = await fetchAlgorithms();\n      setAlgorithms(algos);\n\n      // Get the longest period needed from algorithms\n      const maxPeriodDays = Math.max(...algos.map(a => a.period_days * 2));\n      const now = new Date();\n      const startDate = new Date(now - maxPeriodDays * 24 * 60 * 60 * 1000);\n      const {\n        data,\n        error\n      } = await supabase.from('weather_data').select('pm25, created_at').eq('city', city).gte('created_at', startDate.toISOString()).lte('created_at', now.toISOString()).order('created_at', {\n        ascending: true\n      });\n      if (error) throw error;\n\n      // Debug log raw data\n      console.log('Raw data from Supabase:', data === null || data === void 0 ? void 0 : data.slice(0, 2));\n\n      // Process data with explicit date conversion\n      const processedData = data === null || data === void 0 ? void 0 : data.filter(d => d.pm25 != null && d.created_at != null).map(d => {\n        const dateObj = new Date(d.created_at);\n        console.log('Converting date:', d.created_at, 'to:', dateObj);\n        return {\n          x: dateObj,\n          y: Number(d.pm25)\n        };\n      }).filter(point => {\n        const isValid = point.x instanceof Date && !isNaN(point.x) && typeof point.y === 'number';\n        if (!isValid) {\n          console.log('Invalid point:', point);\n        }\n        return isValid;\n      });\n\n      // Debug log processed data\n      console.log('Processed data:', processedData === null || processedData === void 0 ? void 0 : processedData.slice(0, 2));\n      setTimeSeriesData(processedData || []);\n    } catch (err) {\n      console.error('Error in fetchTimeSeriesData:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchTimeSeriesData();\n  }, [city]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading dashboard...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), \"  \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Air Quality Dashboard - \", city]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"charts-grid\",\n        children: algorithms.map(algo => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-item\",\n          children: /*#__PURE__*/_jsxDEV(AnxietyRiskChart, {\n            title: algo.name,\n            data: timeSeriesData,\n            threshold: algo.threshold,\n            baseRatio: algo.base_ratio,\n            periodLabel: algo.period_label,\n            ageGroup: algo.age_group,\n            description: algo.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this)\n        }, algo.code, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Dashboard, \"AOWDWIrHp6+5H/SFqua0R713XCg=\");\n_c2 = Dashboard;\nexport default Dashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"DatasetToggle\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","Link","Navbar","BrainHealthPM2_5","AnxietyRiskChart","jsxDEV","_jsxDEV","Fragment","_Fragment","register","defaults","responsive","maintainAspectRatio","calculateHVACReduction","value","calculateEcologicaReduction","calculateCombinedReduction","calculateDeeperSleepMinutes","data","hasHVAC","hasEcologica","getAdjustedValue","daysUnderThreshold","filter","day","adjustedValue","parseFloat","length","deeperSleepMinutes","calculateAnxietyRisk","baseLevel","pm10","increase","riskIncrease","Math","min","DatasetToggle","name","isActive","onToggle","color","style","display","alignItems","margin","children","onClick","width","height","borderRadius","border","backgroundColor","cursor","marginRight","padding","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","_c","Dashboard","city","_s","timeSeriesData","setTimeSeriesData","algorithms","setAlgorithms","loading","setLoading","error","setError","fetchAlgorithms","from","select","order","fetchTimeSeriesData","algos","maxPeriodDays","max","map","a","period_days","now","Date","startDate","eq","gte","toISOString","lte","ascending","console","log","slice","processedData","d","pm25","created_at","dateObj","x","y","Number","point","isValid","isNaN","err","message","className","algo","title","threshold","baseRatio","base_ratio","periodLabel","period_label","ageGroup","age_group","description","code","_c2","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { Link } from 'react-router-dom';\nimport Navbar from './Navbar';  // Import your existing Navbar component\nimport BrainHealthPM2_5 from './components/BrainHealthPM2_5';\nimport AnxietyRiskChart from './components/charts/AnxietyRiskChart';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\n\nconst calculateHVACReduction = (value) => {\n  return value * 0.7; // 30% reduction\n};\n\nconst calculateEcologicaReduction = (value) => {\n  return value * 0.6; // 40% reduction\n};\n\nconst calculateCombinedReduction = (value) => {\n  return value * 0.5; // 50% reduction\n};\n\nconst calculateDeeperSleepMinutes = (data, hasHVAC, hasEcologica) => {\n  const getAdjustedValue = (value) => {\n    if (hasHVAC && hasEcologica) {\n      return calculateCombinedReduction(value);\n    } else if (hasHVAC) {\n      return calculateHVACReduction(value);\n    } else if (hasEcologica) {\n      return calculateEcologicaReduction(value);\n    }\n    return value;\n  };\n\n  // Count days where PM2.5 is 5 or under after reductions\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  // Calculate total minutes of deeper sleep\n  // days × 8 hours × 60 minutes\n  const deeperSleepMinutes = daysUnderThreshold * 8 * 60;\n\n  return deeperSleepMinutes;\n};\n\nconst calculateAnxietyRisk = (baseLevel, pm10) => {\n  if (pm10 >= 10) {\n    const increase = pm10 / 10;\n    const riskIncrease = increase * 0.12; // 12% increase per 10mg\n    return Math.min(10, baseLevel * (1 + riskIncrease));\n  }\n  return baseLevel;\n};\n\n// Add this before the Dashboard component definition\nconst DatasetToggle = ({ name, isActive, onToggle, color }) => (\n  <div style={{ display: 'flex', alignItems: 'center', margin: '5px 0' }}>\n    <button\n      onClick={() => onToggle(name)}\n      style={{\n        width: '20px',\n        height: '20px',\n        borderRadius: '50%',\n        border: `2px solid ${color}`,\n        backgroundColor: isActive ? color : 'white',\n        cursor: 'pointer',\n        marginRight: '8px',\n        padding: 0\n      }}\n    />\n    <span style={{ fontSize: '0.9rem' }}>{name}</span>\n  </div>\n);\n\nconst Dashboard = ({ city = 'Toronto' }) => {\n  const [timeSeriesData, setTimeSeriesData] = useState({});\n  const [algorithms, setAlgorithms] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchAlgorithms = async () => {\n    const { data, error } = await supabase\n      .from('risk_algorithms')\n      .select('*')\n      .order('period_days');\n      \n    if (error) throw error;\n    return data;\n  };\n\n  const fetchTimeSeriesData = async () => {\n    setLoading(true);\n    try {\n        // Fetch algorithms first\n        const algos = await fetchAlgorithms();\n        setAlgorithms(algos);\n\n        // Get the longest period needed from algorithms\n        const maxPeriodDays = Math.max(...algos.map(a => a.period_days * 2));\n        \n        const now = new Date();\n        const startDate = new Date(now - maxPeriodDays * 24 * 60 * 60 * 1000);\n\n        const { data, error } = await supabase\n            .from('weather_data')\n            .select('pm25, created_at')\n            .eq('city', city)\n            .gte('created_at', startDate.toISOString())\n            .lte('created_at', now.toISOString())\n            .order('created_at', { ascending: true });\n\n        if (error) throw error;\n\n        // Debug log raw data\n        console.log('Raw data from Supabase:', data?.slice(0, 2));\n\n        // Process data with explicit date conversion\n        const processedData = data\n            ?.filter(d => d.pm25 != null && d.created_at != null)\n            .map(d => {\n                const dateObj = new Date(d.created_at);\n                console.log('Converting date:', d.created_at, 'to:', dateObj);\n                return {\n                    x: dateObj,\n                    y: Number(d.pm25)\n                };\n            })\n            .filter(point => {\n                const isValid = point.x instanceof Date && !isNaN(point.x) && typeof point.y === 'number';\n                if (!isValid) {\n                    console.log('Invalid point:', point);\n                }\n                return isValid;\n            });\n\n        // Debug log processed data\n        console.log('Processed data:', processedData?.slice(0, 2));\n\n        setTimeSeriesData(processedData || []);\n    } catch (err) {\n        console.error('Error in fetchTimeSeriesData:', err);\n        setError(err.message);\n    } finally {\n        setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTimeSeriesData();\n  }, [city]);\n\n  if (loading) return <div>Loading dashboard...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <>\n      <Navbar />  {/* Use your existing Navbar component */}\n\n      <div className=\"dashboard\">\n        <h1>Air Quality Dashboard - {city}</h1>\n        \n        <div className=\"charts-grid\">\n          {algorithms.map(algo => (\n            <div key={algo.code} className=\"chart-item\">\n              <AnxietyRiskChart\n                title={algo.name}\n                data={timeSeriesData}\n                threshold={algo.threshold}\n                baseRatio={algo.base_ratio}\n                periodLabel={algo.period_label}\n                ageGroup={algo.age_group}\n                description={algo.description}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Dashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,SAAS,QACJ,UAAU;AACjB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,0BAA0B;AACjC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,MAAM,MAAM,UAAU,CAAC,CAAE;AAChC,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,gBAAgB,MAAM,sCAAsC;;AAEnE;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACAjB,OAAO,CAACkB,QAAQ,CACdjB,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,SACF,CAAC;AAEDR,OAAO,CAACmB,QAAQ,CAACC,UAAU,GAAG,IAAI;AAClCpB,OAAO,CAACmB,QAAQ,CAACE,mBAAmB,GAAG,KAAK;AAE5C,MAAMC,sBAAsB,GAAIC,KAAK,IAAK;EACxC,OAAOA,KAAK,GAAG,GAAG,CAAC,CAAC;AACtB,CAAC;AAED,MAAMC,2BAA2B,GAAID,KAAK,IAAK;EAC7C,OAAOA,KAAK,GAAG,GAAG,CAAC,CAAC;AACtB,CAAC;AAED,MAAME,0BAA0B,GAAIF,KAAK,IAAK;EAC5C,OAAOA,KAAK,GAAG,GAAG,CAAC,CAAC;AACtB,CAAC;AAED,MAAMG,2BAA2B,GAAGA,CAACC,IAAI,EAAEC,OAAO,EAAEC,YAAY,KAAK;EACnE,MAAMC,gBAAgB,GAAIP,KAAK,IAAK;IAClC,IAAIK,OAAO,IAAIC,YAAY,EAAE;MAC3B,OAAOJ,0BAA0B,CAACF,KAAK,CAAC;IAC1C,CAAC,MAAM,IAAIK,OAAO,EAAE;MAClB,OAAON,sBAAsB,CAACC,KAAK,CAAC;IACtC,CAAC,MAAM,IAAIM,YAAY,EAAE;MACvB,OAAOL,2BAA2B,CAACD,KAAK,CAAC;IAC3C;IACA,OAAOA,KAAK;EACd,CAAC;;EAED;EACA,MAAMQ,kBAAkB,GAAGJ,IAAI,CAACK,MAAM,CAACC,GAAG,IAAI;IAC5C,MAAMC,aAAa,GAAGJ,gBAAgB,CAACK,UAAU,CAACF,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjE,OAAOC,aAAa,IAAI,CAAC;EAC3B,CAAC,CAAC,CAACE,MAAM;;EAET;EACA;EACA,MAAMC,kBAAkB,GAAGN,kBAAkB,GAAG,CAAC,GAAG,EAAE;EAEtD,OAAOM,kBAAkB;AAC3B,CAAC;AAED,MAAMC,oBAAoB,GAAGA,CAACC,SAAS,EAAEC,IAAI,KAAK;EAChD,IAAIA,IAAI,IAAI,EAAE,EAAE;IACd,MAAMC,QAAQ,GAAGD,IAAI,GAAG,EAAE;IAC1B,MAAME,YAAY,GAAGD,QAAQ,GAAG,IAAI,CAAC,CAAC;IACtC,OAAOE,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEL,SAAS,IAAI,CAAC,GAAGG,YAAY,CAAC,CAAC;EACrD;EACA,OAAOH,SAAS;AAClB,CAAC;;AAED;AACA,MAAMM,aAAa,GAAGA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC;AAAM,CAAC,kBACxDlC,OAAA;EAAKmC,KAAK,EAAE;IAAEC,OAAO,EAAE,MAAM;IAAEC,UAAU,EAAE,QAAQ;IAAEC,MAAM,EAAE;EAAQ,CAAE;EAAAC,QAAA,gBACrEvC,OAAA;IACEwC,OAAO,EAAEA,CAAA,KAAMP,QAAQ,CAACF,IAAI,CAAE;IAC9BI,KAAK,EAAE;MACLM,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,MAAM;MACdC,YAAY,EAAE,KAAK;MACnBC,MAAM,EAAE,aAAaV,KAAK,EAAE;MAC5BW,eAAe,EAAEb,QAAQ,GAAGE,KAAK,GAAG,OAAO;MAC3CY,MAAM,EAAE,SAAS;MACjBC,WAAW,EAAE,KAAK;MAClBC,OAAO,EAAE;IACX;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC,eACFpD,OAAA;IAAMmC,KAAK,EAAE;MAAEkB,QAAQ,EAAE;IAAS,CAAE;IAAAd,QAAA,EAAER;EAAI;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAC/C,CACN;AAACE,EAAA,GAjBIxB,aAAa;AAmBnB,MAAMyB,SAAS,GAAGA,CAAC;EAAEC,IAAI,GAAG;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG9E,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAAC+E,UAAU,EAAEC,aAAa,CAAC,GAAGhF,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACiF,OAAO,EAAEC,UAAU,CAAC,GAAGlF,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmF,KAAK,EAAEC,QAAQ,CAAC,GAAGpF,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMqF,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAM;MAAEtD,IAAI;MAAEoD;IAAM,CAAC,GAAG,MAAMjF,QAAQ,CACnCoF,IAAI,CAAC,iBAAiB,CAAC,CACvBC,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,aAAa,CAAC;IAEvB,IAAIL,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOpD,IAAI;EACb,CAAC;EAED,MAAM0D,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtCP,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACA;MACA,MAAMQ,KAAK,GAAG,MAAML,eAAe,CAAC,CAAC;MACrCL,aAAa,CAACU,KAAK,CAAC;;MAEpB;MACA,MAAMC,aAAa,GAAG5C,IAAI,CAAC6C,GAAG,CAAC,GAAGF,KAAK,CAACG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,WAAW,GAAG,CAAC,CAAC,CAAC;MAEpE,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;MACtB,MAAMC,SAAS,GAAG,IAAID,IAAI,CAACD,GAAG,GAAGL,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;MAErE,MAAM;QAAE5D,IAAI;QAAEoD;MAAM,CAAC,GAAG,MAAMjF,QAAQ,CACjCoF,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,kBAAkB,CAAC,CAC1BY,EAAE,CAAC,MAAM,EAAExB,IAAI,CAAC,CAChByB,GAAG,CAAC,YAAY,EAAEF,SAAS,CAACG,WAAW,CAAC,CAAC,CAAC,CAC1CC,GAAG,CAAC,YAAY,EAAEN,GAAG,CAACK,WAAW,CAAC,CAAC,CAAC,CACpCb,KAAK,CAAC,YAAY,EAAE;QAAEe,SAAS,EAAE;MAAK,CAAC,CAAC;MAE7C,IAAIpB,KAAK,EAAE,MAAMA,KAAK;;MAEtB;MACAqB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE1E,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE2E,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEzD;MACA,MAAMC,aAAa,GAAG5E,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CACpBK,MAAM,CAACwE,CAAC,IAAIA,CAAC,CAACC,IAAI,IAAI,IAAI,IAAID,CAAC,CAACE,UAAU,IAAI,IAAI,CAAC,CACpDjB,GAAG,CAACe,CAAC,IAAI;QACN,MAAMG,OAAO,GAAG,IAAId,IAAI,CAACW,CAAC,CAACE,UAAU,CAAC;QACtCN,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEG,CAAC,CAACE,UAAU,EAAE,KAAK,EAAEC,OAAO,CAAC;QAC7D,OAAO;UACHC,CAAC,EAAED,OAAO;UACVE,CAAC,EAAEC,MAAM,CAACN,CAAC,CAACC,IAAI;QACpB,CAAC;MACL,CAAC,CAAC,CACDzE,MAAM,CAAC+E,KAAK,IAAI;QACb,MAAMC,OAAO,GAAGD,KAAK,CAACH,CAAC,YAAYf,IAAI,IAAI,CAACoB,KAAK,CAACF,KAAK,CAACH,CAAC,CAAC,IAAI,OAAOG,KAAK,CAACF,CAAC,KAAK,QAAQ;QACzF,IAAI,CAACG,OAAO,EAAE;UACVZ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEU,KAAK,CAAC;QACxC;QACA,OAAOC,OAAO;MAClB,CAAC,CAAC;;MAEN;MACAZ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEE,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAED,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAE1D5B,iBAAiB,CAAC6B,aAAa,IAAI,EAAE,CAAC;IAC1C,CAAC,CAAC,OAAOW,GAAG,EAAE;MACVd,OAAO,CAACrB,KAAK,CAAC,+BAA+B,EAAEmC,GAAG,CAAC;MACnDlC,QAAQ,CAACkC,GAAG,CAACC,OAAO,CAAC;IACzB,CAAC,SAAS;MACNrC,UAAU,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAEDjF,SAAS,CAAC,MAAM;IACdwF,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACd,IAAI,CAAC,CAAC;EAEV,IAAIM,OAAO,EAAE,oBAAO9D,OAAA;IAAAuC,QAAA,EAAK;EAAoB;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACnD,IAAIY,KAAK,EAAE,oBAAOhE,OAAA;IAAAuC,QAAA,GAAK,SAAO,EAACyB,KAAK;EAAA;IAAAf,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAE3C,oBACEpD,OAAA,CAAAE,SAAA;IAAAqC,QAAA,gBACEvC,OAAA,CAACJ,MAAM;MAAAqD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,MAAE,eAEZpD,OAAA;MAAKqG,SAAS,EAAC,WAAW;MAAA9D,QAAA,gBACxBvC,OAAA;QAAAuC,QAAA,GAAI,0BAAwB,EAACiB,IAAI;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAEvCpD,OAAA;QAAKqG,SAAS,EAAC,aAAa;QAAA9D,QAAA,EACzBqB,UAAU,CAACc,GAAG,CAAC4B,IAAI,iBAClBtG,OAAA;UAAqBqG,SAAS,EAAC,YAAY;UAAA9D,QAAA,eACzCvC,OAAA,CAACF,gBAAgB;YACfyG,KAAK,EAAED,IAAI,CAACvE,IAAK;YACjBnB,IAAI,EAAE8C,cAAe;YACrB8C,SAAS,EAAEF,IAAI,CAACE,SAAU;YAC1BC,SAAS,EAAEH,IAAI,CAACI,UAAW;YAC3BC,WAAW,EAAEL,IAAI,CAACM,YAAa;YAC/BC,QAAQ,EAAEP,IAAI,CAACQ,SAAU;YACzBC,WAAW,EAAET,IAAI,CAACS;UAAY;YAAA9D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B;QAAC,GATMkD,IAAI,CAACU,IAAI;UAAA/D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUd,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eACN,CAAC;AAEP,CAAC;AAACK,EAAA,CAzGIF,SAAS;AAAA0D,GAAA,GAAT1D,SAAS;AA2Gf,eAAeA,SAAS;AAAC,IAAAD,EAAA,EAAA2D,GAAA;AAAAC,YAAA,CAAA5D,EAAA;AAAA4D,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}