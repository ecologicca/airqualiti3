{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { Link } from 'react-router-dom';\nimport Navbar from './Navbar'; // Import your existing Navbar component\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\nconst calculateHVACReduction = value => {\n  return value * 0.7; // 30% reduction\n};\nconst calculateEcologicaReduction = value => {\n  return value * 0.6; // 40% reduction\n};\nconst calculateCombinedReduction = value => {\n  return value * 0.5; // 50% reduction\n};\nconst calculateDeeperSleepMinutes = (data, hasHVAC, hasEcologica) => {\n  const getAdjustedValue = value => {\n    if (hasHVAC && hasEcologica) {\n      return calculateCombinedReduction(value);\n    } else if (hasHVAC) {\n      return calculateHVACReduction(value);\n    } else if (hasEcologica) {\n      return calculateEcologicaReduction(value);\n    }\n    return value;\n  };\n\n  // Count days where PM2.5 is 5 or under after reductions\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  // Calculate total minutes of deeper sleep\n  // days × 8 hours × 60 minutes\n  const deeperSleepMinutes = daysUnderThreshold * 8 * 60;\n  return deeperSleepMinutes;\n};\nconst calculateAnxietyRisk = (baseLevel, pm10) => {\n  if (pm10 >= 10) {\n    const increase = pm10 / 10;\n    const riskIncrease = increase * 0.12; // 12% increase per 10mg\n    return Math.min(10, baseLevel * (1 + riskIncrease));\n  }\n  return baseLevel;\n};\nconst Dashboard = () => {\n  _s();\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Original PM2.5': true,\n    'PM2.5 with HVAC': false,\n    'PM2.5 with Ecologica': false,\n    'PM2.5 with Both': false,\n    'Original PM10': true,\n    'PM10 with HVAC': false,\n    'PM10 with Ecologica': false,\n    'PM10 with Both': false\n  });\n  const [anxietyLevel, setAnxietyLevel] = useState(5);\n  const [anxietyChartData, setAnxietyChartData] = useState(null);\n  const getLast60Days = data => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n    const validData = data.map(item => ({\n      date: new Date(item.date),\n      'PM 2.5': parseFloat(item['PM 2.5']),\n      'PM 10': parseFloat(item['PM 10']),\n      city: item.city,\n      temp: item.temp\n    })).filter(item => !isNaN(item.date.getTime()) && !isNaN(item['PM 10']) && !isNaN(item['PM 2.5']) && item.city === city).sort((a, b) => b.date - a.date);\n    if (validData.length === 0) return [];\n    const mostRecentDate = validData[0].date;\n    const cutoffDate = new Date(mostRecentDate);\n    cutoffDate.setDate(cutoffDate.getDate() - 60);\n    return validData.filter(item => item.date >= cutoffDate).sort((a, b) => a.date - b.date);\n  };\n  const processChartData = (data, pollutantType) => {\n    // Always show the original data\n    const datasets = [{\n      label: `Original ${pollutantType}`,\n      data: data.map(d => ({\n        x: d.date,\n        y: pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5'])\n      })),\n      borderColor: 'rgb(0, 100, 0)',\n      // Dark green\n      backgroundColor: 'rgba(0, 100, 0, 0.1)',\n      borderWidth: 2,\n      tension: 0.1,\n      hidden: !activeDatasets[`Original ${pollutantType}`]\n    }];\n\n    // Add your preference-based reductions if they exist\n    if (hasHVAC || hasEcologica) {\n      // If you have both HVAC and Ecologica\n      if (hasHVAC && hasEcologica) {\n        datasets.push({\n          label: `${pollutantType} with Your Preferences`,\n          data: data.map(d => ({\n            x: d.date,\n            y: calculateCombinedReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n          })),\n          borderColor: 'rgb(144, 238, 144)',\n          // Light green\n          backgroundColor: 'rgba(144, 238, 144, 0.1)',\n          borderWidth: 2,\n          tension: 0.1,\n          hidden: !activeDatasets[`${pollutantType} with Both`]\n        });\n      }\n      // If you only have HVAC\n      else if (hasHVAC) {\n        datasets.push({\n          label: `${pollutantType} with Your Preferences`,\n          data: data.map(d => ({\n            x: d.date,\n            y: calculateHVACReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n          })),\n          borderColor: 'rgb(34, 139, 34)',\n          // Forest green\n          backgroundColor: 'rgba(34, 139, 34, 0.1)',\n          borderWidth: 2,\n          tension: 0.1,\n          hidden: !activeDatasets[`${pollutantType} with HVAC`]\n        });\n      }\n      // If you only have Ecologica\n      else if (hasEcologica) {\n        datasets.push({\n          label: `${pollutantType} with Your Preferences`,\n          data: data.map(d => ({\n            x: d.date,\n            y: calculateEcologicaReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n          })),\n          borderColor: 'rgb(60, 179, 113)',\n          // Medium sea green\n          backgroundColor: 'rgba(60, 179, 113, 0.1)',\n          borderWidth: 2,\n          tension: 0.1,\n          hidden: !activeDatasets[`${pollutantType} with Ecologica`]\n        });\n      }\n    }\n    return {\n      datasets\n    };\n  };\n  const processAnxietyChartData = data => {\n    return {\n      labels: data.map(d => d.date || d.timestamp),\n      datasets: [{\n        label: 'Predicted Anxiety Level',\n        data: data.map(d => ({\n          x: d.date || d.timestamp,\n          y: calculateAnxietyRisk(anxietyLevel, parseFloat(d['PM10']))\n        })),\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.1)',\n        borderWidth: 2,\n        tension: 0.1\n      }]\n    };\n  };\n  const fetchUserPreferences = async () => {\n    try {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) return;\n      const {\n        data,\n        error\n      } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n      if (error) throw error;\n      if (data) {\n        setFirstName(data.first_name || '');\n        setCity(data.city || 'Toronto');\n        setAnxietyLevel(data.anxiety_base_level || 5);\n        setHasHVAC(data.has_HVAC);\n        setHasEcologica(data.has_ecologgica);\n      }\n    } catch (error) {\n      console.error('Error fetching user preferences:', error);\n    }\n  };\n  const fetchAirQualityData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/data');\n      const data = await response.json();\n      if (data && data.length > 0) {\n        setAirQualityData(data);\n\n        // Process data for charts\n        const processedData = {\n          pm25: processChartData(data, 'PM 2.5'),\n          pm10: processChartData(data, 'PM 10')\n        };\n        setChartData(processedData);\n      }\n    } catch (error) {\n      console.error('Error fetching air quality data:', error);\n    }\n  };\n  useEffect(() => {\n    // Fetch both user preferences and air quality data\n    const fetchData = async () => {\n      await fetchUserPreferences();\n      await fetchAirQualityData();\n    };\n    fetchData();\n\n    // Set up interval to refresh data every 5 minutes\n    const interval = setInterval(fetchData, 300000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Add this debug section temporarily\n  useEffect(() => {\n    console.log('Current state:', {\n      airQualityData,\n      chartData,\n      anxietyLevel\n    });\n  }, [airQualityData, chartData, anxietyLevel]);\n  const calculateDaysOverThreshold = (data, pollutantType, threshold) => {\n    const last60Days = getLast60Days(data);\n    return last60Days.filter(day => {\n      const value = pollutantType === 'PM2.5' ? day['PM 2.5'] : day['PM 10'];\n      return parseFloat(value) > threshold;\n    }).length;\n  };\n  const calculateDaysOverPeak = (data, pollutantType, threshold) => {\n    return data.filter(day => {\n      // Match the exact column names from your CSV\n      const value = pollutantType === 'PM2.5' ? day['PM 2.5'] : day['PM 10'];\n      return parseFloat(value) > threshold;\n    }).length;\n  };\n\n  // Add this debug log to check the data structure\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      console.log('Sample data row:', airQualityData[0]);\n      console.log('PM2.5 value:', airQualityData[0]['PM 2.5']);\n      console.log('PM10 value:', airQualityData[0]['PM 10']);\n    }\n  }, [airQualityData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), \"  \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [airQualityData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deeper-sleep-banner\",\n        style: {\n          backgroundColor: '#90c789',\n          color: '#1a472a',\n          padding: '20px',\n          borderRadius: '8px',\n          marginBottom: '20px',\n          textAlign: 'center',\n          fontSize: '1.5rem',\n          fontWeight: 'bold'\n        },\n        children: [calculateDeeperSleepMinutes(airQualityData, hasHVAC, hasEcologica).toLocaleString(), \" minutes of deeper sleep\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [firstName ? `${firstName}'s ` : '', city, \" Dashboard\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dashboard-section\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chart-side\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"PM2.5 Levels\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  height: '400px',\n                  width: '100%'\n                },\n                children: chartData && chartData.pm25 && /*#__PURE__*/_jsxDEV(Line, {\n                  data: chartData.pm25,\n                  options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      x: {\n                        type: 'time',\n                        time: {\n                          unit: 'day',\n                          displayFormats: {\n                            day: 'MMM d'\n                          }\n                        },\n                        title: {\n                          display: true,\n                          text: 'Date'\n                        }\n                      },\n                      y: {\n                        beginAtZero: true,\n                        title: {\n                          display: true,\n                          text: 'μg/m³'\n                        }\n                      }\n                    },\n                    plugins: {\n                      legend: {\n                        position: 'bottom'\n                      },\n                      tooltip: {\n                        mode: 'index',\n                        intersect: false\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 340,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"data-side\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-title\",\n                children: \"KEY DATA POINTS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-points\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"key-data-point\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-number\",\n                    children: calculateDaysOverThreshold(airQualityData, 'PM2.5', 10)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 388,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-label\",\n                    children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 392,\n                      columnNumber: 32\n                    }, this), 10, \"ug/m\\xB3\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 391,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"key-data-point\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-number\",\n                    children: calculateDaysOverThreshold(airQualityData, 'PM2.5', 20)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 397,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-label\",\n                    children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 401,\n                      columnNumber: 32\n                    }, this), 20, \"ug/m\\xB3\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 400,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"key-data-point\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-number\",\n                    children: calculateDaysOverPeak(airQualityData, 'PM2.5', 50)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 406,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-label\",\n                    children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 410,\n                      columnNumber: 32\n                    }, this), 50, \"ug/m\\xB3\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 409,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dashboard-section\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chart-side\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"PM10 Levels\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  height: '400px',\n                  width: '100%'\n                },\n                children: chartData && chartData.pm10 && /*#__PURE__*/_jsxDEV(Line, {\n                  data: chartData.pm10,\n                  options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      x: {\n                        type: 'time',\n                        time: {\n                          unit: 'day',\n                          displayFormats: {\n                            day: 'MMM d'\n                          }\n                        },\n                        title: {\n                          display: true,\n                          text: 'Date'\n                        }\n                      },\n                      y: {\n                        beginAtZero: true,\n                        title: {\n                          display: true,\n                          text: 'μg/m³'\n                        }\n                      }\n                    },\n                    plugins: {\n                      legend: {\n                        position: 'bottom'\n                      },\n                      tooltip: {\n                        mode: 'index',\n                        intersect: false\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"data-side\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-title\",\n                children: \"KEY DATA POINTS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-points\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"key-data-point\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-number\",\n                    children: calculateDaysOverThreshold(airQualityData, 'PM10', 20)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 474,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-label\",\n                    children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 478,\n                      columnNumber: 32\n                    }, this), 20, \"ug/m\\xB3\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 477,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 473,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"key-data-point\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-number\",\n                    children: calculateDaysOverThreshold(airQualityData, 'PM10', 40)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 483,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-label\",\n                    children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 487,\n                      columnNumber: 32\n                    }, this), 40, \"ug/m\\xB3\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 486,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 482,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"key-data-point\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-number\",\n                    children: calculateDaysOverPeak(airQualityData, 'PM10', 50)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 492,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-label\",\n                    children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 496,\n                      columnNumber: 32\n                    }, this), 50, \"ug/m\\xB3\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 495,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dashboard-section\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chart-side\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Anxiety Tracking\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  height: '400px',\n                  width: '100%'\n                },\n                children: chartData && /*#__PURE__*/_jsxDEV(Line, {\n                  data: {\n                    labels: getLast60Days(airQualityData).map(d => d.date),\n                    datasets: [{\n                      label: 'Predicted Anxiety Level',\n                      data: getLast60Days(airQualityData).map(d => ({\n                        x: d.date,\n                        y: calculateAnxietyRisk(anxietyLevel, parseFloat(d['PM 10']))\n                      })),\n                      borderColor: 'rgb(255, 99, 132)',\n                      backgroundColor: 'rgba(255, 99, 132, 0.1)',\n                      borderWidth: 2,\n                      tension: 0.1\n                    }]\n                  },\n                  options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      x: {\n                        type: 'time',\n                        time: {\n                          unit: 'day',\n                          displayFormats: {\n                            day: 'MMM d'\n                          }\n                        },\n                        title: {\n                          display: true,\n                          text: 'Date'\n                        }\n                      },\n                      y: {\n                        beginAtZero: true,\n                        max: 10,\n                        title: {\n                          display: true,\n                          text: 'Anxiety Level'\n                        }\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"data-side\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-title\",\n                children: \"KEY DATA POINTS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 560,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-points\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"key-data-point\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-number\",\n                    children: anxietyLevel.toFixed(1)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 565,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-label\",\n                    children: [\"Base\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 569,\n                      columnNumber: 27\n                    }, this), \"Level\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 568,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 564,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"key-data-point\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-number\",\n                    children: getLast60Days(airQualityData).filter(day => calculateAnxietyRisk(anxietyLevel, parseFloat(day['PM 10'])) > anxietyLevel).length\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 573,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-label\",\n                    children: [\"Days with\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 579,\n                      columnNumber: 32\n                    }, this), \"Increased Risk\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 578,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 572,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"key-data-point\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-number\",\n                    children: Math.max(...getLast60Days(airQualityData).map(day => calculateAnxietyRisk(anxietyLevel, parseFloat(day['PM 10'])))).toFixed(1)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 583,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"key-data-label\",\n                    children: [\"Peak\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 589,\n                      columnNumber: 27\n                    }, this), \"Level\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 588,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 582,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Dashboard, \"NceSMdFCevQ0k+cx2jG6Sb1vNuw=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","Link","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","register","defaults","responsive","maintainAspectRatio","calculateHVACReduction","value","calculateEcologicaReduction","calculateCombinedReduction","calculateDeeperSleepMinutes","data","hasHVAC","hasEcologica","getAdjustedValue","daysUnderThreshold","filter","day","adjustedValue","parseFloat","length","deeperSleepMinutes","calculateAnxietyRisk","baseLevel","pm10","increase","riskIncrease","Math","min","Dashboard","_s","airQualityData","setAirQualityData","chartData","setChartData","isLoading","setIsLoading","setHasHVAC","setHasEcologica","city","setCity","firstName","setFirstName","activeDatasets","setActiveDatasets","anxietyLevel","setAnxietyLevel","anxietyChartData","setAnxietyChartData","getLast60Days","Array","isArray","validData","map","item","date","Date","temp","isNaN","getTime","sort","a","b","mostRecentDate","cutoffDate","setDate","getDate","processChartData","pollutantType","datasets","label","d","x","y","borderColor","backgroundColor","borderWidth","tension","hidden","push","processAnxietyChartData","labels","timestamp","fetchUserPreferences","user","auth","getUser","error","from","select","eq","id","single","first_name","anxiety_base_level","has_HVAC","has_ecologgica","console","fetchAirQualityData","response","fetch","json","processedData","pm25","fetchData","interval","setInterval","clearInterval","log","calculateDaysOverThreshold","threshold","last60Days","calculateDaysOverPeak","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","color","padding","borderRadius","marginBottom","textAlign","fontSize","fontWeight","toLocaleString","height","width","options","scales","type","time","unit","displayFormats","title","display","text","beginAtZero","plugins","legend","position","tooltip","mode","intersect","max","toFixed","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { Link } from 'react-router-dom';\nimport Navbar from './Navbar';  // Import your existing Navbar component\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\n\nconst calculateHVACReduction = (value) => {\n  return value * 0.7; // 30% reduction\n};\n\nconst calculateEcologicaReduction = (value) => {\n  return value * 0.6; // 40% reduction\n};\n\nconst calculateCombinedReduction = (value) => {\n  return value * 0.5; // 50% reduction\n};\n\nconst calculateDeeperSleepMinutes = (data, hasHVAC, hasEcologica) => {\n  const getAdjustedValue = (value) => {\n    if (hasHVAC && hasEcologica) {\n      return calculateCombinedReduction(value);\n    } else if (hasHVAC) {\n      return calculateHVACReduction(value);\n    } else if (hasEcologica) {\n      return calculateEcologicaReduction(value);\n    }\n    return value;\n  };\n\n  // Count days where PM2.5 is 5 or under after reductions\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  // Calculate total minutes of deeper sleep\n  // days × 8 hours × 60 minutes\n  const deeperSleepMinutes = daysUnderThreshold * 8 * 60;\n\n  return deeperSleepMinutes;\n};\n\nconst calculateAnxietyRisk = (baseLevel, pm10) => {\n  if (pm10 >= 10) {\n    const increase = pm10 / 10;\n    const riskIncrease = increase * 0.12; // 12% increase per 10mg\n    return Math.min(10, baseLevel * (1 + riskIncrease));\n  }\n  return baseLevel;\n};\n\nconst Dashboard = () => {\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Original PM2.5': true,\n    'PM2.5 with HVAC': false,\n    'PM2.5 with Ecologica': false,\n    'PM2.5 with Both': false,\n    'Original PM10': true,\n    'PM10 with HVAC': false,\n    'PM10 with Ecologica': false,\n    'PM10 with Both': false\n  });\n  const [anxietyLevel, setAnxietyLevel] = useState(5);\n  const [anxietyChartData, setAnxietyChartData] = useState(null);\n\n  const getLast60Days = (data) => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n\n    const validData = data\n      .map(item => ({\n        date: new Date(item.date),\n        'PM 2.5': parseFloat(item['PM 2.5']),\n        'PM 10': parseFloat(item['PM 10']),\n        city: item.city,\n        temp: item.temp\n      }))\n      .filter(item => \n        !isNaN(item.date.getTime()) && \n        !isNaN(item['PM 10']) && \n        !isNaN(item['PM 2.5']) &&\n        item.city === city\n      )\n      .sort((a, b) => b.date - a.date);\n\n    if (validData.length === 0) return [];\n\n    const mostRecentDate = validData[0].date;\n    const cutoffDate = new Date(mostRecentDate);\n    cutoffDate.setDate(cutoffDate.getDate() - 60);\n\n    return validData\n      .filter(item => item.date >= cutoffDate)\n      .sort((a, b) => a.date - b.date);\n  };\n\n  const processChartData = (data, pollutantType) => {\n    // Always show the original data\n    const datasets = [\n      {\n        label: `Original ${pollutantType}`,\n        data: data.map(d => ({\n          x: d.date,\n          y: pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5'])\n        })),\n        borderColor: 'rgb(0, 100, 0)', // Dark green\n        backgroundColor: 'rgba(0, 100, 0, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`Original ${pollutantType}`]\n      }\n    ];\n\n    // Add your preference-based reductions if they exist\n    if (hasHVAC || hasEcologica) {\n      // If you have both HVAC and Ecologica\n      if (hasHVAC && hasEcologica) {\n        datasets.push({\n          label: `${pollutantType} with Your Preferences`,\n          data: data.map(d => ({\n            x: d.date,\n            y: calculateCombinedReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n          })),\n          borderColor: 'rgb(144, 238, 144)', // Light green\n          backgroundColor: 'rgba(144, 238, 144, 0.1)',\n          borderWidth: 2,\n          tension: 0.1,\n          hidden: !activeDatasets[`${pollutantType} with Both`]\n        });\n      }\n      // If you only have HVAC\n      else if (hasHVAC) {\n        datasets.push({\n          label: `${pollutantType} with Your Preferences`,\n          data: data.map(d => ({\n            x: d.date,\n            y: calculateHVACReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n          })),\n          borderColor: 'rgb(34, 139, 34)', // Forest green\n          backgroundColor: 'rgba(34, 139, 34, 0.1)',\n          borderWidth: 2,\n          tension: 0.1,\n          hidden: !activeDatasets[`${pollutantType} with HVAC`]\n        });\n      }\n      // If you only have Ecologica\n      else if (hasEcologica) {\n        datasets.push({\n          label: `${pollutantType} with Your Preferences`,\n          data: data.map(d => ({\n            x: d.date,\n            y: calculateEcologicaReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n          })),\n          borderColor: 'rgb(60, 179, 113)', // Medium sea green\n          backgroundColor: 'rgba(60, 179, 113, 0.1)',\n          borderWidth: 2,\n          tension: 0.1,\n          hidden: !activeDatasets[`${pollutantType} with Ecologica`]\n        });\n      }\n    }\n\n    return { datasets };\n  };\n\n  const processAnxietyChartData = (data) => {\n    return {\n      labels: data.map(d => d.date || d.timestamp),\n      datasets: [{\n        label: 'Predicted Anxiety Level',\n        data: data.map(d => ({\n          x: d.date || d.timestamp,\n          y: calculateAnxietyRisk(anxietyLevel, parseFloat(d['PM10']))\n        })),\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.1)',\n        borderWidth: 2,\n        tension: 0.1\n      }]\n    };\n  };\n\n  const fetchUserPreferences = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { data, error } = await supabase\n        .from('user_preferences')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n\n      if (error) throw error;\n      if (data) {\n        setFirstName(data.first_name || '');\n        setCity(data.city || 'Toronto');\n        setAnxietyLevel(data.anxiety_base_level || 5);\n        setHasHVAC(data.has_HVAC);\n        setHasEcologica(data.has_ecologgica);\n      }\n    } catch (error) {\n      console.error('Error fetching user preferences:', error);\n    }\n  };\n\n  const fetchAirQualityData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/data');\n      const data = await response.json();\n      \n      if (data && data.length > 0) {\n        setAirQualityData(data);\n        \n        // Process data for charts\n        const processedData = {\n          pm25: processChartData(data, 'PM 2.5'),\n          pm10: processChartData(data, 'PM 10')\n        };\n        setChartData(processedData);\n      }\n    } catch (error) {\n      console.error('Error fetching air quality data:', error);\n    }\n  };\n\n  useEffect(() => {\n    // Fetch both user preferences and air quality data\n    const fetchData = async () => {\n      await fetchUserPreferences();\n      await fetchAirQualityData();\n    };\n    \n    fetchData();\n    \n    // Set up interval to refresh data every 5 minutes\n    const interval = setInterval(fetchData, 300000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  // Add this debug section temporarily\n  useEffect(() => {\n    console.log('Current state:', {\n      airQualityData,\n      chartData,\n      anxietyLevel\n    });\n  }, [airQualityData, chartData, anxietyLevel]);\n\n  const calculateDaysOverThreshold = (data, pollutantType, threshold) => {\n    const last60Days = getLast60Days(data);\n    return last60Days.filter(day => {\n      const value = pollutantType === 'PM2.5' ? day['PM 2.5'] : day['PM 10'];\n      return parseFloat(value) > threshold;\n    }).length;\n  };\n\n  const calculateDaysOverPeak = (data, pollutantType, threshold) => {\n    return data.filter(day => {\n      // Match the exact column names from your CSV\n      const value = pollutantType === 'PM2.5' ? day['PM 2.5'] : day['PM 10'];\n      return parseFloat(value) > threshold;\n    }).length;\n  };\n\n  // Add this debug log to check the data structure\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      console.log('Sample data row:', airQualityData[0]);\n      console.log('PM2.5 value:', airQualityData[0]['PM 2.5']);\n      console.log('PM10 value:', airQualityData[0]['PM 10']);\n    }\n  }, [airQualityData]);\n\n  return (\n    <>\n      <Navbar />  {/* Use your existing Navbar component */}\n\n      <div className=\"dashboard\">\n        {airQualityData.length > 0 && (\n          <div className=\"deeper-sleep-banner\" style={{\n            backgroundColor: '#90c789',\n            color: '#1a472a',\n            padding: '20px',\n            borderRadius: '8px',\n            marginBottom: '20px',\n            textAlign: 'center',\n            fontSize: '1.5rem',\n            fontWeight: 'bold'\n          }}>\n            {calculateDeeperSleepMinutes(airQualityData, hasHVAC, hasEcologica).toLocaleString()} minutes of deeper sleep\n          </div>\n        )}\n        \n        <h1>{firstName ? `${firstName}'s ` : ''}{city} Dashboard</h1>\n        \n        <div className=\"dashboard-container\">\n          {/* PM2.5 Section */}\n          <div className=\"dashboard-section\">\n            <div className=\"content-wrapper\">\n              <div className=\"chart-side\">\n                <h2>PM2.5 Levels</h2>\n                <div style={{ height: '400px', width: '100%' }}>\n                  {chartData && chartData.pm25 && (\n                    <Line\n                      data={chartData.pm25}\n                      options={{\n                        responsive: true,\n                        maintainAspectRatio: false,\n                        scales: {\n                          x: {\n                            type: 'time',\n                            time: {\n                              unit: 'day',\n                              displayFormats: {\n                                day: 'MMM d'\n                              }\n                            },\n                            title: {\n                              display: true,\n                              text: 'Date'\n                            }\n                          },\n                          y: {\n                            beginAtZero: true,\n                            title: {\n                              display: true,\n                              text: 'μg/m³'\n                            }\n                          }\n                        },\n                        plugins: {\n                          legend: {\n                            position: 'bottom'\n                          },\n                          tooltip: {\n                            mode: 'index',\n                            intersect: false\n                          }\n                        }\n                      }}\n                    />\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"data-side\">\n                <div className=\"key-data-title\">\n                  KEY DATA POINTS\n                </div>\n                <div className=\"key-data-points\">\n                  <div className=\"key-data-point\">\n                    <span className=\"key-data-number\">\n                      {calculateDaysOverThreshold(airQualityData, 'PM2.5', 10)}\n                    </span>\n                    <span className=\"key-data-label\">\n                      days over<br />\n                      {10}ug/m³\n                    </span>\n                  </div>\n                  <div className=\"key-data-point\">\n                    <span className=\"key-data-number\">\n                      {calculateDaysOverThreshold(airQualityData, 'PM2.5', 20)}\n                    </span>\n                    <span className=\"key-data-label\">\n                      days over<br />\n                      {20}ug/m³\n                    </span>\n                  </div>\n                  <div className=\"key-data-point\">\n                    <span className=\"key-data-number\">\n                      {calculateDaysOverPeak(airQualityData, 'PM2.5', 50)}\n                    </span>\n                    <span className=\"key-data-label\">\n                      days over<br />\n                      {50}ug/m³\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* PM10 Section */}\n          <div className=\"dashboard-section\">\n            <div className=\"content-wrapper\">\n              <div className=\"chart-side\">\n                <h2>PM10 Levels</h2>\n                <div style={{ height: '400px', width: '100%' }}>\n                  {chartData && chartData.pm10 && (\n                    <Line\n                      data={chartData.pm10}\n                      options={{\n                        responsive: true,\n                        maintainAspectRatio: false,\n                        scales: {\n                          x: {\n                            type: 'time',\n                            time: {\n                              unit: 'day',\n                              displayFormats: {\n                                day: 'MMM d'\n                              }\n                            },\n                            title: {\n                              display: true,\n                              text: 'Date'\n                            }\n                          },\n                          y: {\n                            beginAtZero: true,\n                            title: {\n                              display: true,\n                              text: 'μg/m³'\n                            }\n                          }\n                        },\n                        plugins: {\n                          legend: {\n                            position: 'bottom'\n                          },\n                          tooltip: {\n                            mode: 'index',\n                            intersect: false\n                          }\n                        }\n                      }}\n                    />\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"data-side\">\n                <div className=\"key-data-title\">\n                  KEY DATA POINTS\n                </div>\n                <div className=\"key-data-points\">\n                  <div className=\"key-data-point\">\n                    <span className=\"key-data-number\">\n                      {calculateDaysOverThreshold(airQualityData, 'PM10', 20)}\n                    </span>\n                    <span className=\"key-data-label\">\n                      days over<br />\n                      {20}ug/m³\n                    </span>\n                  </div>\n                  <div className=\"key-data-point\">\n                    <span className=\"key-data-number\">\n                      {calculateDaysOverThreshold(airQualityData, 'PM10', 40)}\n                    </span>\n                    <span className=\"key-data-label\">\n                      days over<br />\n                      {40}ug/m³\n                    </span>\n                  </div>\n                  <div className=\"key-data-point\">\n                    <span className=\"key-data-number\">\n                      {calculateDaysOverPeak(airQualityData, 'PM10', 50)}\n                    </span>\n                    <span className=\"key-data-label\">\n                      days over<br />\n                      {50}ug/m³\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Anxiety Section */}\n          <div className=\"dashboard-section\">\n            <div className=\"content-wrapper\">\n              <div className=\"chart-side\">\n                <h2>Anxiety Tracking</h2>\n                <div style={{ height: '400px', width: '100%' }}>\n                  {chartData && (\n                    <Line\n                      data={{\n                        labels: getLast60Days(airQualityData).map(d => d.date),\n                        datasets: [{\n                          label: 'Predicted Anxiety Level',\n                          data: getLast60Days(airQualityData).map(d => ({\n                            x: d.date,\n                            y: calculateAnxietyRisk(anxietyLevel, parseFloat(d['PM 10']))\n                          })),\n                          borderColor: 'rgb(255, 99, 132)',\n                          backgroundColor: 'rgba(255, 99, 132, 0.1)',\n                          borderWidth: 2,\n                          tension: 0.1\n                        }]\n                      }}\n                      options={{\n                        responsive: true,\n                        maintainAspectRatio: false,\n                        scales: {\n                          x: {\n                            type: 'time',\n                            time: {\n                              unit: 'day',\n                              displayFormats: {\n                                day: 'MMM d'\n                              }\n                            },\n                            title: {\n                              display: true,\n                              text: 'Date'\n                            }\n                          },\n                          y: {\n                            beginAtZero: true,\n                            max: 10,\n                            title: {\n                              display: true,\n                              text: 'Anxiety Level'\n                            }\n                          }\n                        }\n                      }}\n                    />\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"data-side\">\n                <div className=\"key-data-title\">\n                  KEY DATA POINTS\n                </div>\n                <div className=\"key-data-points\">\n                  <div className=\"key-data-point\">\n                    <span className=\"key-data-number\">\n                      {anxietyLevel.toFixed(1)}\n                    </span>\n                    <span className=\"key-data-label\">\n                      Base<br />Level\n                    </span>\n                  </div>\n                  <div className=\"key-data-point\">\n                    <span className=\"key-data-number\">\n                      {getLast60Days(airQualityData).filter(day => \n                        calculateAnxietyRisk(anxietyLevel, parseFloat(day['PM 10'])) > anxietyLevel\n                      ).length}\n                    </span>\n                    <span className=\"key-data-label\">\n                      Days with<br />Increased Risk\n                    </span>\n                  </div>\n                  <div className=\"key-data-point\">\n                    <span className=\"key-data-number\">\n                      {Math.max(...getLast60Days(airQualityData).map(day => \n                        calculateAnxietyRisk(anxietyLevel, parseFloat(day['PM 10']))\n                      )).toFixed(1)}\n                    </span>\n                    <span className=\"key-data-label\">\n                      Peak<br />Level\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}