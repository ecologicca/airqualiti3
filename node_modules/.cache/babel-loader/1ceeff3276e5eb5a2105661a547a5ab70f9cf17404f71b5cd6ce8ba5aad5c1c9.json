{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/app.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Questionnaire from './Questionnaire';\nimport { supabase } from './supabaseClient';\nimport Chart from 'chart.js/auto';\nimport './styles.css'; // Styling\nimport Dashboard from './Questionnaire';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [user, setUser] = useState(null); // Get the logged-in user from Supabase\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [selectedCity, setSelectedCity] = useState('');\n  const [hasCompletedQuestionnaire, setHasCompletedQuestionnaire] = useState(false);\n  const [pm25Chart, setPm25Chart] = useState(null);\n  const [pm10Chart, setPm10Chart] = useState(null);\n  const [error, setError] = useState(null); // Define error state to store errors\n\n  // Fetch the logged-in user information\n  useEffect(() => {\n    const fetchUser = async () => {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      setUser(user);\n    };\n    fetchUser();\n  }, []);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch user preferences to check if they've completed the questionnaire\n\n  const applyAdjustments = (hasHVAC, hasEcologgica) => {\n    let pm25Multiplier = 1,\n      pm10Multiplier = 1;\n\n    // Apply adjustments based on user preferences\n    if (hasHVAC) pm25Multiplier -= 0.40;\n    if (hasEcologgica) {\n      pm25Multiplier -= 0.25;\n      pm10Multiplier -= 0.25;\n    }\n    console.log('Applying adjustments based on user preferences:', {\n      hasHVAC,\n      hasEcologgica,\n      pm25Multiplier,\n      pm10Multiplier\n    });\n\n    // Update charts with adjusted multipliers\n    updateChartsDataWithAdjustments(pm25Multiplier, pm10Multiplier);\n  };\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      if (!user) return;\n      const {\n        data,\n        error\n      } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n      if (data) {\n        setHasCompletedQuestionnaire(true);\n        setSelectedCity(data.city);\n        applyAdjustments(data.has_HVAC, data.has_ecologgica); // Apply adjustments based on preferences\n      } else {\n        setHasCompletedQuestionnaire(false);\n      }\n      setLoading(false); // Set loading to false after preferences are fetched\n    };\n    fetchUserPreferences();\n  }, [user]);\n\n  // Fetch air quality data and initialize charts\n  useEffect(() => {\n    if (!hasCompletedQuestionnaire) return;\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`Error fetching air quality data: ${response.statusText}`);\n        }\n        const data = await response.json();\n        setAirQualityData(data);\n        initCharts(data); // Initialize charts after data is fetched\n      } catch (error) {\n        console.error(\"Error fetching air quality data:\", error);\n        setError(\"Error fetching air quality data\");\n      }\n    };\n    fetchAirQualityData();\n  }, [hasCompletedQuestionnaire]);\n\n  // Add a loading state in the UI\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Taking a bit...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 10\n    }, this);\n  }\n\n  // Initialize charts for PM 2.5 and PM 10\n  const initCharts = data => {\n    const ctx25 = document.getElementById('pm25Chart').getContext('2d');\n    const ctx10 = document.getElementById('pm10Chart').getContext('2d');\n    const cityData = data.filter(row => row.City === selectedCity);\n    const labels = cityData.map(row => row.Date);\n    const pm25Data = cityData.map(row => row['PM 2.5']);\n    const pm10Data = cityData.map(row => row['PM 10']);\n    const newPm25Chart = new Chart(ctx25, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'PM 2.5',\n          data: pm25Data,\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'µg/m³'\n            }\n          }\n        }\n      }\n    });\n    const newPm10Chart = new Chart(ctx10, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'PM 10',\n          data: pm10Data,\n          borderColor: 'rgb(255, 99, 132)',\n          tension: 0.1\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'µg/m³'\n            }\n          }\n        }\n      }\n    });\n    setPm25Chart(newPm25Chart);\n    setPm10Chart(newPm10Chart);\n  };\n\n  // Update chart data with adjustments\n  const updateChartsDataWithAdjustments = (pm25Multiplier, pm10Multiplier) => {\n    // Filter the air quality data for the selected city\n    const cityData = airQualityData.filter(row => row.City === selectedCity);\n\n    // Extract the labels (dates) and adjusted PM 2.5 and PM 10 data\n    const labels = cityData.map(row => row.Date);\n    const pm25Data = cityData.map(row => parseFloat(row['PM 2.5']) * pm25Multiplier);\n    const pm10Data = cityData.map(row => parseFloat(row['PM 10']) * pm10Multiplier);\n\n    // Update PM 2.5 chart data\n    if (pm25Chart) {\n      pm25Chart.data.labels = labels;\n      pm25Chart.data.datasets[0].data = pm25Data;\n      pm25Chart.update(); // Re-render the chart\n    }\n\n    // Update PM 10 chart data\n    if (pm10Chart) {\n      pm10Chart.data.labels = labels;\n      pm10Chart.data.datasets[0].data = pm10Data;\n      pm10Chart.update(); // Re-render the chart\n    }\n  };\n\n  // Helper function to update chart data\n  const updateChartData = (chart, labels, data) => {\n    if (!chart) return;\n    chart.data.labels = labels;\n    chart.data.datasets[0].data = data;\n    chart.update();\n  };\n\n  // Handle city change from dropdown\n  const handleCityChange = event => {\n    const city = event.target.value;\n    setSelectedCity(city);\n    updateChartsDataWithAdjustments(1, 1); // Reset any adjustments on city change\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }, this), hasCompletedQuestionnaire ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Air Quality Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upper-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"city-select\",\n            children: \"Select City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"city-select\",\n            value: selectedCity,\n            onChange: handleCityChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this), [...new Set(airQualityData.map(row => row.City))].map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: city,\n              children: city\n            }, city, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Key Data Points\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"City: \", selectedCity]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"PM 2.5 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"pm25Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"PM 10 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"pm10Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Questionnaire, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"NMyMoFgFrPW2Q/2R4uOV56QVUWg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Questionnaire","supabase","Chart","Dashboard","jsxDEV","_jsxDEV","App","_s","user","setUser","airQualityData","setAirQualityData","selectedCity","setSelectedCity","hasCompletedQuestionnaire","setHasCompletedQuestionnaire","pm25Chart","setPm25Chart","pm10Chart","setPm10Chart","error","setError","fetchUser","data","auth","getUser","loading","setLoading","applyAdjustments","hasHVAC","hasEcologgica","pm25Multiplier","pm10Multiplier","console","log","updateChartsDataWithAdjustments","fetchUserPreferences","from","select","eq","id","single","city","has_HVAC","has_ecologgica","fetchAirQualityData","response","fetch","ok","Error","statusText","json","initCharts","children","fileName","_jsxFileName","lineNumber","columnNumber","ctx25","document","getElementById","getContext","ctx10","cityData","filter","row","City","labels","map","Date","pm25Data","pm10Data","newPm25Chart","type","datasets","label","borderColor","tension","options","scales","x","title","display","text","y","beginAtZero","newPm10Chart","parseFloat","update","updateChartData","chart","handleCityChange","event","target","value","className","htmlFor","onChange","Set","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/app.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Questionnaire from './Questionnaire';\nimport { supabase } from './supabaseClient';\nimport Chart from 'chart.js/auto';\nimport './styles.css'; // Styling\nimport Dashboard from './Questionnaire';\n\nconst App = () => {\n  const [user, setUser] = useState(null);  // Get the logged-in user from Supabase\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [selectedCity, setSelectedCity] = useState('');\n  const [hasCompletedQuestionnaire, setHasCompletedQuestionnaire] = useState(false);\n  const [pm25Chart, setPm25Chart] = useState(null);\n  const [pm10Chart, setPm10Chart] = useState(null);\n  const [error, setError] = useState(null);  // Define error state to store errors\n\n  // Fetch the logged-in user information\n  useEffect(() => {\n    const fetchUser = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      setUser(user);\n    };\n    fetchUser();\n  }, []);\n\n  const [loading, setLoading] = useState(true);\n\n  // Fetch user preferences to check if they've completed the questionnaire\n\nconst applyAdjustments = (hasHVAC, hasEcologgica) => {\n  let pm25Multiplier = 1, pm10Multiplier = 1;\n\n  // Apply adjustments based on user preferences\n  if (hasHVAC) pm25Multiplier -= 0.40;\n  if (hasEcologgica) {\n    pm25Multiplier -= 0.25;\n    pm10Multiplier -= 0.25;\n  }\n\n  console.log('Applying adjustments based on user preferences:', { hasHVAC, hasEcologgica, pm25Multiplier, pm10Multiplier });\n  \n  // Update charts with adjusted multipliers\n  updateChartsDataWithAdjustments(pm25Multiplier, pm10Multiplier);\n};\n\nuseEffect(() => {\n  const fetchUserPreferences = async () => {\n    if (!user) return;\n    const { data, error } = await supabase\n      .from('user_preferences')\n      .select('*')\n      .eq('user_id', user.id)\n      .single();\n\n    if (data) {\n      setHasCompletedQuestionnaire(true);\n      setSelectedCity(data.city);\n      applyAdjustments(data.has_HVAC, data.has_ecologgica); // Apply adjustments based on preferences\n    } else {\n      setHasCompletedQuestionnaire(false);\n    }\n    setLoading(false); // Set loading to false after preferences are fetched\n  };\n  fetchUserPreferences();\n}, [user]);\n\n // Fetch air quality data and initialize charts\nuseEffect(() => {\n  if (!hasCompletedQuestionnaire) return;\n\n  const fetchAirQualityData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/airqualitydata');\n      if (!response.ok) {\n        throw new Error(`Error fetching air quality data: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setAirQualityData(data);\n      initCharts(data);  // Initialize charts after data is fetched\n    } catch (error) {\n      console.error(\"Error fetching air quality data:\", error);\n      setError(\"Error fetching air quality data\");\n    }\n  };\n  fetchAirQualityData();\n}, [hasCompletedQuestionnaire]);\n\n// Add a loading state in the UI\nif (loading) {\n  return <div>Taking a bit...</div>;\n}\n\n// Initialize charts for PM 2.5 and PM 10\nconst initCharts = (data) => {\n  const ctx25 = document.getElementById('pm25Chart').getContext('2d');\n  const ctx10 = document.getElementById('pm10Chart').getContext('2d');\n\n  const cityData = data.filter(row => row.City === selectedCity);\n\n  const labels = cityData.map(row => row.Date);\n  const pm25Data = cityData.map(row => row['PM 2.5']);\n  const pm10Data = cityData.map(row => row['PM 10']);\n\n  const newPm25Chart = new Chart(ctx25, {\n    type: 'line',\n    data: {\n      labels: labels,\n      datasets: [{ label: 'PM 2.5', data: pm25Data, borderColor: 'rgb(75, 192, 192)', tension: 0.1 }],\n    },\n    options: {\n      scales: {\n        x: { type: 'time', title: { display: true, text: 'Date' } },\n        y: { beginAtZero: true, title: { display: true, text: 'µg/m³' } }\n      },\n    },\n  });\n\n  const newPm10Chart = new Chart(ctx10, {\n    type: 'line',\n    data: {\n      labels: labels,\n      datasets: [{ label: 'PM 10', data: pm10Data, borderColor: 'rgb(255, 99, 132)', tension: 0.1 }],\n    },\n    options: {\n      scales: {\n        x: { type: 'time', title: { display: true, text: 'Date' } },\n        y: { beginAtZero: true, title: { display: true, text: 'µg/m³' } }\n      },\n    },\n  });\n\n  setPm25Chart(newPm25Chart);\n  setPm10Chart(newPm10Chart);\n};\n\n // Update chart data with adjustments\nconst updateChartsDataWithAdjustments = (pm25Multiplier, pm10Multiplier) => {\n  // Filter the air quality data for the selected city\n  const cityData = airQualityData.filter(row => row.City === selectedCity);\n  \n  // Extract the labels (dates) and adjusted PM 2.5 and PM 10 data\n  const labels = cityData.map(row => row.Date);\n  const pm25Data = cityData.map(row => parseFloat(row['PM 2.5']) * pm25Multiplier);\n  const pm10Data = cityData.map(row => parseFloat(row['PM 10']) * pm10Multiplier);\n  \n  // Update PM 2.5 chart data\n  if (pm25Chart) {\n    pm25Chart.data.labels = labels;\n    pm25Chart.data.datasets[0].data = pm25Data;\n    pm25Chart.update(); // Re-render the chart\n  }\n\n  // Update PM 10 chart data\n  if (pm10Chart) {\n    pm10Chart.data.labels = labels;\n    pm10Chart.data.datasets[0].data = pm10Data;\n    pm10Chart.update(); // Re-render the chart\n  }\n};\n\n  // Helper function to update chart data\n  const updateChartData = (chart, labels, data) => {\n    if (!chart) return;\n    chart.data.labels = labels;\n    chart.data.datasets[0].data = data;\n    chart.update();\n  };\n\n  // Handle city change from dropdown\n  const handleCityChange = (event) => {\n    const city = event.target.value;\n    setSelectedCity(city);\n    updateChartsDataWithAdjustments(1, 1); // Reset any adjustments on city change\n  };\n\n  return (\n    <div className=\"dashboard-container\">\n      {error && <p className=\"error-message\">{error}</p>}\n      {hasCompletedQuestionnaire ? (\n        <div className=\"dashboard\">\n          <h1>Air Quality Dashboard</h1>\n          <div className=\"upper-section\">\n            <div className=\"left-box\">\n              <label htmlFor=\"city-select\">Select City</label>\n              <select id=\"city-select\" value={selectedCity} onChange={handleCityChange}>\n                <option value=\"\">Select a City</option>\n                {[...new Set(airQualityData.map(row => row.City))].map(city => (\n                  <option key={city} value={city}>{city}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"right-box\">\n              <h2>Key Data Points</h2>\n              <ul>\n                <li>City: {selectedCity}</li>\n                {/* Add other key data points as needed */}\n              </ul>\n            </div>\n          </div>\n          <div className=\"chart-section\">\n            <div className=\"chart-container\">\n              <h3>PM 2.5 Levels</h3>\n              <canvas id=\"pm25Chart\"></canvas>\n            </div>\n            <div className=\"chart-container\">\n              <h3>PM 10 Levels</h3>\n              <canvas id=\"pm10Chart\"></canvas>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <Questionnaire user={user} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}