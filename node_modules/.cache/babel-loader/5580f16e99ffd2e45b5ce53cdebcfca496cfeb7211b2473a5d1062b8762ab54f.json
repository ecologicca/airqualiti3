{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/HealthImpactAnalysis.js\";\nimport React from 'react';\nimport { calculateIndoorWithDevices } from '../utils/airQualityCalculations';\nimport '../styles/HealthImpactAnalysis.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst normalize = score => {\n  return Math.max(0, Math.min(100, Math.round(score)));\n};\nconst getImpactLevel = (score, metric) => {\n  switch (metric) {\n    case 'respiratory':\n      if (score <= 30) return 'High';\n      if (score <= 60) return 'Moderate';\n      return 'Low';\n    case 'cardiovascular':\n      if (score <= 30) return 'High';\n      if (score <= 60) return 'Moderate';\n      return 'Low';\n    case 'sleep':\n      if (score < 40) return 'High';\n      if (score <= 70) return 'Moderate';\n      return 'Low';\n    default:\n      return 'Unknown';\n  }\n};\n\n// Map sleep quality levels to numeric values for calculations\nconst sleepQualityMap = {\n  'low': 30,\n  'moderate': 65,\n  'high': 90\n};\nconst calculateRespiratoryScore = (activityLevel, pm25, pm10, sleepScore) => {\n  // Higher activity level means better respiratory health (more resilient)\n  // Higher PM2.5 and PM10 mean worse respiratory health\n  // Better sleep means better respiratory health\n  const score = normalize(100 - (pm25 * 2.0 +\n  // PM2.5 has biggest negative impact\n  pm10 * 1.5 +\n  // PM10 has significant negative impact\n  activityLevel * -5 +\n  // Activity level significantly improves score (negative means reduction)\n  sleepScore * -0.3 // Sleep quality slightly improves score (negative means reduction)\n  ));\n  return {\n    score,\n    level: getImpactLevel(score, 'respiratory')\n  };\n};\nconst calculateCardiovascularScore = (pm25, pm10, activityLevel, sleepScore) => {\n  const score = normalize(100 - (pm25 * 1.5 + pm10 * 1.0 - activityLevel * 2 - sleepScore * 0.8));\n  return {\n    score,\n    level: getImpactLevel(score, 'cardiovascular')\n  };\n};\nconst calculateSleepScore = (sleepScore, pm25, userAnxietyLevel) => {\n  const score = normalize(sleepScore * 1.5 - pm25 * 0.8 - userAnxietyLevel * 4);\n  return {\n    score,\n    level: getImpactLevel(score, 'sleep')\n  };\n};\nconst MetricCard = ({\n  title,\n  subtitle,\n  score,\n  level,\n  color\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"health-metric-card\",\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    className: \"metric-title\",\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"metric-subtitle\",\n    children: subtitle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"metric-details\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"impact-level\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Impact Level: \", level]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-circle\",\n      children: [score, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-bar-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      style: {\n        width: `${score}%`,\n        backgroundColor: color\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 81,\n  columnNumber: 3\n}, this);\n_c = MetricCard;\nconst HealthImpactAnalysis = ({\n  data,\n  userPreferences\n}) => {\n  // Use the most recent data point for calculations\n  const latestData = data[0] || {};\n  const pm25 = latestData['PM 2.5'] || 0;\n  const pm10 = latestData['PM 10'] || 0;\n\n  // Get values from user preferences using the correct field names\n  const activityLevel = (userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.activity_level) || 5;\n  const sleepLevel = (userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.sleep_level) || 'moderate';\n  const sleepScore = sleepQualityMap[sleepLevel] || 65; // Convert sleep level to numeric score\n  const userAnxietyLevel = (userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.anxiety_base_level) || 5;\n\n  // Calculate adjusted values based on indoor/device settings\n  const adjustedPM25 = calculateIndoorWithDevices(pm25, (userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.has_HVAC) || false, (userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.has_ecologgica) || false);\n  const adjustedPM10 = calculateIndoorWithDevices(pm10, (userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.has_HVAC) || false, (userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.has_ecologgica) || false);\n  const respiratoryMetrics = calculateRespiratoryScore(activityLevel, adjustedPM25, adjustedPM10, sleepScore);\n  const cardiovascularMetrics = calculateCardiovascularScore(adjustedPM25, adjustedPM10, activityLevel, sleepScore);\n  const sleepMetrics = calculateSleepScore(sleepScore, adjustedPM25, userAnxietyLevel);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"health-impact-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"health-metrics-grid\",\n      children: [/*#__PURE__*/_jsxDEV(MetricCard, {\n        title: \"Respiratory Health\",\n        subtitle: \"Impact on breathing, lungs, and airway conditions\",\n        score: respiratoryMetrics.score,\n        level: respiratoryMetrics.level,\n        color: \"#043A24\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n        title: \"Cardiovascular Health\",\n        subtitle: \"Impact on heart and blood vessel conditions\",\n        score: cardiovascularMetrics.score,\n        level: cardiovascularMetrics.level,\n        color: \"#90c789\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n        title: \"Sleep Quality\",\n        subtitle: \"Impact on sleep patterns and overall rest\",\n        score: sleepMetrics.score,\n        level: sleepMetrics.level,\n        color: \"#D9F6BB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_c2 = HealthImpactAnalysis;\nexport default HealthImpactAnalysis;\nvar _c, _c2;\n$RefreshReg$(_c, \"MetricCard\");\n$RefreshReg$(_c2, \"HealthImpactAnalysis\");","map":{"version":3,"names":["React","calculateIndoorWithDevices","jsxDEV","_jsxDEV","normalize","score","Math","max","min","round","getImpactLevel","metric","sleepQualityMap","calculateRespiratoryScore","activityLevel","pm25","pm10","sleepScore","level","calculateCardiovascularScore","calculateSleepScore","userAnxietyLevel","MetricCard","title","subtitle","color","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","backgroundColor","_c","HealthImpactAnalysis","data","userPreferences","latestData","activity_level","sleepLevel","sleep_level","anxiety_base_level","adjustedPM25","has_HVAC","has_ecologgica","adjustedPM10","respiratoryMetrics","cardiovascularMetrics","sleepMetrics","_c2","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/HealthImpactAnalysis.js"],"sourcesContent":["import React from 'react';\nimport { calculateIndoorWithDevices } from '../utils/airQualityCalculations';\nimport '../styles/HealthImpactAnalysis.css';\n\nconst normalize = (score) => {\n  return Math.max(0, Math.min(100, Math.round(score)));\n};\n\nconst getImpactLevel = (score, metric) => {\n  switch (metric) {\n    case 'respiratory':\n      if (score <= 30) return 'High';\n      if (score <= 60) return 'Moderate';\n      return 'Low';\n    case 'cardiovascular':\n      if (score <= 30) return 'High';\n      if (score <= 60) return 'Moderate';\n      return 'Low';\n    case 'sleep':\n      if (score < 40) return 'High';\n      if (score <= 70) return 'Moderate';\n      return 'Low';\n    default:\n      return 'Unknown';\n  }\n};\n\n// Map sleep quality levels to numeric values for calculations\nconst sleepQualityMap = {\n  'low': 30,\n  'moderate': 65,\n  'high': 90\n};\n\nconst calculateRespiratoryScore = (activityLevel, pm25, pm10, sleepScore) => {\n  // Higher activity level means better respiratory health (more resilient)\n  // Higher PM2.5 and PM10 mean worse respiratory health\n  // Better sleep means better respiratory health\n  const score = normalize(\n    100 - (\n      (pm25 * 2.0) +     // PM2.5 has biggest negative impact\n      (pm10 * 1.5) +     // PM10 has significant negative impact\n      (activityLevel * -5) + // Activity level significantly improves score (negative means reduction)\n      (sleepScore * -0.3)    // Sleep quality slightly improves score (negative means reduction)\n    )\n  );\n  return {\n    score,\n    level: getImpactLevel(score, 'respiratory')\n  };\n};\n\nconst calculateCardiovascularScore = (pm25, pm10, activityLevel, sleepScore) => {\n  const score = normalize(\n    100 - (\n      (pm25 * 1.5) +\n      (pm10 * 1.0) -\n      (activityLevel * 2) -\n      (sleepScore * 0.8)\n    )\n  );\n  return {\n    score,\n    level: getImpactLevel(score, 'cardiovascular')\n  };\n};\n\nconst calculateSleepScore = (sleepScore, pm25, userAnxietyLevel) => {\n  const score = normalize(\n    (sleepScore * 1.5) -\n    (pm25 * 0.8) -\n    (userAnxietyLevel * 4)\n  );\n  return {\n    score,\n    level: getImpactLevel(score, 'sleep')\n  };\n};\n\nconst MetricCard = ({ title, subtitle, score, level, color }) => (\n  <div className=\"health-metric-card\">\n    <h3 className=\"metric-title\">{title}</h3>\n    <p className=\"metric-subtitle\">{subtitle}</p>\n    <div className=\"metric-details\">\n      <div className=\"impact-level\">\n        <div>Impact Level: {level}</div>\n      </div>\n      <div className=\"score-circle\">\n        {score}%\n      </div>\n    </div>\n    <div className=\"progress-bar-container\">\n      <div \n        className=\"progress-bar\"\n        style={{\n          width: `${score}%`,\n          backgroundColor: color\n        }} \n      />\n    </div>\n  </div>\n);\n\nconst HealthImpactAnalysis = ({ data, userPreferences }) => {\n  // Use the most recent data point for calculations\n  const latestData = data[0] || {};\n  const pm25 = latestData['PM 2.5'] || 0;\n  const pm10 = latestData['PM 10'] || 0;\n  \n  // Get values from user preferences using the correct field names\n  const activityLevel = userPreferences?.activity_level || 5;\n  const sleepLevel = userPreferences?.sleep_level || 'moderate';\n  const sleepScore = sleepQualityMap[sleepLevel] || 65; // Convert sleep level to numeric score\n  const userAnxietyLevel = userPreferences?.anxiety_base_level || 5;\n\n  // Calculate adjusted values based on indoor/device settings\n  const adjustedPM25 = calculateIndoorWithDevices(\n    pm25,\n    userPreferences?.has_HVAC || false,\n    userPreferences?.has_ecologgica || false\n  );\n  \n  const adjustedPM10 = calculateIndoorWithDevices(\n    pm10,\n    userPreferences?.has_HVAC || false,\n    userPreferences?.has_ecologgica || false\n  );\n\n  const respiratoryMetrics = calculateRespiratoryScore(activityLevel, adjustedPM25, adjustedPM10, sleepScore);\n  const cardiovascularMetrics = calculateCardiovascularScore(adjustedPM25, adjustedPM10, activityLevel, sleepScore);\n  const sleepMetrics = calculateSleepScore(sleepScore, adjustedPM25, userAnxietyLevel);\n\n  return (\n    <div className=\"health-impact-container\">\n      <div className=\"health-metrics-grid\">\n        <MetricCard\n          title=\"Respiratory Health\"\n          subtitle=\"Impact on breathing, lungs, and airway conditions\"\n          score={respiratoryMetrics.score}\n          level={respiratoryMetrics.level}\n          color=\"#043A24\"\n        />\n        <MetricCard\n          title=\"Cardiovascular Health\"\n          subtitle=\"Impact on heart and blood vessel conditions\"\n          score={cardiovascularMetrics.score}\n          level={cardiovascularMetrics.level}\n          color=\"#90c789\"\n        />\n        <MetricCard\n          title=\"Sleep Quality\"\n          subtitle=\"Impact on sleep patterns and overall rest\"\n          score={sleepMetrics.score}\n          level={sleepMetrics.level}\n          color=\"#D9F6BB\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default HealthImpactAnalysis; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}