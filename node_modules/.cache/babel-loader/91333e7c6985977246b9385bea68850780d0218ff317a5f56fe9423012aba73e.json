{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nexport const useAuth = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Check current auth status\n    const checkAuth = async () => {\n      try {\n        const {\n          data: {\n            session\n          }\n        } = await supabase.auth.getSession();\n        setIsAuthenticated(!!session);\n      } catch (error) {\n        console.error('Error checking auth status:', error);\n        setIsAuthenticated(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((event, session) => {\n      setIsAuthenticated(!!session);\n    });\n    return () => {\n      subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\n    };\n  }, []);\n  return {\n    isAuthenticated,\n    isLoading\n  };\n};\n_s(useAuth, \"QGOAXroSjAVQAlauW9LqDUcn+wM=\");","map":{"version":3,"names":["useState","useEffect","supabase","useAuth","_s","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","checkAuth","data","session","auth","getSession","error","console","subscription","onAuthStateChange","event","unsubscribe"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\n\nexport const useAuth = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check current auth status\n    const checkAuth = async () => {\n      try {\n        const { data: { session } } = await supabase.auth.getSession();\n        setIsAuthenticated(!!session);\n      } catch (error) {\n        console.error('Error checking auth status:', error);\n        setIsAuthenticated(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {\n      setIsAuthenticated(!!session);\n    });\n\n    return () => {\n      subscription?.unsubscribe();\n    };\n  }, []);\n\n  return { isAuthenticated, isLoading };\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,mBAAmB;AAE5C,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAM;UAAEC,IAAI,EAAE;YAAEC;UAAQ;QAAE,CAAC,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAACC,UAAU,CAAC,CAAC;QAC9DP,kBAAkB,CAAC,CAAC,CAACK,OAAO,CAAC;MAC/B,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDR,kBAAkB,CAAC,KAAK,CAAC;MAC3B,CAAC,SAAS;QACRE,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;;IAEX;IACA,MAAM;MAAEC,IAAI,EAAE;QAAEM;MAAa;IAAE,CAAC,GAAGd,QAAQ,CAACU,IAAI,CAACK,iBAAiB,CAAC,CAACC,KAAK,EAAEP,OAAO,KAAK;MACrFL,kBAAkB,CAAC,CAAC,CAACK,OAAO,CAAC;IAC/B,CAAC,CAAC;IAEF,OAAO,MAAM;MACXK,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEG,WAAW,CAAC,CAAC;IAC7B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEd,eAAe;IAAEE;EAAU,CAAC;AACvC,CAAC;AAACH,EAAA,CA/BWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}