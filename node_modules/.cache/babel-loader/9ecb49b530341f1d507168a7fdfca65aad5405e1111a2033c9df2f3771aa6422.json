{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/components/charts/CityComparisonChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { supabase } from '../../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityComparisonChart = ({\n  userPreferences\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Get data for the last 7 days\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - 7);\n\n        // First get all unique cities\n        const {\n          data: citiesData,\n          error: citiesError\n        } = await supabase.from('weather_data').select('city').distinct();\n        if (citiesError) throw citiesError;\n        const cities = citiesData.map(item => item.city);\n\n        // Then fetch last 7 days of data for all cities\n        const {\n          data: weatherData,\n          error: dataError\n        } = await supabase.from('weather_data').select('*').in('city', cities).gte('created_at', startDate.toISOString()).lte('created_at', endDate.toISOString());\n        if (dataError) throw dataError;\n\n        // Calculate weekly averages for each city\n        const cityAverages = cities.map(city => {\n          const cityData = weatherData.filter(item => item.city === city);\n          const average = cityData.reduce((sum, item) => sum + (item.pm25 || 0), 0) / (cityData.length || 1);\n          return {\n            city,\n            average: parseFloat(average.toFixed(1))\n          };\n        });\n\n        // Sort cities by average PM2.5 levels\n        cityAverages.sort((a, b) => b.average - a.average);\n        setChartData({\n          labels: cityAverages.map(item => item.city),\n          datasets: [{\n            label: 'Weekly Average PM2.5',\n            data: cityAverages.map(item => item.average),\n            backgroundColor: cityAverages.map((_, index) => {\n              const colors = ['rgba(0, 100, 0, 0.7)', 'rgba(144, 238, 144, 0.7)', 'rgba(34, 139, 34, 0.7)', 'rgba(60, 179, 113, 0.7)'];\n              return colors[index % colors.length];\n            }),\n            borderColor: 'rgba(0, 100, 0, 1)',\n            borderWidth: 1\n          }]\n        });\n      } catch (err) {\n        console.error('Error fetching city comparison data:', err);\n        setError('Failed to load city comparison data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading city comparison data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 21\n  }, this);\n  if (!chartData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No city comparison data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 26\n  }, this);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'PM2.5 μg/m³ (Weekly Average)'\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Cities'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: 'Weekly Average PM2.5 by City',\n        color: '#2e7d32',\n        font: {\n          size: 16\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            return `Average: ${context.parsed.y} μg/m³`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(CityComparisonChart, \"+U+KmwUQ08o91z1Gf8Cwp1b98lo=\");\n_c = CityComparisonChart;\nexport default CityComparisonChart;\nvar _c;\n$RefreshReg$(_c, \"CityComparisonChart\");","map":{"version":3,"names":["React","useState","useEffect","Bar","supabase","jsxDEV","_jsxDEV","CityComparisonChart","userPreferences","_s","chartData","setChartData","isLoading","setIsLoading","error","setError","fetchData","endDate","Date","startDate","setDate","getDate","data","citiesData","citiesError","from","select","distinct","cities","map","item","city","weatherData","dataError","in","gte","toISOString","lte","cityAverages","cityData","filter","average","reduce","sum","pm25","length","parseFloat","toFixed","sort","a","b","labels","datasets","label","backgroundColor","_","index","colors","borderColor","borderWidth","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","scales","y","beginAtZero","title","display","text","x","plugins","legend","color","font","size","tooltip","callbacks","context","parsed","style","height","width","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/components/charts/CityComparisonChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { supabase } from '../../supabaseClient';\n\nconst CityComparisonChart = ({ userPreferences }) => {\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Get data for the last 7 days\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - 7);\n\n        // First get all unique cities\n        const { data: citiesData, error: citiesError } = await supabase\n          .from('weather_data')\n          .select('city')\n          .distinct();\n\n        if (citiesError) throw citiesError;\n\n        const cities = citiesData.map(item => item.city);\n\n        // Then fetch last 7 days of data for all cities\n        const { data: weatherData, error: dataError } = await supabase\n          .from('weather_data')\n          .select('*')\n          .in('city', cities)\n          .gte('created_at', startDate.toISOString())\n          .lte('created_at', endDate.toISOString());\n\n        if (dataError) throw dataError;\n\n        // Calculate weekly averages for each city\n        const cityAverages = cities.map(city => {\n          const cityData = weatherData.filter(item => item.city === city);\n          const average = cityData.reduce((sum, item) => sum + (item.pm25 || 0), 0) / (cityData.length || 1);\n          return {\n            city,\n            average: parseFloat(average.toFixed(1))\n          };\n        });\n\n        // Sort cities by average PM2.5 levels\n        cityAverages.sort((a, b) => b.average - a.average);\n\n        setChartData({\n          labels: cityAverages.map(item => item.city),\n          datasets: [{\n            label: 'Weekly Average PM2.5',\n            data: cityAverages.map(item => item.average),\n            backgroundColor: cityAverages.map((_, index) => {\n              const colors = [\n                'rgba(0, 100, 0, 0.7)',\n                'rgba(144, 238, 144, 0.7)',\n                'rgba(34, 139, 34, 0.7)',\n                'rgba(60, 179, 113, 0.7)'\n              ];\n              return colors[index % colors.length];\n            }),\n            borderColor: 'rgba(0, 100, 0, 1)',\n            borderWidth: 1\n          }]\n        });\n\n      } catch (err) {\n        console.error('Error fetching city comparison data:', err);\n        setError('Failed to load city comparison data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (isLoading) return <div>Loading city comparison data...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!chartData) return <div>No city comparison data available</div>;\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'PM2.5 μg/m³ (Weekly Average)'\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Cities'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: 'Weekly Average PM2.5 by City',\n        color: '#2e7d32',\n        font: {\n          size: 16\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context) {\n            return `Average: ${context.parsed.y} μg/m³`;\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div style={{ height: '400px', width: '100%' }}>\n      <Bar data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default CityComparisonChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}