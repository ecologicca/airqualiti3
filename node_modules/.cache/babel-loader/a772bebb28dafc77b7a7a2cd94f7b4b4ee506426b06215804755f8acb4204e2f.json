{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/components/BrainHealthPM2_5.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst calculateAnxSym96 = (previousWeekAverage, currentWeekAverage) => {\n  // Base odds ratio is 1.14 for every 5 μg/m³ increase\n  const threshold = 5; // 5 μg/m³ threshold\n  const baseOddsRatio = 1.14;\n\n  // Calculate the difference between weeks\n  const difference = currentWeekAverage - previousWeekAverage;\n\n  // Calculate how many units of 5 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym961 = (previousMonthAverage, currentMonthAverage) => {\n  // Base odds ratio is 1.34 for every 5 μg/m³ increase over 30 days\n  const threshold = 5; // 5 μg/m³ threshold\n  const baseOddsRatio = 1.34;\n\n  // Calculate the difference between months\n  const difference = currentMonthAverage - previousMonthAverage;\n\n  // Calculate how many units of 5 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym962 = (previous180Average, current180Average) => {\n  // Base odds ratio is 1.55 for every 5 μg/m³ increase over 180 days\n  const threshold = 5; // 5 μg/m³ threshold\n  const baseOddsRatio = 1.55;\n\n  // Calculate the difference between 180-day periods\n  const difference = current180Average - previous180Average;\n\n  // Calculate how many units of 5 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym963 = (previousYearAverage, currentYearAverage) => {\n  // Base odds ratio is 1.33 for every 5 μg/m³ increase over 365 days\n  const threshold = 5; // 5 μg/m³ threshold\n  const baseOddsRatio = 1.33;\n\n  // Calculate the difference between yearly periods\n  const difference = currentYearAverage - previousYearAverage;\n\n  // Calculate how many units of 5 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym964 = (previous4YearAverage, current4YearAverage) => {\n  // Base odds ratio is 1.29 for every 5 μg/m³ increase over 4 years\n  const threshold = 5; // 5 μg/m³ threshold\n  const baseOddsRatio = 1.29;\n\n  // Calculate the difference between 4-year periods\n  const difference = current4YearAverage - previous4YearAverage;\n\n  // Calculate how many units of 5 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym30 = (previousMonthAverage, currentMonthAverage) => {\n  // Base odds ratio is 1.49 for every 5 μg/m³ increase month over month\n  const threshold = 5; // 5 μg/m³ threshold\n  const baseOddsRatio = 1.49;\n\n  // Calculate the difference between months\n  const difference = currentMonthAverage - previousMonthAverage;\n\n  // Calculate how many units of 5 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym00 = (previousMonthAverage, currentMonthAverage) => {\n  // Base odds ratio is 1.12 for every 10 μg/m³ increase month over month\n  const threshold = 10; // 10 μg/m³ threshold\n  const baseOddsRatio = 1.12;\n\n  // Calculate the difference between months\n  const difference = currentMonthAverage - previousMonthAverage;\n\n  // Calculate how many units of 10 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxDis32 = (previousQuarterAverage, currentQuarterAverage) => {\n  // Base hazard ratio is 1.097 for every 1.13 μg/m³ increase quarter over quarter\n  const threshold = 1.13; // 1.13 μg/m³ threshold\n  const baseHazardRatio = 1.097;\n\n  // Calculate the difference between quarters\n  const difference = currentQuarterAverage - previousQuarterAverage;\n\n  // Calculate how many units of 1.13 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final hazard ratio (compound for each unit of 1.13 μg/m³)\n  const finalHazardRatio = units > 0 ? Math.pow(baseHazardRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    hazardRatio: finalHazardRatio.toFixed(3),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym001 = (previousQuarterAverage, currentQuarterAverage) => {\n  // Base odds ratio is 1.1 for every 10 μg/m³ increase quarter over quarter\n  const threshold = 10; // 10 μg/m³ threshold\n  const baseOddsRatio = 1.1;\n\n  // Calculate the difference between quarters\n  const difference = currentQuarterAverage - previousQuarterAverage;\n\n  // Calculate how many units of 10 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym002 = (previousSixMonthAverage, currentSixMonthAverage) => {\n  // Base odds ratio is 1.14 for every 10 μg/m³ increase per 6-month period\n  const threshold = 10; // 10 μg/m³ threshold\n  const baseOddsRatio = 1.14;\n\n  // Calculate the difference between 6-month periods\n  const difference = currentSixMonthAverage - previousSixMonthAverage;\n\n  // Calculate how many units of 10 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym003 = (previousYearAverage, currentYearAverage) => {\n  // Base odds ratio is 1.15 for every 10 μg/m³ increase per 12-month period\n  const threshold = 10; // 10 μg/m³ threshold\n  const baseOddsRatio = 1.15;\n\n  // Calculate the difference between yearly periods\n  const difference = currentYearAverage - previousYearAverage;\n\n  // Calculate how many units of 10 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst calculateAnxSym05 = (previousYearAverage, currentYearAverage) => {\n  // Base odds ratio is 1.14 for every 25 μg/m³ increase year over year\n  const threshold = 25; // 25 μg/m³ threshold\n  const baseOddsRatio = 1.14;\n\n  // Calculate the difference between years\n  const difference = currentYearAverage - previousYearAverage;\n\n  // Calculate how many units of 25 μg/m³ increase\n  const units = difference / threshold;\n\n  // Calculate final odds ratio (compound for each unit of 25 μg/m³)\n  const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n  return {\n    difference: difference.toFixed(2),\n    oddsRatio: finalOddsRatio.toFixed(2),\n    increased: difference > 0\n  };\n};\nconst BrainHealthPM2_5 = ({\n  city = 'Toronto'\n}) => {\n  _s();\n  const [averages, setAverages] = useState({\n    week: {\n      current: 0,\n      previous: 0\n    },\n    month: {\n      current: 0,\n      previous: 0\n    },\n    sixMonth: {\n      current: 0,\n      previous: 0\n    },\n    year: {\n      current: 0,\n      previous: 0\n    },\n    fourYear: {\n      current: 0,\n      previous: 0\n    }\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [timeSeriesData, setTimeSeriesData] = useState(null);\n\n  // Data validation helper\n  const validateData = (data, period) => {\n    if (!data || data.length === 0) {\n      throw new Error(`No data available for ${period}`);\n    }\n    const average = data.reduce((acc, val) => acc + (val.pm25 || 0), 0) / data.length;\n    if (isNaN(average)) {\n      throw new Error(`Invalid data for ${period}`);\n    }\n    return average;\n  };\n\n  // Optimized data fetching\n  const fetchDataForPeriod = async (startDate, endDate) => {\n    const {\n      data,\n      error\n    } = await supabase.from('weather_data').select('pm25, created_at').eq('city', city).gte('created_at', startDate.toISOString()).lte('created_at', endDate.toISOString()).order('created_at', {\n      ascending: true\n    });\n    if (error) throw error;\n    return data;\n  };\n  const fetchAverages = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const now = new Date();\n\n      // Define time ranges with labels\n      const ranges = {\n        week: {\n          label: '7-Day',\n          current: [new Date(now - 7 * 24 * 60 * 60 * 1000), now],\n          previous: [new Date(now - 14 * 24 * 60 * 60 * 1000), new Date(now - 7 * 24 * 60 * 60 * 1000)]\n        },\n        month: {\n          label: '30-Day',\n          current: [new Date(now - 30 * 24 * 60 * 60 * 1000), now],\n          previous: [new Date(now - 60 * 24 * 60 * 60 * 1000), new Date(now - 30 * 24 * 60 * 60 * 1000)]\n        },\n        sixMonth: {\n          label: '6-Month',\n          current: [new Date(now - 180 * 24 * 60 * 60 * 1000), now],\n          previous: [new Date(now - 360 * 24 * 60 * 60 * 1000), new Date(now - 180 * 24 * 60 * 60 * 1000)]\n        },\n        year: {\n          label: '1-Year',\n          current: [new Date(now - 365 * 24 * 60 * 60 * 1000), now],\n          previous: [new Date(now - 730 * 24 * 60 * 60 * 1000), new Date(now - 365 * 24 * 60 * 60 * 1000)]\n        },\n        fourYear: {\n          label: '4-Year',\n          current: [new Date(now - 4 * 365 * 24 * 60 * 60 * 1000), now],\n          previous: [new Date(now - 8 * 365 * 24 * 60 * 60 * 1000), new Date(now - 4 * 365 * 24 * 60 * 60 * 1000)]\n        }\n      };\n      const newAverages = {};\n      const timeSeriesPoints = [];\n\n      // Fetch and validate data for each period\n      for (const [period, range] of Object.entries(ranges)) {\n        try {\n          const currentData = await fetchDataForPeriod(range.current[0], range.current[1]);\n          const previousData = await fetchDataForPeriod(range.previous[0], range.previous[1]);\n          newAverages[period] = {\n            current: validateData(currentData, `current ${period}`),\n            previous: validateData(previousData, `previous ${period}`),\n            label: range.label\n          };\n\n          // Collect time series data\n          timeSeriesPoints.push(...currentData.map(d => ({\n            x: new Date(d.created_at),\n            y: d.pm25\n          })));\n        } catch (periodError) {\n          console.error(`Error processing ${period}:`, periodError);\n          newAverages[period] = {\n            current: null,\n            previous: null,\n            label: range.label,\n            error: periodError.message\n          };\n        }\n      }\n      setAverages(newAverages);\n      setTimeSeriesData(timeSeriesPoints);\n    } catch (error) {\n      console.error('Error fetching averages:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Chart configuration\n  const chartData = {\n    datasets: [{\n      label: 'PM2.5 Levels',\n      data: timeSeriesData,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day'\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'PM2.5 (μg/m³)'\n        }\n      }\n    },\n    plugins: {\n      title: {\n        display: true,\n        text: `PM2.5 Trends for ${city}`\n      }\n    }\n  };\n  useEffect(() => {\n    fetchAverages();\n  }, [city]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading brain health calculations...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Error Loading Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchAverages,\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"brain-health-calculator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"PM2.5 Brain Health Analysis for \", city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '400px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 13\n    }, this), Object.entries(averages).map(([period, data]) => {\n      var _data$previous, _data$current;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calculator-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [data.label, \" PM2.5 Anxiety Risk\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 21\n        }, this), data.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: data.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Previous Average: \", ((_data$previous = data.previous) === null || _data$previous === void 0 ? void 0 : _data$previous.toFixed(2)) || 'N/A', \" \\u03BCg/m\\xB3\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Current Average: \", ((_data$current = data.current) === null || _data$current === void 0 ? void 0 : _data$current.toFixed(2)) || 'N/A', \" \\u03BCg/m\\xB3\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 29\n          }, this), data.current && data.previous && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Change: \", (data.current - data.previous).toFixed(2), \" \\u03BCg/m\\xB3\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Risk Status: \", data.current > data.previous ? 'Increased risk of anxiety symptoms' : 'No increased risk']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 25\n        }, this)]\n      }, period, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 17\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 437,\n    columnNumber: 9\n  }, this);\n};\n_s(BrainHealthPM2_5, \"xrOcn5WHRht33OX4kClHbZCNqkc=\");\n_c = BrainHealthPM2_5;\nexport default BrainHealthPM2_5;\nvar _c;\n$RefreshReg$(_c, \"BrainHealthPM2_5\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Line","jsxDEV","_jsxDEV","Fragment","_Fragment","calculateAnxSym96","previousWeekAverage","currentWeekAverage","threshold","baseOddsRatio","difference","units","finalOddsRatio","Math","pow","toFixed","oddsRatio","increased","calculateAnxSym961","previousMonthAverage","currentMonthAverage","calculateAnxSym962","previous180Average","current180Average","calculateAnxSym963","previousYearAverage","currentYearAverage","calculateAnxSym964","previous4YearAverage","current4YearAverage","calculateAnxSym30","calculateAnxSym00","calculateAnxDis32","previousQuarterAverage","currentQuarterAverage","baseHazardRatio","finalHazardRatio","hazardRatio","calculateAnxSym001","calculateAnxSym002","previousSixMonthAverage","currentSixMonthAverage","calculateAnxSym003","calculateAnxSym05","BrainHealthPM2_5","city","_s","averages","setAverages","week","current","previous","month","sixMonth","year","fourYear","loading","setLoading","error","setError","timeSeriesData","setTimeSeriesData","validateData","data","period","length","Error","average","reduce","acc","val","pm25","isNaN","fetchDataForPeriod","startDate","endDate","from","select","eq","gte","toISOString","lte","order","ascending","fetchAverages","now","Date","ranges","label","newAverages","timeSeriesPoints","range","Object","entries","currentData","previousData","push","map","d","x","created_at","y","periodError","console","message","chartData","datasets","borderColor","tension","chartOptions","responsive","maintainAspectRatio","scales","type","time","unit","title","display","text","plugins","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","height","options","_data$previous","_data$current","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/components/BrainHealthPM2_5.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nimport { Line } from 'react-chartjs-2';\n\nconst calculateAnxSym96 = (previousWeekAverage, currentWeekAverage) => {\n    // Base odds ratio is 1.14 for every 5 μg/m³ increase\n    const threshold = 5; // 5 μg/m³ threshold\n    const baseOddsRatio = 1.14;\n    \n    // Calculate the difference between weeks\n    const difference = currentWeekAverage - previousWeekAverage;\n    \n    // Calculate how many units of 5 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym961 = (previousMonthAverage, currentMonthAverage) => {\n    // Base odds ratio is 1.34 for every 5 μg/m³ increase over 30 days\n    const threshold = 5; // 5 μg/m³ threshold\n    const baseOddsRatio = 1.34;\n    \n    // Calculate the difference between months\n    const difference = currentMonthAverage - previousMonthAverage;\n    \n    // Calculate how many units of 5 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym962 = (previous180Average, current180Average) => {\n    // Base odds ratio is 1.55 for every 5 μg/m³ increase over 180 days\n    const threshold = 5; // 5 μg/m³ threshold\n    const baseOddsRatio = 1.55;\n    \n    // Calculate the difference between 180-day periods\n    const difference = current180Average - previous180Average;\n    \n    // Calculate how many units of 5 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym963 = (previousYearAverage, currentYearAverage) => {\n    // Base odds ratio is 1.33 for every 5 μg/m³ increase over 365 days\n    const threshold = 5; // 5 μg/m³ threshold\n    const baseOddsRatio = 1.33;\n    \n    // Calculate the difference between yearly periods\n    const difference = currentYearAverage - previousYearAverage;\n    \n    // Calculate how many units of 5 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym964 = (previous4YearAverage, current4YearAverage) => {\n    // Base odds ratio is 1.29 for every 5 μg/m³ increase over 4 years\n    const threshold = 5; // 5 μg/m³ threshold\n    const baseOddsRatio = 1.29;\n    \n    // Calculate the difference between 4-year periods\n    const difference = current4YearAverage - previous4YearAverage;\n    \n    // Calculate how many units of 5 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym30 = (previousMonthAverage, currentMonthAverage) => {\n    // Base odds ratio is 1.49 for every 5 μg/m³ increase month over month\n    const threshold = 5; // 5 μg/m³ threshold\n    const baseOddsRatio = 1.49;\n    \n    // Calculate the difference between months\n    const difference = currentMonthAverage - previousMonthAverage;\n    \n    // Calculate how many units of 5 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 5 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym00 = (previousMonthAverage, currentMonthAverage) => {\n    // Base odds ratio is 1.12 for every 10 μg/m³ increase month over month\n    const threshold = 10; // 10 μg/m³ threshold\n    const baseOddsRatio = 1.12;\n    \n    // Calculate the difference between months\n    const difference = currentMonthAverage - previousMonthAverage;\n    \n    // Calculate how many units of 10 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxDis32 = (previousQuarterAverage, currentQuarterAverage) => {\n    // Base hazard ratio is 1.097 for every 1.13 μg/m³ increase quarter over quarter\n    const threshold = 1.13; // 1.13 μg/m³ threshold\n    const baseHazardRatio = 1.097;\n    \n    // Calculate the difference between quarters\n    const difference = currentQuarterAverage - previousQuarterAverage;\n    \n    // Calculate how many units of 1.13 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final hazard ratio (compound for each unit of 1.13 μg/m³)\n    const finalHazardRatio = units > 0 ? Math.pow(baseHazardRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        hazardRatio: finalHazardRatio.toFixed(3),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym001 = (previousQuarterAverage, currentQuarterAverage) => {\n    // Base odds ratio is 1.1 for every 10 μg/m³ increase quarter over quarter\n    const threshold = 10; // 10 μg/m³ threshold\n    const baseOddsRatio = 1.1;\n    \n    // Calculate the difference between quarters\n    const difference = currentQuarterAverage - previousQuarterAverage;\n    \n    // Calculate how many units of 10 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym002 = (previousSixMonthAverage, currentSixMonthAverage) => {\n    // Base odds ratio is 1.14 for every 10 μg/m³ increase per 6-month period\n    const threshold = 10; // 10 μg/m³ threshold\n    const baseOddsRatio = 1.14;\n    \n    // Calculate the difference between 6-month periods\n    const difference = currentSixMonthAverage - previousSixMonthAverage;\n    \n    // Calculate how many units of 10 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym003 = (previousYearAverage, currentYearAverage) => {\n    // Base odds ratio is 1.15 for every 10 μg/m³ increase per 12-month period\n    const threshold = 10; // 10 μg/m³ threshold\n    const baseOddsRatio = 1.15;\n    \n    // Calculate the difference between yearly periods\n    const difference = currentYearAverage - previousYearAverage;\n    \n    // Calculate how many units of 10 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 10 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst calculateAnxSym05 = (previousYearAverage, currentYearAverage) => {\n    // Base odds ratio is 1.14 for every 25 μg/m³ increase year over year\n    const threshold = 25; // 25 μg/m³ threshold\n    const baseOddsRatio = 1.14;\n    \n    // Calculate the difference between years\n    const difference = currentYearAverage - previousYearAverage;\n    \n    // Calculate how many units of 25 μg/m³ increase\n    const units = difference / threshold;\n    \n    // Calculate final odds ratio (compound for each unit of 25 μg/m³)\n    const finalOddsRatio = units > 0 ? Math.pow(baseOddsRatio, units) : 1;\n    \n    return {\n        difference: difference.toFixed(2),\n        oddsRatio: finalOddsRatio.toFixed(2),\n        increased: difference > 0\n    };\n};\n\nconst BrainHealthPM2_5 = ({ city = 'Toronto' }) => {\n    const [averages, setAverages] = useState({\n        week: { current: 0, previous: 0 },\n        month: { current: 0, previous: 0 },\n        sixMonth: { current: 0, previous: 0 },\n        year: { current: 0, previous: 0 },\n        fourYear: { current: 0, previous: 0 }\n    });\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [timeSeriesData, setTimeSeriesData] = useState(null);\n\n    // Data validation helper\n    const validateData = (data, period) => {\n        if (!data || data.length === 0) {\n            throw new Error(`No data available for ${period}`);\n        }\n        \n        const average = data.reduce((acc, val) => acc + (val.pm25 || 0), 0) / data.length;\n        if (isNaN(average)) {\n            throw new Error(`Invalid data for ${period}`);\n        }\n        \n        return average;\n    };\n\n    // Optimized data fetching\n    const fetchDataForPeriod = async (startDate, endDate) => {\n        const { data, error } = await supabase\n            .from('weather_data')\n            .select('pm25, created_at')\n            .eq('city', city)\n            .gte('created_at', startDate.toISOString())\n            .lte('created_at', endDate.toISOString())\n            .order('created_at', { ascending: true });\n\n        if (error) throw error;\n        return data;\n    };\n\n    const fetchAverages = async () => {\n        try {\n            setLoading(true);\n            setError(null);\n            const now = new Date();\n            \n            // Define time ranges with labels\n            const ranges = {\n                week: {\n                    label: '7-Day',\n                    current: [new Date(now - 7 * 24 * 60 * 60 * 1000), now],\n                    previous: [new Date(now - 14 * 24 * 60 * 60 * 1000), new Date(now - 7 * 24 * 60 * 60 * 1000)]\n                },\n                month: {\n                    label: '30-Day',\n                    current: [new Date(now - 30 * 24 * 60 * 60 * 1000), now],\n                    previous: [new Date(now - 60 * 24 * 60 * 60 * 1000), new Date(now - 30 * 24 * 60 * 60 * 1000)]\n                },\n                sixMonth: {\n                    label: '6-Month',\n                    current: [new Date(now - 180 * 24 * 60 * 60 * 1000), now],\n                    previous: [new Date(now - 360 * 24 * 60 * 60 * 1000), new Date(now - 180 * 24 * 60 * 60 * 1000)]\n                },\n                year: {\n                    label: '1-Year',\n                    current: [new Date(now - 365 * 24 * 60 * 60 * 1000), now],\n                    previous: [new Date(now - 730 * 24 * 60 * 60 * 1000), new Date(now - 365 * 24 * 60 * 60 * 1000)]\n                },\n                fourYear: {\n                    label: '4-Year',\n                    current: [new Date(now - 4 * 365 * 24 * 60 * 60 * 1000), now],\n                    previous: [new Date(now - 8 * 365 * 24 * 60 * 60 * 1000), new Date(now - 4 * 365 * 24 * 60 * 60 * 1000)]\n                }\n            };\n\n            const newAverages = {};\n            const timeSeriesPoints = [];\n\n            // Fetch and validate data for each period\n            for (const [period, range] of Object.entries(ranges)) {\n                try {\n                    const currentData = await fetchDataForPeriod(range.current[0], range.current[1]);\n                    const previousData = await fetchDataForPeriod(range.previous[0], range.previous[1]);\n\n                    newAverages[period] = {\n                        current: validateData(currentData, `current ${period}`),\n                        previous: validateData(previousData, `previous ${period}`),\n                        label: range.label\n                    };\n\n                    // Collect time series data\n                    timeSeriesPoints.push(...currentData.map(d => ({\n                        x: new Date(d.created_at),\n                        y: d.pm25\n                    })));\n                } catch (periodError) {\n                    console.error(`Error processing ${period}:`, periodError);\n                    newAverages[period] = {\n                        current: null,\n                        previous: null,\n                        label: range.label,\n                        error: periodError.message\n                    };\n                }\n            }\n\n            setAverages(newAverages);\n            setTimeSeriesData(timeSeriesPoints);\n\n        } catch (error) {\n            console.error('Error fetching averages:', error);\n            setError(error.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Chart configuration\n    const chartData = {\n        datasets: [{\n            label: 'PM2.5 Levels',\n            data: timeSeriesData,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n        }]\n    };\n\n    const chartOptions = {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'day'\n                },\n                title: {\n                    display: true,\n                    text: 'Date'\n                }\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: 'PM2.5 (μg/m³)'\n                }\n            }\n        },\n        plugins: {\n            title: {\n                display: true,\n                text: `PM2.5 Trends for ${city}`\n            }\n        }\n    };\n\n    useEffect(() => {\n        fetchAverages();\n    }, [city]);\n\n    if (loading) {\n        return (\n            <div className=\"loading-container\">\n                <div className=\"loading-spinner\"></div>\n                <p>Loading brain health calculations...</p>\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className=\"error-container\">\n                <h3>Error Loading Data</h3>\n                <p>{error}</p>\n                <button onClick={fetchAverages}>Retry</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"brain-health-calculator\">\n            <h2>PM2.5 Brain Health Analysis for {city}</h2>\n            \n            {/* Time Series Chart */}\n            <div className=\"chart-container\" style={{ height: '400px' }}>\n                <Line data={chartData} options={chartOptions} />\n            </div>\n\n            {/* Risk Calculations */}\n            {Object.entries(averages).map(([period, data]) => (\n                <div key={period} className=\"calculator-section\">\n                    <h3>{data.label} PM2.5 Anxiety Risk</h3>\n                    {data.error ? (\n                        <div className=\"error-message\">{data.error}</div>\n                    ) : (\n                        <div className=\"results\">\n                            <p>Previous Average: {data.previous?.toFixed(2) || 'N/A'} μg/m³</p>\n                            <p>Current Average: {data.current?.toFixed(2) || 'N/A'} μg/m³</p>\n                            {data.current && data.previous && (\n                                <>\n                                    <p>Change: {(data.current - data.previous).toFixed(2)} μg/m³</p>\n                                    <p>Risk Status: {\n                                        data.current > data.previous\n                                            ? 'Increased risk of anxiety symptoms'\n                                            : 'No increased risk'\n                                    }</p>\n                                </>\n                            )}\n                        </div>\n                    )}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default BrainHealthPM2_5; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}