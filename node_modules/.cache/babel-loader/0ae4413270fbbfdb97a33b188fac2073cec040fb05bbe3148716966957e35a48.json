{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/app.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Questionnaire from './Questionnaire';\nimport { supabase } from './supabaseClient';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-moment';\nimport './styles.css'; // Styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [user, setUser] = useState(null); // Get the logged-in user from Supabase\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [selectedCity, setSelectedCity] = useState('');\n  const [hasCompletedQuestionnaire, setHasCompletedQuestionnaire] = useState(false);\n  const [pm25Chart, setPm25Chart] = useState(null);\n  const [pm10Chart, setPm10Chart] = useState(null);\n  const [error, setError] = useState(null); // Define error state to store errors\n  const [loading, setLoading] = useState(true);\n\n  // Fetch the logged-in user information\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        setUser(user);\n        setLoading(false); // Set loading to false once user is fetched\n      } catch (error) {\n        setError('Error fetching user');\n        setLoading(false); // Set loading to false on error\n      }\n    };\n    fetchUser();\n  }, []);\n\n  // Helper function to update chart data\n  const updateChartData = (chart, labels, data) => {\n    if (!chart) return;\n    chart.data.labels = labels;\n    chart.data.datasets[0].data = data;\n    chart.update();\n  };\n\n  // Update chart data with adjustments\n  const updateChartsDataWithAdjustments = (pm25Multiplier, pm10Multiplier) => {\n    const cityData = airQualityData.filter(row => row.City === selectedCity);\n    const labels = cityData.map(row => row.Date);\n    const pm25Data = cityData.map(row => parseFloat(row['PM 2.5']) * pm25Multiplier);\n    const pm10Data = cityData.map(row => parseFloat(row['PM 10']) * pm10Multiplier);\n    if (pm25Chart) {\n      updateChartData(pm25Chart, labels, pm25Data);\n    }\n    if (pm10Chart) {\n      updateChartData(pm10Chart, labels, pm10Data);\n    }\n  };\n\n  // Apply adjustments based on user preferences\n  const applyAdjustments = (hasHVAC, hasEcologgica) => {\n    let pm25Multiplier = 1,\n      pm10Multiplier = 1;\n    if (hasHVAC) pm25Multiplier -= 0.40;\n    if (hasEcologgica) {\n      pm25Multiplier -= 0.25;\n      pm10Multiplier -= 0.25;\n    }\n    updateChartsDataWithAdjustments(pm25Multiplier, pm10Multiplier);\n  };\n\n  // Fetch user preferences to check if they've completed the questionnaire\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      if (!user) return;\n      try {\n        const {\n          data\n        } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n        if (data) {\n          setHasCompletedQuestionnaire(true);\n          setSelectedCity(data.city);\n          applyAdjustments(data.has_HVAC, data.has_ecologgica);\n        } else {\n          setHasCompletedQuestionnaire(false);\n        }\n      } catch (error) {\n        setError('Error fetching preferences');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserPreferences();\n  }, [user]);\n\n  // Fetch air quality data and initialize charts\n  useEffect(() => {\n    if (!hasCompletedQuestionnaire) return;\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`Error fetching air quality data: ${response.statusText}`);\n        }\n        const data = await response.json();\n        setAirQualityData(data);\n        initCharts(data);\n      } catch (error) {\n        setError(\"Error fetching air quality data\");\n      }\n    };\n    fetchAirQualityData();\n  }, [hasCompletedQuestionnaire]);\n\n  // Initialize charts for PM 2.5 and PM 10\n  const initCharts = data => {\n    const ctx25 = document.getElementById('pm25Chart').getContext('2d');\n    const ctx10 = document.getElementById('pm10Chart').getContext('2d');\n    const cityData = data.filter(row => row.City === selectedCity);\n    const labels = cityData.map(row => row.Date);\n    const pm25Data = cityData.map(row => row['PM 2.5']);\n    const pm10Data = cityData.map(row => row['PM 10']);\n    const newPm25Chart = new Chart(ctx25, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'PM 2.5',\n          data: pm25Data,\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'day'\n            },\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'µg/m³'\n            }\n          }\n        }\n      }\n    });\n    const newPm10Chart = new Chart(ctx10, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'PM 10',\n          data: pm10Data,\n          borderColor: 'rgb(255, 99, 132)',\n          tension: 0.1\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'day'\n            },\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'µg/m³'\n            }\n          }\n        }\n      }\n    });\n    setPm25Chart(newPm25Chart);\n    setPm10Chart(newPm10Chart);\n  };\n\n  // Handle city change from dropdown\n  const handleCityChange = event => {\n    const city = event.target.value;\n    setSelectedCity(city);\n    updateChartsDataWithAdjustments(1, 1);\n  };\n\n  // Return statement should be inside the App function\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }, this), hasCompletedQuestionnaire ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Air Quality Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upper-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"city-select\",\n            children: \"Select City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"city-select\",\n            value: selectedCity,\n            onChange: handleCityChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this), [...new Set(airQualityData.map(row => row.City))].map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: city,\n              children: city\n            }, city, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Key Data Points\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"City: \", selectedCity]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"PM 2.5 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"pm25Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"PM 10 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"pm10Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Questionnaire, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"iRruCyZ0K64Cv2Hi0fbRLP5IBO8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Questionnaire","supabase","Chart","jsxDEV","_jsxDEV","App","_s","user","setUser","airQualityData","setAirQualityData","selectedCity","setSelectedCity","hasCompletedQuestionnaire","setHasCompletedQuestionnaire","pm25Chart","setPm25Chart","pm10Chart","setPm10Chart","error","setError","loading","setLoading","fetchUser","data","auth","getUser","updateChartData","chart","labels","datasets","update","updateChartsDataWithAdjustments","pm25Multiplier","pm10Multiplier","cityData","filter","row","City","map","Date","pm25Data","parseFloat","pm10Data","applyAdjustments","hasHVAC","hasEcologgica","fetchUserPreferences","from","select","eq","id","single","city","has_HVAC","has_ecologgica","fetchAirQualityData","response","fetch","ok","Error","statusText","json","initCharts","ctx25","document","getElementById","getContext","ctx10","newPm25Chart","type","label","borderColor","tension","options","scales","x","time","unit","title","display","text","y","beginAtZero","newPm10Chart","handleCityChange","event","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","Set","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/app.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Questionnaire from './Questionnaire';\nimport { supabase } from './supabaseClient';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-moment';\nimport './styles.css'; // Styling\n\nconst App = () => {\n  const [user, setUser] = useState(null);  // Get the logged-in user from Supabase\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [selectedCity, setSelectedCity] = useState('');\n  const [hasCompletedQuestionnaire, setHasCompletedQuestionnaire] = useState(false);\n  const [pm25Chart, setPm25Chart] = useState(null);\n  const [pm10Chart, setPm10Chart] = useState(null);\n  const [error, setError] = useState(null);  // Define error state to store errors\n  const [loading, setLoading] = useState(true);\n\n  // Fetch the logged-in user information\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        setUser(user);\n        setLoading(false); // Set loading to false once user is fetched\n      } catch (error) {\n        setError('Error fetching user');\n        setLoading(false);  // Set loading to false on error\n      }\n    };\n    fetchUser();\n  }, []);\n\n  // Helper function to update chart data\n  const updateChartData = (chart, labels, data) => {\n    if (!chart) return;\n    chart.data.labels = labels;\n    chart.data.datasets[0].data = data;\n    chart.update();\n  };\n\n  // Update chart data with adjustments\n  const updateChartsDataWithAdjustments = (pm25Multiplier, pm10Multiplier) => {\n    const cityData = airQualityData.filter(row => row.City === selectedCity);\n    const labels = cityData.map(row => row.Date);\n    const pm25Data = cityData.map(row => parseFloat(row['PM 2.5']) * pm25Multiplier);\n    const pm10Data = cityData.map(row => parseFloat(row['PM 10']) * pm10Multiplier);\n\n    if (pm25Chart) {\n      updateChartData(pm25Chart, labels, pm25Data);\n    }\n\n    if (pm10Chart) {\n      updateChartData(pm10Chart, labels, pm10Data);\n    }\n  };\n\n  // Apply adjustments based on user preferences\n  const applyAdjustments = (hasHVAC, hasEcologgica) => {\n    let pm25Multiplier = 1, pm10Multiplier = 1;\n\n    if (hasHVAC) pm25Multiplier -= 0.40;\n    if (hasEcologgica) {\n      pm25Multiplier -= 0.25;\n      pm10Multiplier -= 0.25;\n    }\n\n    updateChartsDataWithAdjustments(pm25Multiplier, pm10Multiplier);\n  };\n\n  // Fetch user preferences to check if they've completed the questionnaire\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      if (!user) return;\n      try {\n        const { data } = await supabase\n          .from('user_preferences')\n          .select('*')\n          .eq('user_id', user.id)\n          .single();\n\n        if (data) {\n          setHasCompletedQuestionnaire(true);\n          setSelectedCity(data.city);\n          applyAdjustments(data.has_HVAC, data.has_ecologgica);\n        } else {\n          setHasCompletedQuestionnaire(false);\n        }\n      } catch (error) {\n        setError('Error fetching preferences');\n      } finally {\n        setLoading(false); \n      }\n    };\n    fetchUserPreferences();\n  }, [user]);\n\n  // Fetch air quality data and initialize charts\n  useEffect(() => {\n    if (!hasCompletedQuestionnaire) return;\n\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`Error fetching air quality data: ${response.statusText}`);\n        }\n        const data = await response.json();\n        setAirQualityData(data);\n        initCharts(data);\n      } catch (error) {\n        setError(\"Error fetching air quality data\");\n      }\n    };\n    fetchAirQualityData();\n  }, [hasCompletedQuestionnaire]);\n\n  // Initialize charts for PM 2.5 and PM 10\n  const initCharts = (data) => {\n    const ctx25 = document.getElementById('pm25Chart').getContext('2d');\n    const ctx10 = document.getElementById('pm10Chart').getContext('2d');\n\n    const cityData = data.filter(row => row.City === selectedCity);\n    const labels = cityData.map(row => row.Date);\n    const pm25Data = cityData.map(row => row['PM 2.5']);\n    const pm10Data = cityData.map(row => row['PM 10']);\n\n    const newPm25Chart = new Chart(ctx25, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{ \n          label: 'PM 2.5', \n          data: pm25Data, \n          borderColor: 'rgb(75, 192, 192)', \n          tension: 0.1 \n        }],\n      },\n      options: {\n        scales: {\n          x: { \n            type: 'time', \n            time: {\n              unit: 'day'\n            },\n            title: { display: true, text: 'Date' }\n          },\n          y: { beginAtZero: true, title: { display: true, text: 'µg/m³' } }\n        }\n      }\n    });\n    \n    const newPm10Chart = new Chart(ctx10, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{ \n          label: 'PM 10', \n          data: pm10Data, \n          borderColor: 'rgb(255, 99, 132)', \n          tension: 0.1 \n        }],\n      },\n      options: {\n        scales: {\n          x: { \n            type: 'time',\n            time: {\n              unit: 'day'\n            },\n            title: { display: true, text: 'Date' }\n          },\n          y: { beginAtZero: true, title: { display: true, text: 'µg/m³' } }\n        }\n      }\n    });\n    \n    setPm25Chart(newPm25Chart);\n    setPm10Chart(newPm10Chart);\n  };\n\n  // Handle city change from dropdown\n  const handleCityChange = (event) => {\n    const city = event.target.value;\n    setSelectedCity(city);\n    updateChartsDataWithAdjustments(1, 1); \n  };\n\n  // Return statement should be inside the App function\n  return (\n    <div className=\"dashboard-container\">\n      {error && <p className=\"error-message\">{error}</p>}\n      {hasCompletedQuestionnaire ? (\n        <div className=\"dashboard\">\n          <h1>Air Quality Dashboard</h1>\n          <div className=\"upper-section\">\n            <div className=\"left-box\">\n              <label htmlFor=\"city-select\">Select City</label>\n              <select id=\"city-select\" value={selectedCity} onChange={handleCityChange}>\n                <option value=\"\">Select a City</option>\n                {[...new Set(airQualityData.map(row => row.City))].map(city => (\n                  <option key={city} value={city}>{city}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"right-box\">\n              <h2>Key Data Points</h2>\n              <ul>\n                <li>City: {selectedCity}</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"chart-section\">\n            <div className=\"chart-container\">\n              <h3>PM 2.5 Levels</h3>\n              <canvas id=\"pm25Chart\"></canvas>\n            </div>\n            <div className=\"chart-container\">\n              <h3>PM 10 Levels</h3>\n              <canvas id=\"pm10Chart\"></canvas>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <Questionnaire user={user} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}