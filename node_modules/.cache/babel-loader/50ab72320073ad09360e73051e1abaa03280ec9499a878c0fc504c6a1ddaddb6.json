{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/app.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Questionnaire from './Questionnaire';\nimport { supabase } from './supabaseClient';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [user, setUser] = useState(null); // Get the logged-in user from Supabase\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [selectedCity, setSelectedCity] = useState('');\n  const [hasCompletedQuestionnaire, setHasCompletedQuestionnaire] = useState(false);\n  const [pm25Chart, setPm25Chart] = useState(null);\n  const [pm10Chart, setPm10Chart] = useState(null);\n  const [keyDataPoints, setKeyDataPoints] = useState([]);\n  const [error, setError] = useState(null); // <-- Define error state to store errors\n\n  const cityOptions = ['Toronto', 'New York', 'San Francisco', 'Dallas', 'Boston', 'Miami', 'Houston']; // Cities dropdown options\n\n  // 1. Fetch the logged-in user information\n  useEffect(() => {\n    const fetchUser = async () => {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      setUser(user);\n    };\n    fetchUser();\n  }, []);\n\n  // Fetch user preferences to check if they've completed the questionnaire\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      if (!user) return;\n      const {\n        data,\n        error\n      } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n      if (data) {\n        setHasCompletedQuestionnaire(true); // If preferences exist, they have completed the questionnaire\n        setSelectedCity(data.city); // Set default city\n        applyAdjustments(data.has_HVAC, data.has_ecologgica); // Apply PM 2.5/10 adjustments\n      } else {\n        setHasCompletedQuestionnaire(false); // No preferences, show questionnaire\n      }\n    };\n    fetchUserPreferences();\n  }, [user]);\n\n  // Fetch air quality data and initialize charts\n  useEffect(() => {\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`Error fetching air quality data: ${response.statusText}`);\n        }\n        const data = await response.json();\n        console.log('Air Quality Data:', data); // Log the fetched data to see if it's coming through\n        setAirQualityData(data);\n      } catch (error) {\n        console.error(\"Error fetching air quality data:\", error);\n        setError(\"Error fetching air quality data\");\n      }\n    };\n    fetchAirQualityData();\n  }, [hasCompletedQuestionnaire]);\n\n  // Initialize charts for PM 2.5 and PM 10\n  const initCharts = () => {\n    const ctx25 = document.getElementById('pm25Chart').getContext('2d');\n    const ctx10 = document.getElementById('pm10Chart').getContext('2d');\n    const newPm25Chart = new Chart(ctx25, {\n      type: 'line',\n      data: {\n        labels: [],\n        datasets: [{\n          label: 'PM 2.5',\n          data: [],\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'µg/m³'\n            }\n          }\n        }\n      }\n    });\n    const newPm10Chart = new Chart(ctx10, {\n      type: 'line',\n      data: {\n        labels: [],\n        datasets: [{\n          label: 'PM 10',\n          data: [],\n          borderColor: 'rgb(255, 99, 132)',\n          tension: 0.1\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'µg/m³'\n            }\n          }\n        }\n      }\n    });\n    setPm25Chart(newPm25Chart);\n    setPm10Chart(newPm10Chart);\n  };\n\n  // Apply PM 2.5 and PM 10 adjustments based on user preferences\n  const applyAdjustments = (hasHVAC, hasEcologgica) => {\n    let pm25Multiplier = 1,\n      pm10Multiplier = 1;\n    if (hasHVAC) pm25Multiplier -= 0.40; // Reduce PM 2.5 by 40%\n    if (hasEcologgica) {\n      pm25Multiplier -= 0.25; // Reduce PM 2.5 by 25%\n      pm10Multiplier -= 0.25; // Reduce PM 10 by 25%\n    }\n    updateChartsDataWithAdjustments(pm25Multiplier, pm10Multiplier);\n  };\n\n  // Update chart data with adjustments\n  const updateChartsDataWithAdjustments = (pm25Multiplier, pm10Multiplier) => {\n    const cityData = airQualityData.filter(row => row.City === selectedCity);\n    const labels = cityData.map(row => row.Date);\n    const pm25Data = cityData.map(row => parseFloat(row['PM 2.5']) * pm25Multiplier);\n    const pm10Data = cityData.map(row => parseFloat(row['PM 10']) * pm10Multiplier);\n    updateChartData(pm25Chart, labels, pm25Data);\n    updateChartData(pm10Chart, labels, pm10Data);\n  };\n\n  // Helper function to update chart data\n  const updateChartData = (chart, labels, data) => {\n    if (!chart) return;\n    chart.data.labels = labels;\n    chart.data.datasets[0].data = data;\n    chart.update();\n  };\n\n  // Handle city change from dropdown\n  const handleCityChange = event => {\n    const city = event.target.value;\n    setSelectedCity(city);\n    updateChartsDataWithAdjustments(1, 1); // Reset any adjustments on city change\n  };\n\n  // Render either the questionnaire or the dashboard based on the state\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: hasCompletedQuestionnaire ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Air Quality Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upper-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-box\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedCity,\n            onChange: handleCityChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this), [...new Set(airQualityData.map(row => row.City))].map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: city,\n              children: city\n            }, city, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Key Data Points\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"City: \", selectedCity]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"PM 2.5 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"pm25Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"PM 10 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"pm10Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Questionnaire, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"NQDIML9pblH2g6jQGDU/ZZrdKlY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Questionnaire","supabase","Chart","jsxDEV","_jsxDEV","App","_s","user","setUser","airQualityData","setAirQualityData","selectedCity","setSelectedCity","hasCompletedQuestionnaire","setHasCompletedQuestionnaire","pm25Chart","setPm25Chart","pm10Chart","setPm10Chart","keyDataPoints","setKeyDataPoints","error","setError","cityOptions","fetchUser","data","auth","getUser","fetchUserPreferences","from","select","eq","id","single","city","applyAdjustments","has_HVAC","has_ecologgica","fetchAirQualityData","response","fetch","ok","Error","statusText","json","console","log","initCharts","ctx25","document","getElementById","getContext","ctx10","newPm25Chart","type","labels","datasets","label","borderColor","tension","options","scales","x","title","display","text","y","beginAtZero","newPm10Chart","hasHVAC","hasEcologgica","pm25Multiplier","pm10Multiplier","updateChartsDataWithAdjustments","cityData","filter","row","City","map","Date","pm25Data","parseFloat","pm10Data","updateChartData","chart","update","handleCityChange","event","target","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onChange","Set","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/app.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Questionnaire from './Questionnaire';\nimport { supabase } from './supabaseClient';\nimport Chart from 'chart.js/auto';\n\nconst App = () => {\n  const [user, setUser] = useState(null);  // Get the logged-in user from Supabase\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [selectedCity, setSelectedCity] = useState('');\n  const [hasCompletedQuestionnaire, setHasCompletedQuestionnaire] = useState(false);\n  const [pm25Chart, setPm25Chart] = useState(null);\n  const [pm10Chart, setPm10Chart] = useState(null);\n  const [keyDataPoints, setKeyDataPoints] = useState([]);\n  const [error, setError] = useState(null);  // <-- Define error state to store errors\n\n  const cityOptions = ['Toronto', 'New York', 'San Francisco', 'Dallas', 'Boston', 'Miami', 'Houston'];  // Cities dropdown options\n\n\n    // 1. Fetch the logged-in user information\n    useEffect(() => {\n        const fetchUser = async () => {\n          const { data: { user } } = await supabase.auth.getUser();\n          setUser(user);\n        };\n    \n        fetchUser();\n      }, []);\n\n  // Fetch user preferences to check if they've completed the questionnaire\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      if (!user) return;\n      const { data, error } = await supabase\n        .from('user_preferences')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n      \n      if (data) {\n        setHasCompletedQuestionnaire(true); // If preferences exist, they have completed the questionnaire\n        setSelectedCity(data.city);         // Set default city\n        applyAdjustments(data.has_HVAC, data.has_ecologgica);  // Apply PM 2.5/10 adjustments\n      } else {\n        setHasCompletedQuestionnaire(false); // No preferences, show questionnaire\n      }\n    };\n\n    fetchUserPreferences();\n  }, [user]);\n\n  // Fetch air quality data and initialize charts\n  useEffect(() => {\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`Error fetching air quality data: ${response.statusText}`);\n        }\n        const data = await response.json();\n        console.log('Air Quality Data:', data); // Log the fetched data to see if it's coming through\n        setAirQualityData(data);\n      } catch (error) {\n        console.error(\"Error fetching air quality data:\", error);\n        setError(\"Error fetching air quality data\");\n      }\n    };\n  \n    fetchAirQualityData();\n  }, [hasCompletedQuestionnaire]);\n\n  // Initialize charts for PM 2.5 and PM 10\n  const initCharts = () => {\n    const ctx25 = document.getElementById('pm25Chart').getContext('2d');\n    const ctx10 = document.getElementById('pm10Chart').getContext('2d');\n\n    const newPm25Chart = new Chart(ctx25, {\n      type: 'line',\n      data: { labels: [], datasets: [{ label: 'PM 2.5', data: [], borderColor: 'rgb(75, 192, 192)', tension: 0.1 }] },\n      options: { scales: { x: { type: 'time', title: { display: true, text: 'Date' } }, y: { beginAtZero: true, title: { display: true, text: 'µg/m³' } } } }\n    });\n\n    const newPm10Chart = new Chart(ctx10, {\n      type: 'line',\n      data: { labels: [], datasets: [{ label: 'PM 10', data: [], borderColor: 'rgb(255, 99, 132)', tension: 0.1 }] },\n      options: { scales: { x: { type: 'time', title: { display: true, text: 'Date' } }, y: { beginAtZero: true, title: { display: true, text: 'µg/m³' } } } }\n    });\n\n    setPm25Chart(newPm25Chart);\n    setPm10Chart(newPm10Chart);\n  };\n\n  // Apply PM 2.5 and PM 10 adjustments based on user preferences\n  const applyAdjustments = (hasHVAC, hasEcologgica) => {\n    let pm25Multiplier = 1, pm10Multiplier = 1;\n    if (hasHVAC) pm25Multiplier -= 0.40;  // Reduce PM 2.5 by 40%\n    if (hasEcologgica) {\n      pm25Multiplier -= 0.25;  // Reduce PM 2.5 by 25%\n      pm10Multiplier -= 0.25;  // Reduce PM 10 by 25%\n    }\n    updateChartsDataWithAdjustments(pm25Multiplier, pm10Multiplier);\n  };\n\n  // Update chart data with adjustments\n  const updateChartsDataWithAdjustments = (pm25Multiplier, pm10Multiplier) => {\n    const cityData = airQualityData.filter(row => row.City === selectedCity);\n    const labels = cityData.map(row => row.Date);\n    const pm25Data = cityData.map(row => parseFloat(row['PM 2.5']) * pm25Multiplier);\n    const pm10Data = cityData.map(row => parseFloat(row['PM 10']) * pm10Multiplier);\n\n    updateChartData(pm25Chart, labels, pm25Data);\n    updateChartData(pm10Chart, labels, pm10Data);\n  };\n\n  // Helper function to update chart data\n  const updateChartData = (chart, labels, data) => {\n    if (!chart) return;\n    chart.data.labels = labels;\n    chart.data.datasets[0].data = data;\n    chart.update();\n  };\n\n  // Handle city change from dropdown\n  const handleCityChange = (event) => {\n    const city = event.target.value;\n    setSelectedCity(city);\n    updateChartsDataWithAdjustments(1, 1);  // Reset any adjustments on city change\n  };\n\n  // Render either the questionnaire or the dashboard based on the state\n  return (\n    <div>\n      {hasCompletedQuestionnaire ? (\n        <div className=\"dashboard\">\n          <h1>Air Quality Dashboard</h1>\n          <div className=\"upper-section\">\n            <div className=\"left-box\">\n              <select value={selectedCity} onChange={handleCityChange}>\n                <option value=\"\">Select a City</option>\n                {[...new Set(airQualityData.map(row => row.City))].map(city => (\n                  <option key={city} value={city}>{city}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"right-box\">\n              <h2>Key Data Points</h2>\n              <ul>\n                <li>City: {selectedCity}</li>\n                {/* Add other key data points as needed */}\n              </ul>\n            </div>\n          </div>\n          <div className=\"chart-section\">\n            <div className=\"chart-container\">\n              <h3>PM 2.5 Levels</h3>\n              <canvas id=\"pm25Chart\"></canvas>\n            </div>\n            <div className=\"chart-container\">\n              <h3>PM 10 Levels</h3>\n              <canvas id=\"pm10Chart\"></canvas>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <Questionnaire user={user} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}