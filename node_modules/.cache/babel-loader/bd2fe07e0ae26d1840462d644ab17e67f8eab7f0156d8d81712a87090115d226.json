{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/components/charts/CityComparisonChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { supabase } from '../../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityComparisonChart = ({\n  userPreferences\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [cities, setCities] = useState([]);\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from('user_preferences').select('city').distinct();\n        if (error) throw error;\n        setCities(data.map(item => item.city));\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    };\n    fetchCities();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch data for all cities\n        const {\n          data,\n          error\n        } = await supabase.from('weather_data').select('*').in('city', cities).order('created_at', {\n          ascending: false\n        }).limit(60 * cities.length); // Adjust limit based on number of cities\n\n        if (error) throw error;\n\n        // Process data for each city\n        const cityDatasets = cities.map((city, index) => {\n          const cityData = data.filter(item => item.city === city);\n          const colors = ['rgb(0, 100, 0)', 'rgb(144, 238, 144)', 'rgb(34, 139, 34)', 'rgb(60, 179, 113)'];\n          return {\n            label: city,\n            data: cityData.map(item => ({\n              x: new Date(item.created_at),\n              y: item.pm25 // Using PM2.5 for city comparison\n            })),\n            borderColor: colors[index % colors.length],\n            backgroundColor: colors[index % colors.length].replace('rgb', 'rgba').replace(')', ', 0.1)'),\n            borderWidth: 2,\n            tension: 0.1\n          };\n        });\n        setChartData({\n          datasets: cityDatasets\n        });\n      } catch (error) {\n        console.error('Error fetching comparison data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (cities.length > 0) {\n      fetchData();\n    }\n  }, [cities]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 25\n  }, this);\n  if (!chartData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No comparison data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 26\n  }, this);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'PM2.5 μg/m³'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: true,\n        position: 'bottom'\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(CityComparisonChart, \"taiNkbKp6ycIFIcE2MugY3Prv8M=\");\n_c = CityComparisonChart;\nexport default CityComparisonChart;\nvar _c;\n$RefreshReg$(_c, \"CityComparisonChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","supabase","jsxDEV","_jsxDEV","CityComparisonChart","userPreferences","_s","chartData","setChartData","isLoading","setIsLoading","cities","setCities","fetchCities","data","error","from","select","distinct","map","item","city","console","fetchData","in","order","ascending","limit","length","cityDatasets","index","cityData","filter","colors","label","x","Date","created_at","y","pm25","borderColor","backgroundColor","replace","borderWidth","tension","datasets","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","scales","type","time","unit","displayFormats","day","title","display","text","beginAtZero","plugins","legend","position","tooltip","mode","intersect","style","height","width","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/components/charts/CityComparisonChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { supabase } from '../../supabaseClient';\n\nconst CityComparisonChart = ({ userPreferences }) => {\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [cities, setCities] = useState([]);\n\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('user_preferences')\n          .select('city')\n          .distinct();\n\n        if (error) throw error;\n        setCities(data.map(item => item.city));\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    };\n\n    fetchCities();\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch data for all cities\n        const { data, error } = await supabase\n          .from('weather_data')\n          .select('*')\n          .in('city', cities)\n          .order('created_at', { ascending: false })\n          .limit(60 * cities.length); // Adjust limit based on number of cities\n\n        if (error) throw error;\n\n        // Process data for each city\n        const cityDatasets = cities.map((city, index) => {\n          const cityData = data.filter(item => item.city === city);\n          const colors = [\n            'rgb(0, 100, 0)',\n            'rgb(144, 238, 144)',\n            'rgb(34, 139, 34)',\n            'rgb(60, 179, 113)'\n          ];\n\n          return {\n            label: city,\n            data: cityData.map(item => ({\n              x: new Date(item.created_at),\n              y: item.pm25 // Using PM2.5 for city comparison\n            })),\n            borderColor: colors[index % colors.length],\n            backgroundColor: colors[index % colors.length].replace('rgb', 'rgba').replace(')', ', 0.1)'),\n            borderWidth: 2,\n            tension: 0.1\n          };\n        });\n\n        setChartData({\n          datasets: cityDatasets\n        });\n      } catch (error) {\n        console.error('Error fetching comparison data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (cities.length > 0) {\n      fetchData();\n    }\n  }, [cities]);\n\n  if (isLoading) return <div>Loading...</div>;\n  if (!chartData) return <div>No comparison data available</div>;\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'PM2.5 μg/m³'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: true,\n        position: 'bottom'\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false\n      }\n    }\n  };\n\n  return (\n    <div style={{ height: '400px', width: '100%' }}>\n      <Line data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default CityComparisonChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}