{"ast":null,"code":"const API_KEY = '3f8a4d2a8875fb203575175662bb64d7';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\nconst cities = ['Toronto', 'San Francisco', 'New York', 'Dallas', 'Boston', 'Miami', 'Houston'];\nconst fetchCityData = async city => {\n  try {\n    // Get coordinates first\n    const geoResponse = await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`);\n    const [geoData] = await geoResponse.json();\n    if (!geoData) {\n      throw new Error(`No location data found for ${city}`);\n    }\n\n    // Fetch both air quality and weather data\n    const [airData, weatherData] = await Promise.all([fetch(`${BASE_URL}/air_pollution?lat=${geoData.lat}&lon=${geoData.lon}&appid=${API_KEY}`).then(res => res.json()), fetch(`${BASE_URL}/weather?lat=${geoData.lat}&lon=${geoData.lon}&units=metric&appid=${API_KEY}`).then(res => res.json())]);\n\n    // Format data to match your existing structure\n    return {\n      date: new Date().toISOString(),\n      city: city,\n      temp: weatherData.main.temp,\n      'PM 2.5': airData.list[0].components.pm2_5,\n      'PM 10': airData.list[0].components.pm10,\n      airQuality: getAirQualityLabel(airData.list[0].main.aqi)\n    };\n  } catch (error) {\n    console.error(`Error fetching data for ${city}:`, error);\n    return null;\n  }\n};\nconst getAirQualityLabel = aqi => {\n  const labels = {\n    1: 'Good',\n    2: 'Fair',\n    3: 'Moderate',\n    4: 'Poor',\n    5: 'Very Poor'\n  };\n  return labels[aqi] || 'Unknown';\n};\nexport const fetchAllCitiesData = async () => {\n  console.log('Fetching data for all cities...');\n  const results = await Promise.all(cities.map(city => fetchCityData(city)));\n  const validResults = results.filter(result => result !== null);\n  console.log('Fetched data:', validResults);\n  return validResults;\n};","map":{"version":3,"names":["API_KEY","BASE_URL","cities","fetchCityData","city","geoResponse","fetch","geoData","json","Error","airData","weatherData","Promise","all","lat","lon","then","res","date","Date","toISOString","temp","main","list","components","pm2_5","pm10","airQuality","getAirQualityLabel","aqi","error","console","labels","fetchAllCitiesData","log","results","map","validResults","filter","result"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/services/weatherService.js"],"sourcesContent":["const API_KEY = '3f8a4d2a8875fb203575175662bb64d7';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\nconst cities = [\n  'Toronto',\n  'San Francisco',\n  'New York',\n  'Dallas', \n  'Boston',\n  'Miami',\n  'Houston'\n];\n\nconst fetchCityData = async (city) => {\n  try {\n    // Get coordinates first\n    const geoResponse = await fetch(\n      `http://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`\n    );\n    const [geoData] = await geoResponse.json();\n    \n    if (!geoData) {\n      throw new Error(`No location data found for ${city}`);\n    }\n\n    // Fetch both air quality and weather data\n    const [airData, weatherData] = await Promise.all([\n      fetch(`${BASE_URL}/air_pollution?lat=${geoData.lat}&lon=${geoData.lon}&appid=${API_KEY}`)\n        .then(res => res.json()),\n      fetch(`${BASE_URL}/weather?lat=${geoData.lat}&lon=${geoData.lon}&units=metric&appid=${API_KEY}`)\n        .then(res => res.json())\n    ]);\n\n    // Format data to match your existing structure\n    return {\n      date: new Date().toISOString(),\n      city: city,\n      temp: weatherData.main.temp,\n      'PM 2.5': airData.list[0].components.pm2_5,\n      'PM 10': airData.list[0].components.pm10,\n      airQuality: getAirQualityLabel(airData.list[0].main.aqi)\n    };\n  } catch (error) {\n    console.error(`Error fetching data for ${city}:`, error);\n    return null;\n  }\n};\n\nconst getAirQualityLabel = (aqi) => {\n  const labels = {\n    1: 'Good',\n    2: 'Fair',\n    3: 'Moderate',\n    4: 'Poor',\n    5: 'Very Poor'\n  };\n  return labels[aqi] || 'Unknown';\n};\n\nexport const fetchAllCitiesData = async () => {\n  console.log('Fetching data for all cities...');\n  const results = await Promise.all(\n    cities.map(city => fetchCityData(city))\n  );\n  const validResults = results.filter(result => result !== null);\n  console.log('Fetched data:', validResults);\n  return validResults;\n}; "],"mappings":"AAAA,MAAMA,OAAO,GAAG,kCAAkC;AAClD,MAAMC,QAAQ,GAAG,yCAAyC;AAE1D,MAAMC,MAAM,GAAG,CACb,SAAS,EACT,eAAe,EACf,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,SAAS,CACV;AAED,MAAMC,aAAa,GAAG,MAAOC,IAAI,IAAK;EACpC,IAAI;IACF;IACA,MAAMC,WAAW,GAAG,MAAMC,KAAK,CAC7B,kDAAkDF,IAAI,kBAAkBJ,OAAO,EACjF,CAAC;IACD,MAAM,CAACO,OAAO,CAAC,GAAG,MAAMF,WAAW,CAACG,IAAI,CAAC,CAAC;IAE1C,IAAI,CAACD,OAAO,EAAE;MACZ,MAAM,IAAIE,KAAK,CAAC,8BAA8BL,IAAI,EAAE,CAAC;IACvD;;IAEA;IACA,MAAM,CAACM,OAAO,EAAEC,WAAW,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC/CP,KAAK,CAAC,GAAGL,QAAQ,sBAAsBM,OAAO,CAACO,GAAG,QAAQP,OAAO,CAACQ,GAAG,UAAUf,OAAO,EAAE,CAAC,CACtFgB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACT,IAAI,CAAC,CAAC,CAAC,EAC1BF,KAAK,CAAC,GAAGL,QAAQ,gBAAgBM,OAAO,CAACO,GAAG,QAAQP,OAAO,CAACQ,GAAG,uBAAuBf,OAAO,EAAE,CAAC,CAC7FgB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACT,IAAI,CAAC,CAAC,CAAC,CAC3B,CAAC;;IAEF;IACA,OAAO;MACLU,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC9BhB,IAAI,EAAEA,IAAI;MACViB,IAAI,EAAEV,WAAW,CAACW,IAAI,CAACD,IAAI;MAC3B,QAAQ,EAAEX,OAAO,CAACa,IAAI,CAAC,CAAC,CAAC,CAACC,UAAU,CAACC,KAAK;MAC1C,OAAO,EAAEf,OAAO,CAACa,IAAI,CAAC,CAAC,CAAC,CAACC,UAAU,CAACE,IAAI;MACxCC,UAAU,EAAEC,kBAAkB,CAAClB,OAAO,CAACa,IAAI,CAAC,CAAC,CAAC,CAACD,IAAI,CAACO,GAAG;IACzD,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B1B,IAAI,GAAG,EAAE0B,KAAK,CAAC;IACxD,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAMF,kBAAkB,GAAIC,GAAG,IAAK;EAClC,MAAMG,MAAM,GAAG;IACb,CAAC,EAAE,MAAM;IACT,CAAC,EAAE,MAAM;IACT,CAAC,EAAE,UAAU;IACb,CAAC,EAAE,MAAM;IACT,CAAC,EAAE;EACL,CAAC;EACD,OAAOA,MAAM,CAACH,GAAG,CAAC,IAAI,SAAS;AACjC,CAAC;AAED,OAAO,MAAMI,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5CF,OAAO,CAACG,GAAG,CAAC,iCAAiC,CAAC;EAC9C,MAAMC,OAAO,GAAG,MAAMvB,OAAO,CAACC,GAAG,CAC/BX,MAAM,CAACkC,GAAG,CAAChC,IAAI,IAAID,aAAa,CAACC,IAAI,CAAC,CACxC,CAAC;EACD,MAAMiC,YAAY,GAAGF,OAAO,CAACG,MAAM,CAACC,MAAM,IAAIA,MAAM,KAAK,IAAI,CAAC;EAC9DR,OAAO,CAACG,GAAG,CAAC,eAAe,EAAEG,YAAY,CAAC;EAC1C,OAAOA,YAAY;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}