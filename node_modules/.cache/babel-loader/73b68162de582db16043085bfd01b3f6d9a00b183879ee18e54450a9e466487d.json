{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/charts/PM25Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { supabase } from '../../supabaseClient';\nimport ChartLegend from './ChartLegend';\nimport { calculateIndoorWithDevices } from '../../utils/airQualityCalculations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\n\n// Helper function to aggregate data points by day\nconst aggregateDataByDay = data => {\n  const aggregatedData = {};\n  data.forEach(item => {\n    const dateStr = new Date(item.date).toISOString().split('T')[0];\n    if (!aggregatedData[dateStr]) {\n      aggregatedData[dateStr] = {\n        sum: item['PM 2.5'],\n        count: 1,\n        date: dateStr\n      };\n    } else {\n      aggregatedData[dateStr].sum += item['PM 2.5'];\n      aggregatedData[dateStr].count += 1;\n    }\n  });\n  return Object.values(aggregatedData).map(item => ({\n    date: new Date(item.date),\n    'PM 2.5': item.sum / item.count\n  })).sort((a, b) => a.date - b.date);\n};\nconst PM25Chart = ({\n  data,\n  userPreferences\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Outdoor': true,\n    'Indoor': true,\n    'HVAC': false,\n    'Air Purifier': false\n  });\n  const toggleDataset = name => {\n    if (name === 'HVAC' || name === 'Air Purifier') {\n      // When toggling a device, ensure Indoor is also visible\n      setActiveDatasets(prev => ({\n        ...prev,\n        'Indoor': true,\n        [name]: !prev[name]\n      }));\n    } else {\n      setActiveDatasets(prev => ({\n        ...prev,\n        [name]: !prev[name]\n      }));\n    }\n  };\n  useEffect(() => {\n    try {\n      if (!data || data.length === 0) {\n        setError('No data available');\n        return;\n      }\n      const aggregatedData = aggregateDataByDay(data);\n      const formattedData = {\n        labels: aggregatedData.map(item => item.date),\n        datasets: []\n      };\n\n      // Add base indoor value (without devices)\n      formattedData.datasets.push({\n        label: 'Indoor',\n        data: aggregatedData.map(item => ({\n          x: item.date,\n          y: calculateIndoorWithDevices(item['PM 2.5'], false, false)\n        })),\n        borderColor: '#D9F6BB',\n        backgroundColor: 'rgba(217, 246, 187, 0.1)',\n        fill: false,\n        tension: 0.4,\n        borderWidth: 2,\n        hidden: !activeDatasets['Indoor']\n      });\n\n      // Add HVAC if enabled\n      if (userPreferences !== null && userPreferences !== void 0 && userPreferences.has_HVAC) {\n        formattedData.datasets.push({\n          label: 'HVAC',\n          data: aggregatedData.map(item => ({\n            x: item.date,\n            y: calculateIndoorWithDevices(item['PM 2.5'], true, false)\n          })),\n          borderColor: '#A9ED8A',\n          backgroundColor: 'rgba(169, 237, 138, 0.1)',\n          fill: false,\n          tension: 0.4,\n          borderWidth: 2,\n          hidden: !activeDatasets['HVAC']\n        });\n      }\n\n      // Add Air Purifier if enabled\n      if (userPreferences !== null && userPreferences !== void 0 && userPreferences.hasEcologica) {\n        formattedData.datasets.push({\n          label: 'Air Purifier',\n          data: aggregatedData.map(item => ({\n            x: item.date,\n            y: calculateIndoorWithDevices(item['PM 2.5'], false, true)\n          })),\n          borderColor: '#7FD663',\n          backgroundColor: 'rgba(127, 214, 99, 0.1)',\n          fill: false,\n          tension: 0.4,\n          borderWidth: 2,\n          hidden: !activeDatasets['Air Purifier']\n        });\n      }\n\n      // Add Outdoor (top layer)\n      formattedData.datasets.push({\n        label: 'Outdoor',\n        data: aggregatedData.map(item => ({\n          x: item.date,\n          y: item['PM 2.5']\n        })),\n        borderColor: '#043A24',\n        backgroundColor: 'rgba(4, 58, 36, 0.1)',\n        fill: false,\n        tension: 0.4,\n        borderWidth: 2,\n        hidden: !activeDatasets['Outdoor']\n      });\n      setChartData(formattedData);\n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error processing PM2.5 data:', err);\n      setError('Failed to process PM2.5 data');\n      setIsLoading(false);\n    }\n  }, [data, activeDatasets, userPreferences]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading PM2.5 data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 21\n  }, this);\n  if (!chartData || !data.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No PM2.5 data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 42\n  }, this);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'μg/m³'\n        },\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y;\n            return `${label}: ${value.toFixed(1)} μg/m³`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChartLegend, {\n      activeDatasets: activeDatasets,\n      onToggle: toggleDataset,\n      userPreferences: userPreferences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n};\n_s(PM25Chart, \"Q/6qBjGewaWrtOkL3oIb5mZKFkE=\");\n_c = PM25Chart;\nexport default PM25Chart;\nvar _c;\n$RefreshReg$(_c, \"PM25Chart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","supabase","ChartLegend","calculateIndoorWithDevices","jsxDEV","_jsxDEV","register","aggregateDataByDay","data","aggregatedData","forEach","item","dateStr","Date","date","toISOString","split","sum","count","Object","values","map","sort","a","b","PM25Chart","userPreferences","_s","chartData","setChartData","isLoading","setIsLoading","error","setError","activeDatasets","setActiveDatasets","toggleDataset","name","prev","length","formattedData","labels","datasets","push","label","x","y","borderColor","backgroundColor","fill","tension","borderWidth","hidden","has_HVAC","hasEcologica","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","scales","type","time","unit","displayFormats","day","title","display","text","grid","beginAtZero","color","plugins","legend","tooltip","mode","intersect","callbacks","context","dataset","value","parsed","toFixed","style","width","height","position","onToggle","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/charts/PM25Chart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { supabase } from '../../supabaseClient';\nimport ChartLegend from './ChartLegend';\nimport { calculateIndoorWithDevices } from '../../utils/airQualityCalculations';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\n// Helper function to aggregate data points by day\nconst aggregateDataByDay = (data) => {\n  const aggregatedData = {};\n  \n  data.forEach(item => {\n    const dateStr = new Date(item.date).toISOString().split('T')[0];\n    \n    if (!aggregatedData[dateStr]) {\n      aggregatedData[dateStr] = {\n        sum: item['PM 2.5'],\n        count: 1,\n        date: dateStr\n      };\n    } else {\n      aggregatedData[dateStr].sum += item['PM 2.5'];\n      aggregatedData[dateStr].count += 1;\n    }\n  });\n\n  return Object.values(aggregatedData).map(item => ({\n    date: new Date(item.date),\n    'PM 2.5': item.sum / item.count\n  })).sort((a, b) => a.date - b.date);\n};\n\nconst PM25Chart = ({ data, userPreferences }) => {\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Outdoor': true,\n    'Indoor': true,\n    'HVAC': false,\n    'Air Purifier': false\n  });\n\n  const toggleDataset = (name) => {\n    if (name === 'HVAC' || name === 'Air Purifier') {\n      // When toggling a device, ensure Indoor is also visible\n      setActiveDatasets(prev => ({\n        ...prev,\n        'Indoor': true,\n        [name]: !prev[name]\n      }));\n    } else {\n      setActiveDatasets(prev => ({\n        ...prev,\n        [name]: !prev[name]\n      }));\n    }\n  };\n\n  useEffect(() => {\n    try {\n      if (!data || data.length === 0) {\n        setError('No data available');\n        return;\n      }\n\n      const aggregatedData = aggregateDataByDay(data);\n\n      const formattedData = {\n        labels: aggregatedData.map(item => item.date),\n        datasets: []\n      };\n\n      // Add base indoor value (without devices)\n      formattedData.datasets.push({\n        label: 'Indoor',\n        data: aggregatedData.map(item => ({\n          x: item.date,\n          y: calculateIndoorWithDevices(\n            item['PM 2.5'],\n            false,\n            false\n          )\n        })),\n        borderColor: '#D9F6BB',\n        backgroundColor: 'rgba(217, 246, 187, 0.1)',\n        fill: false,\n        tension: 0.4,\n        borderWidth: 2,\n        hidden: !activeDatasets['Indoor']\n      });\n\n      // Add HVAC if enabled\n      if (userPreferences?.has_HVAC) {\n        formattedData.datasets.push({\n          label: 'HVAC',\n          data: aggregatedData.map(item => ({\n            x: item.date,\n            y: calculateIndoorWithDevices(\n              item['PM 2.5'],\n              true,\n              false\n            )\n          })),\n          borderColor: '#A9ED8A',\n          backgroundColor: 'rgba(169, 237, 138, 0.1)',\n          fill: false,\n          tension: 0.4,\n          borderWidth: 2,\n          hidden: !activeDatasets['HVAC']\n        });\n      }\n\n      // Add Air Purifier if enabled\n      if (userPreferences?.hasEcologica) {\n        formattedData.datasets.push({\n          label: 'Air Purifier',\n          data: aggregatedData.map(item => ({\n            x: item.date,\n            y: calculateIndoorWithDevices(\n              item['PM 2.5'],\n              false,\n              true\n            )\n          })),\n          borderColor: '#7FD663',\n          backgroundColor: 'rgba(127, 214, 99, 0.1)',\n          fill: false,\n          tension: 0.4,\n          borderWidth: 2,\n          hidden: !activeDatasets['Air Purifier']\n        });\n      }\n\n      // Add Outdoor (top layer)\n      formattedData.datasets.push({\n        label: 'Outdoor',\n        data: aggregatedData.map(item => ({\n          x: item.date,\n          y: item['PM 2.5']\n        })),\n        borderColor: '#043A24',\n        backgroundColor: 'rgba(4, 58, 36, 0.1)',\n        fill: false,\n        tension: 0.4,\n        borderWidth: 2,\n        hidden: !activeDatasets['Outdoor']\n      });\n\n      setChartData(formattedData);\n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error processing PM2.5 data:', err);\n      setError('Failed to process PM2.5 data');\n      setIsLoading(false);\n    }\n  }, [data, activeDatasets, userPreferences]);\n\n  if (isLoading) return <div>Loading PM2.5 data...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!chartData || !data.length) return <div>No PM2.5 data available</div>;\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'μg/m³'\n        },\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y;\n            return `${label}: ${value.toFixed(1)} μg/m³`;\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\n      <Line data={chartData} options={options} />\n      <ChartLegend \n        activeDatasets={activeDatasets}\n        onToggle={toggleDataset}\n        userPreferences={userPreferences}\n      />\n    </div>\n  );\n};\n\nexport default PM25Chart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}