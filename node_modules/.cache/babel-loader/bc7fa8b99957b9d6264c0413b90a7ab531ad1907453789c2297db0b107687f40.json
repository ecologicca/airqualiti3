{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/pages/dashboard/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport AnxietyRiskChart from '../../components/charts/AnxietyRiskChart';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst Dashboard = ({\n  city = 'Toronto'\n}) => {\n  _s();\n  const [timeSeriesData, setTimeSeriesData] = useState([]);\n  const [algorithms, setAlgorithms] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchTimeSeriesData = async () => {\n    setLoading(true);\n    try {\n      // Get current date\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(endDate.getDate() - 365);\n      console.log('Fetching data for range:', {\n        start: startDate.toISOString(),\n        end: endDate.toISOString()\n      });\n\n      // Fetch weather data\n      const {\n        data: weatherData,\n        error: weatherError\n      } = await supabase.from('weather_data').select('pm25, created_at').eq('city', city).gte('created_at', startDate.toISOString()).lte('created_at', endDate.toISOString()).order('created_at', {\n        ascending: true\n      });\n      if (weatherError) throw weatherError;\n\n      // Fetch algorithms\n      const {\n        data: algoData,\n        error: algoError\n      } = await supabase.from('risk_algorithms').select('*').order('period_days');\n      if (algoError) throw algoError;\n\n      // Process weather data\n      const processedData = weatherData.filter(d => d.pm25 != null && d.created_at != null).map(d => ({\n        x: new Date(d.created_at),\n        y: parseFloat(d.pm25)\n      }));\n      console.log('Processed data points:', processedData.length);\n      setTimeSeriesData(processedData);\n      setAlgorithms(algoData);\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchTimeSeriesData();\n  }, [city]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading dashboard...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 23\n  }, this);\n  if (!timeSeriesData.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 40\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Air Quality Dashboard - \", city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts-grid\",\n      children: algorithms.map(algo => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-item\",\n        children: /*#__PURE__*/_jsxDEV(AnxietyRiskChart, {\n          title: algo.name,\n          data: timeSeriesData,\n          threshold: algo.threshold,\n          baseRatio: algo.base_ratio,\n          periodLabel: algo.period_label,\n          ageGroup: algo.age_group,\n          description: algo.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)\n      }, algo.code, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n                .dashboard {\n                    padding: 20px;\n                    max-width: 1400px;\n                    margin: 0 auto;\n                }\n\n                .charts-grid {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n                    gap: 20px;\n                    margin-top: 20px;\n                }\n\n                .chart-item {\n                    background: white;\n                    border-radius: 8px;\n                    padding: 15px;\n                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                }\n            `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"fC6NzmbXBgESWeZg3rsbY9awTlE=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","AnxietyRiskChart","jsxDEV","_jsxDEV","register","Dashboard","city","_s","timeSeriesData","setTimeSeriesData","algorithms","setAlgorithms","loading","setLoading","error","setError","fetchTimeSeriesData","endDate","Date","startDate","setDate","getDate","console","log","start","toISOString","end","data","weatherData","weatherError","from","select","eq","gte","lte","order","ascending","algoData","algoError","processedData","filter","d","pm25","created_at","map","x","y","parseFloat","length","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","algo","title","name","threshold","baseRatio","base_ratio","periodLabel","period_label","ageGroup","age_group","description","code","jsx","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/pages/dashboard/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport AnxietyRiskChart from '../../components/charts/AnxietyRiskChart';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nconst Dashboard = ({ city = 'Toronto' }) => {\n    const [timeSeriesData, setTimeSeriesData] = useState([]);\n    const [algorithms, setAlgorithms] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const fetchTimeSeriesData = async () => {\n        setLoading(true);\n        try {\n            // Get current date\n            const endDate = new Date();\n            const startDate = new Date();\n            startDate.setDate(endDate.getDate() - 365);\n\n            console.log('Fetching data for range:', {\n                start: startDate.toISOString(),\n                end: endDate.toISOString()\n            });\n\n            // Fetch weather data\n            const { data: weatherData, error: weatherError } = await supabase\n                .from('weather_data')\n                .select('pm25, created_at')\n                .eq('city', city)\n                .gte('created_at', startDate.toISOString())\n                .lte('created_at', endDate.toISOString())\n                .order('created_at', { ascending: true });\n\n            if (weatherError) throw weatherError;\n\n            // Fetch algorithms\n            const { data: algoData, error: algoError } = await supabase\n                .from('risk_algorithms')\n                .select('*')\n                .order('period_days');\n\n            if (algoError) throw algoError;\n\n            // Process weather data\n            const processedData = weatherData\n                .filter(d => d.pm25 != null && d.created_at != null)\n                .map(d => ({\n                    x: new Date(d.created_at),\n                    y: parseFloat(d.pm25)\n                }));\n\n            console.log('Processed data points:', processedData.length);\n            setTimeSeriesData(processedData);\n            setAlgorithms(algoData);\n\n        } catch (err) {\n            console.error('Error fetching data:', err);\n            setError(err.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchTimeSeriesData();\n    }, [city]);\n\n    if (loading) return <div>Loading dashboard...</div>;\n    if (error) return <div>Error: {error}</div>;\n    if (!timeSeriesData.length) return <div>No data available</div>;\n\n    return (\n        <div className=\"dashboard\">\n            <h1>Air Quality Dashboard - {city}</h1>\n            \n            <div className=\"charts-grid\">\n                {algorithms.map(algo => (\n                    <div key={algo.code} className=\"chart-item\">\n                        <AnxietyRiskChart\n                            title={algo.name}\n                            data={timeSeriesData}\n                            threshold={algo.threshold}\n                            baseRatio={algo.base_ratio}\n                            periodLabel={algo.period_label}\n                            ageGroup={algo.age_group}\n                            description={algo.description}\n                        />\n                    </div>\n                ))}\n            </div>\n\n            <style jsx>{`\n                .dashboard {\n                    padding: 20px;\n                    max-width: 1400px;\n                    margin: 0 auto;\n                }\n\n                .charts-grid {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n                    gap: 20px;\n                    margin-top: 20px;\n                }\n\n                .chart-item {\n                    background: white;\n                    border-radius: 8px;\n                    padding: 15px;\n                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                }\n            `}</style>\n        </div>\n    );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}