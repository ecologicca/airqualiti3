{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/pages/dashboard/AnxietyDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport WeeklyAnxietyChart from '../../components/charts/WeeklyAnxietyChart';\nimport MonthlyAnxietyChart from '../../components/charts/MonthlyAnxietyChart';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst AnxietyDashboard = () => {\n  _s();\n  const [userPreferences, setUserPreferences] = useState({\n    hasHVAC: false,\n    hasEcologica: false,\n    city: 'Toronto',\n    firstName: '',\n    anxietyLevel: 5\n  });\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (!user) return;\n        const {\n          data,\n          error\n        } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n        if (error) throw error;\n        if (data) {\n          setUserPreferences({\n            hasHVAC: data.has_HVAC || false,\n            hasEcologica: data.has_ecologgica || false,\n            city: data.city || 'Toronto',\n            firstName: data.first_name || '',\n            anxietyLevel: data.anxiety_base_level || 5\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n    const fetchAirQualityData = async () => {\n      try {\n        // Get last 30 days of data to cover both weekly and monthly calculations\n        const {\n          data,\n          error\n        } = await supabase.from('weather_data').select('*').eq('city', userPreferences.city).order('created_at', {\n          ascending: false\n        }).limit(30);\n        if (error) throw error;\n        const transformedData = data.map(item => ({\n          date: item.created_at,\n          pm25: item.pm25,\n          city: item.city\n        }));\n        setAirQualityData(transformedData);\n      } catch (error) {\n        console.error('Error fetching air quality data:', error);\n        setAirQualityData([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchUserPreferences();\n    if (userPreferences.city) {\n      fetchAirQualityData();\n    }\n    const interval = setInterval(() => {\n      if (userPreferences.city) {\n        fetchAirQualityData();\n      }\n    }, 60 * 60 * 1000); // Refresh every hour\n\n    return () => clearInterval(interval);\n  }, [userPreferences.city]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [userPreferences.firstName ? `${userPreferences.firstName}'s ` : '', \"Anxiety Risk Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Weekly Anxiety Risk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeeklyAnxietyChart, {\n          data: airQualityData,\n          userPreferences: userPreferences\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Monthly Anxiety Risk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MonthlyAnxietyChart, {\n          data: airQualityData,\n          userPreferences: userPreferences\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(AnxietyDashboard, \"VIKA58B2U1IOe9BfB+UHrT0OXeY=\");\n_c = AnxietyDashboard;\nexport default AnxietyDashboard;\nvar _c;\n$RefreshReg$(_c, \"AnxietyDashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","WeeklyAnxietyChart","MonthlyAnxietyChart","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","AnxietyDashboard","_s","userPreferences","setUserPreferences","hasHVAC","hasEcologica","city","firstName","anxietyLevel","airQualityData","setAirQualityData","isLoading","setIsLoading","fetchUserPreferences","data","user","auth","getUser","error","from","select","eq","id","single","has_HVAC","has_ecologgica","first_name","anxiety_base_level","console","fetchAirQualityData","order","ascending","limit","transformedData","map","item","date","created_at","pm25","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/pages/dashboard/AnxietyDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport WeeklyAnxietyChart from '../../components/charts/WeeklyAnxietyChart';\nimport MonthlyAnxietyChart from '../../components/charts/MonthlyAnxietyChart';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst AnxietyDashboard = () => {\n  const [userPreferences, setUserPreferences] = useState({\n    hasHVAC: false,\n    hasEcologica: false,\n    city: 'Toronto',\n    firstName: '',\n    anxietyLevel: 5\n  });\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) return;\n\n        const { data, error } = await supabase\n          .from('user_preferences')\n          .select('*')\n          .eq('user_id', user.id)\n          .single();\n\n        if (error) throw error;\n        \n        if (data) {\n          setUserPreferences({\n            hasHVAC: data.has_HVAC || false,\n            hasEcologica: data.has_ecologgica || false,\n            city: data.city || 'Toronto',\n            firstName: data.first_name || '',\n            anxietyLevel: data.anxiety_base_level || 5\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n\n    const fetchAirQualityData = async () => {\n      try {\n        // Get last 30 days of data to cover both weekly and monthly calculations\n        const { data, error } = await supabase\n          .from('weather_data')\n          .select('*')\n          .eq('city', userPreferences.city)\n          .order('created_at', { ascending: false })\n          .limit(30);\n\n        if (error) throw error;\n\n        const transformedData = data.map(item => ({\n          date: item.created_at,\n          pm25: item.pm25,\n          city: item.city\n        }));\n        \n        setAirQualityData(transformedData);\n      } catch (error) {\n        console.error('Error fetching air quality data:', error);\n        setAirQualityData([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUserPreferences();\n    if (userPreferences.city) {\n      fetchAirQualityData();\n    }\n\n    const interval = setInterval(() => {\n      if (userPreferences.city) {\n        fetchAirQualityData();\n      }\n    }, 60 * 60 * 1000); // Refresh every hour\n\n    return () => clearInterval(interval);\n  }, [userPreferences.city]);\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"dashboard\">\n      <h1>\n        {userPreferences.firstName ? `${userPreferences.firstName}'s ` : ''}\n        Anxiety Risk Dashboard\n      </h1>\n      \n      <div className=\"dashboard-container\">\n        <div className=\"dashboard-section\">\n          <h2>Weekly Anxiety Risk</h2>\n          <WeeklyAnxietyChart \n            data={airQualityData} \n            userPreferences={userPreferences} \n          />\n        </div>\n\n        <div className=\"dashboard-section\">\n          <h2>Monthly Anxiety Risk</h2>\n          <MonthlyAnxietyChart \n            data={airQualityData} \n            userPreferences={userPreferences} \n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnxietyDashboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}