{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/charts/PM25Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { supabase } from '../../supabaseClient';\nimport ChartLegend from './ChartLegend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, TimeScale);\nconst calculateIndoorReduction = value => {\n  return value * 0.7; // 30% reduction for indoor air quality\n};\nconst calculateAirPurifierReduction = value => {\n  return value * 0.6; // 40% reduction\n};\nconst calculateCombinedReduction = value => {\n  return value * 0.5; // 50% reduction\n};\nconst calculateImpact = (value, hasAirPurifier) => {\n  const indoorValue = calculateIndoorReduction(value);\n  if (hasAirPurifier) {\n    return calculateCombinedReduction(value);\n  }\n  return indoorValue;\n};\nconst PM25Chart = ({\n  data,\n  userPreferences\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Outdoor': true,\n    'Indoor': true\n  });\n  const [showEcologica, setShowEcologica] = useState((userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.hasEcologica) || false);\n  const toggleDataset = name => {\n    setActiveDatasets(prev => ({\n      ...prev,\n      [name]: !prev[name]\n    }));\n  };\n  useEffect(() => {\n    try {\n      if (!data || data.length === 0) {\n        setError('No data available');\n        return;\n      }\n      const formattedData = {\n        labels: data.map(item => new Date(item.date)),\n        datasets: []\n      };\n\n      // Add With Air Purifier (bottom layer)\n      if (showEcologica) {\n        formattedData.datasets.push({\n          label: 'With Air Purifier',\n          data: data.map(item => calculateCombinedReduction(item['PM 2.5'])),\n          backgroundColor: 'rgba(169, 237, 138, 0.9)',\n          hidden: false,\n          stack: 'stack1',\n          barThickness: 'flex'\n        });\n      }\n\n      // Add Indoor (middle layer)\n      formattedData.datasets.push({\n        label: 'Indoor',\n        data: data.map(item => calculateIndoorReduction(item['PM 2.5'])),\n        backgroundColor: 'rgba(217, 246, 187, 0.9)',\n        hidden: !activeDatasets['Indoor'],\n        stack: 'stack1',\n        barThickness: 'flex'\n      });\n\n      // Add Outdoor (top layer)\n      formattedData.datasets.push({\n        label: 'Outdoor',\n        data: data.map(item => item['PM 2.5']),\n        backgroundColor: 'rgba(4, 58, 36, 0.9)',\n        hidden: !activeDatasets['Outdoor'],\n        stack: 'stack1',\n        barThickness: 'flex'\n      });\n      setChartData(formattedData);\n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error processing PM2.5 data:', err);\n      setError('Failed to process PM2.5 data');\n      setIsLoading(false);\n    }\n  }, [data, showEcologica, activeDatasets]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading PM2.5 data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 21\n  }, this);\n  if (!chartData || !data.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No PM2.5 data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 42\n  }, this);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        stacked: true,\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        stacked: true,\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'μg/m³'\n        },\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y;\n            return `${label}: ${value.toFixed(1)} μg/m³`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChartLegend, {\n      activeDatasets: {\n        'Outdoor': activeDatasets['Outdoor'],\n        'Indoor': activeDatasets['Indoor'],\n        'With Air Purifier': showEcologica\n      },\n      onToggle: label => {\n        if (label === 'With Air Purifier') {\n          setShowEcologica(!showEcologica);\n        } else {\n          toggleDataset(label);\n        }\n      },\n      showAirPurifier: userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.hasEcologica\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s(PM25Chart, \"2UMOUQYIvqSDxmokZul/IY28jK0=\");\n_c = PM25Chart;\nexport default PM25Chart;\nvar _c;\n$RefreshReg$(_c, \"PM25Chart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","TimeScale","Bar","supabase","ChartLegend","jsxDEV","_jsxDEV","register","calculateIndoorReduction","value","calculateAirPurifierReduction","calculateCombinedReduction","calculateImpact","hasAirPurifier","indoorValue","PM25Chart","data","userPreferences","_s","chartData","setChartData","isLoading","setIsLoading","error","setError","activeDatasets","setActiveDatasets","showEcologica","setShowEcologica","hasEcologica","toggleDataset","name","prev","length","formattedData","labels","map","item","Date","date","datasets","push","label","backgroundColor","hidden","stack","barThickness","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","scales","x","stacked","type","time","unit","displayFormats","day","title","display","text","grid","y","beginAtZero","color","plugins","legend","tooltip","mode","intersect","callbacks","context","dataset","parsed","toFixed","style","width","height","position","onToggle","showAirPurifier","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/charts/PM25Chart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { supabase } from '../../supabaseClient';\nimport ChartLegend from './ChartLegend';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nconst calculateIndoorReduction = (value) => {\n  return value * 0.7; // 30% reduction for indoor air quality\n};\n\nconst calculateAirPurifierReduction = (value) => {\n  return value * 0.6; // 40% reduction\n};\n\nconst calculateCombinedReduction = (value) => {\n  return value * 0.5; // 50% reduction\n};\n\nconst calculateImpact = (value, hasAirPurifier) => {\n  const indoorValue = calculateIndoorReduction(value);\n  if (hasAirPurifier) {\n    return calculateCombinedReduction(value);\n  }\n  return indoorValue;\n};\n\nconst PM25Chart = ({ data, userPreferences }) => {\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Outdoor': true,\n    'Indoor': true\n  });\n  const [showEcologica, setShowEcologica] = useState(userPreferences?.hasEcologica || false);\n\n  const toggleDataset = (name) => {\n    setActiveDatasets(prev => ({\n      ...prev,\n      [name]: !prev[name]\n    }));\n  };\n\n  useEffect(() => {\n    try {\n      if (!data || data.length === 0) {\n        setError('No data available');\n        return;\n      }\n\n      const formattedData = {\n        labels: data.map(item => new Date(item.date)),\n        datasets: []\n      };\n\n      // Add With Air Purifier (bottom layer)\n      if (showEcologica) {\n        formattedData.datasets.push({\n          label: 'With Air Purifier',\n          data: data.map(item => calculateCombinedReduction(item['PM 2.5'])),\n          backgroundColor: 'rgba(169, 237, 138, 0.9)',\n          hidden: false,\n          stack: 'stack1',\n          barThickness: 'flex'\n        });\n      }\n\n      // Add Indoor (middle layer)\n      formattedData.datasets.push({\n        label: 'Indoor',\n        data: data.map(item => calculateIndoorReduction(item['PM 2.5'])),\n        backgroundColor: 'rgba(217, 246, 187, 0.9)',\n        hidden: !activeDatasets['Indoor'],\n        stack: 'stack1',\n        barThickness: 'flex'\n      });\n\n      // Add Outdoor (top layer)\n      formattedData.datasets.push({\n        label: 'Outdoor',\n        data: data.map(item => item['PM 2.5']),\n        backgroundColor: 'rgba(4, 58, 36, 0.9)',\n        hidden: !activeDatasets['Outdoor'],\n        stack: 'stack1',\n        barThickness: 'flex'\n      });\n\n      setChartData(formattedData);\n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error processing PM2.5 data:', err);\n      setError('Failed to process PM2.5 data');\n      setIsLoading(false);\n    }\n  }, [data, showEcologica, activeDatasets]);\n\n  if (isLoading) return <div>Loading PM2.5 data...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!chartData || !data.length) return <div>No PM2.5 data available</div>;\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        stacked: true,\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        stacked: true,\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'μg/m³'\n        },\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y;\n            return `${label}: ${value.toFixed(1)} μg/m³`;\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\n      <Bar data={chartData} options={options} />\n      <ChartLegend \n        activeDatasets={{\n          'Outdoor': activeDatasets['Outdoor'],\n          'Indoor': activeDatasets['Indoor'],\n          'With Air Purifier': showEcologica\n        }}\n        onToggle={(label) => {\n          if (label === 'With Air Purifier') {\n            setShowEcologica(!showEcologica);\n          } else {\n            toggleDataset(label);\n          }\n        }}\n        showAirPurifier={userPreferences?.hasEcologica}\n      />\n    </div>\n  );\n};\n\nexport default PM25Chart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}