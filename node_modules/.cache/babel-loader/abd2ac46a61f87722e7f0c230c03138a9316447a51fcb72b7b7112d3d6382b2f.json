{"ast":null,"code":"const API_KEY = '3f8a4d2a8875fb203575175662bb64d7';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\nconst cities = ['Toronto', 'San Francisco', 'New York', 'Dallas', 'Boston', 'Miami', 'Houston'];\n\n// Helper function to check if we need new data\nconst needsNewData = storedData => {\n  if (!storedData || storedData.length === 0) return true;\n  const lastDataPoint = new Date(storedData[storedData.length - 1].date);\n  const now = new Date();\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\n  // Check if the last data point is from today\n  return lastDataPoint < today;\n};\nconst fetchCityData = async city => {\n  try {\n    // Get coordinates first\n    const geoResponse = await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`);\n    const [geoData] = await geoResponse.json();\n    if (!geoData) {\n      throw new Error(`No location data found for ${city}`);\n    }\n\n    // Fetch both air quality and weather data\n    const [airData, weatherData] = await Promise.all([fetch(`${BASE_URL}/air_pollution?lat=${geoData.lat}&lon=${geoData.lon}&appid=${API_KEY}`).then(res => res.json()), fetch(`${BASE_URL}/weather?lat=${geoData.lat}&lon=${geoData.lon}&units=metric&appid=${API_KEY}`).then(res => res.json())]);\n\n    // Format data to match your existing structure\n    return {\n      date: new Date().toISOString(),\n      city: city,\n      temp: weatherData.main.temp,\n      'PM 2.5': airData.list[0].components.pm2_5,\n      'PM 10': airData.list[0].components.pm10,\n      airQuality: getAirQualityLabel(airData.list[0].main.aqi)\n    };\n  } catch (error) {\n    console.error(`Error fetching data for ${city}:`, error);\n    return null;\n  }\n};\nconst getAirQualityLabel = aqi => {\n  const labels = {\n    1: 'Good',\n    2: 'Fair',\n    3: 'Moderate',\n    4: 'Poor',\n    5: 'Very Poor'\n  };\n  return labels[aqi] || 'Unknown';\n};\nexport const fetchAllCitiesData = async () => {\n  console.log('Checking if new data is needed...');\n\n  // Get stored data\n  const storedData = JSON.parse(localStorage.getItem('weatherData') || '[]');\n\n  // Check if we need new data\n  if (needsNewData(storedData)) {\n    console.log('Fetching new data for all cities...');\n    const newResults = await Promise.all(cities.map(city => fetchCityData(city)));\n    const validNewResults = newResults.filter(result => result !== null);\n\n    // Combine with existing data\n    const sixtyDaysAgo = new Date();\n    sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);\n    const allData = [...storedData, ...validNewResults].filter(item => new Date(item.date) > sixtyDaysAgo);\n\n    // Sort by date\n    allData.sort((a, b) => new Date(a.date) - new Date(b.date));\n\n    // Store updated data\n    localStorage.setItem('weatherData', JSON.stringify(allData));\n    console.log('Updated data stored:', allData);\n    return allData;\n  } else {\n    console.log('Using existing data:', storedData);\n    return storedData;\n  }\n};","map":{"version":3,"names":["API_KEY","BASE_URL","cities","needsNewData","storedData","length","lastDataPoint","Date","date","now","today","getFullYear","getMonth","getDate","fetchCityData","city","geoResponse","fetch","geoData","json","Error","airData","weatherData","Promise","all","lat","lon","then","res","toISOString","temp","main","list","components","pm2_5","pm10","airQuality","getAirQualityLabel","aqi","error","console","labels","fetchAllCitiesData","log","JSON","parse","localStorage","getItem","newResults","map","validNewResults","filter","result","sixtyDaysAgo","setDate","allData","item","sort","a","b","setItem","stringify"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/services/weatherService.js"],"sourcesContent":["const API_KEY = '3f8a4d2a8875fb203575175662bb64d7';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\nconst cities = [\n  'Toronto',\n  'San Francisco',\n  'New York',\n  'Dallas', \n  'Boston',\n  'Miami',\n  'Houston'\n];\n\n// Helper function to check if we need new data\nconst needsNewData = (storedData) => {\n  if (!storedData || storedData.length === 0) return true;\n  \n  const lastDataPoint = new Date(storedData[storedData.length - 1].date);\n  const now = new Date();\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  \n  // Check if the last data point is from today\n  return lastDataPoint < today;\n};\n\nconst fetchCityData = async (city) => {\n  try {\n    // Get coordinates first\n    const geoResponse = await fetch(\n      `http://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`\n    );\n    const [geoData] = await geoResponse.json();\n    \n    if (!geoData) {\n      throw new Error(`No location data found for ${city}`);\n    }\n\n    // Fetch both air quality and weather data\n    const [airData, weatherData] = await Promise.all([\n      fetch(`${BASE_URL}/air_pollution?lat=${geoData.lat}&lon=${geoData.lon}&appid=${API_KEY}`)\n        .then(res => res.json()),\n      fetch(`${BASE_URL}/weather?lat=${geoData.lat}&lon=${geoData.lon}&units=metric&appid=${API_KEY}`)\n        .then(res => res.json())\n    ]);\n\n    // Format data to match your existing structure\n    return {\n      date: new Date().toISOString(),\n      city: city,\n      temp: weatherData.main.temp,\n      'PM 2.5': airData.list[0].components.pm2_5,\n      'PM 10': airData.list[0].components.pm10,\n      airQuality: getAirQualityLabel(airData.list[0].main.aqi)\n    };\n  } catch (error) {\n    console.error(`Error fetching data for ${city}:`, error);\n    return null;\n  }\n};\n\nconst getAirQualityLabel = (aqi) => {\n  const labels = {\n    1: 'Good',\n    2: 'Fair',\n    3: 'Moderate',\n    4: 'Poor',\n    5: 'Very Poor'\n  };\n  return labels[aqi] || 'Unknown';\n};\n\nexport const fetchAllCitiesData = async () => {\n  console.log('Checking if new data is needed...');\n  \n  // Get stored data\n  const storedData = JSON.parse(localStorage.getItem('weatherData') || '[]');\n  \n  // Check if we need new data\n  if (needsNewData(storedData)) {\n    console.log('Fetching new data for all cities...');\n    const newResults = await Promise.all(\n      cities.map(city => fetchCityData(city))\n    );\n    const validNewResults = newResults.filter(result => result !== null);\n    \n    // Combine with existing data\n    const sixtyDaysAgo = new Date();\n    sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);\n    \n    const allData = [...storedData, ...validNewResults].filter(\n      item => new Date(item.date) > sixtyDaysAgo\n    );\n    \n    // Sort by date\n    allData.sort((a, b) => new Date(a.date) - new Date(b.date));\n    \n    // Store updated data\n    localStorage.setItem('weatherData', JSON.stringify(allData));\n    console.log('Updated data stored:', allData);\n    return allData;\n  } else {\n    console.log('Using existing data:', storedData);\n    return storedData;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}