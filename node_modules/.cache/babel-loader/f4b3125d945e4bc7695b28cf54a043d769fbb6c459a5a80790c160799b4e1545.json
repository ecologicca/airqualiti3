{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\nconst calculateHVACReduction = value => {\n  return value * 0.7; // 30% reduction\n};\nconst calculateEcologicaReduction = value => {\n  return value * 0.6; // 40% reduction\n};\nconst calculateCombinedReduction = value => {\n  return value * 0.5; // 50% reduction\n};\nconst getLast30Days = data => {\n  if (!Array.isArray(data) || data.length === 0) return [];\n  const validData = data.map(item => ({\n    date: new Date(item.Date),\n    'PM 2.5': parseFloat(item['PM 2.5']),\n    'PM 10': parseFloat(item['PM 10']),\n    city: item.City,\n    temp: item.Temp\n  })).filter(item => !isNaN(item.date.getTime()) && !isNaN(item['PM 10']) && !isNaN(item['PM 2.5']) && item.city === city).sort((a, b) => b.date - a.date);\n  if (validData.length === 0) return [];\n  const mostRecentDate = validData[0].date;\n  const cutoffDate = new Date(mostRecentDate);\n  cutoffDate.setDate(cutoffDate.getDate() - 30);\n  return validData.filter(item => item.date >= cutoffDate).sort((a, b) => a.date - b.date);\n};\nconst calculateDaysOverThreshold = (data, pollutantType, threshold) => {\n  const last30Days = getLast30Days(data);\n  return last30Days.filter(day => parseFloat(day[pollutantType]) > threshold).length;\n};\nconst calculateDaysOverPeak = (data, pollutantType, threshold) => {\n  const last30Days = getLast30Days(data);\n  return last30Days.filter(day => parseFloat(day[pollutantType]) > threshold).length;\n};\nconst calculateDeeperSleepMinutes = (data, hasHVAC, hasEcologica) => {\n  const last30Days = getLast30Days(data);\n  const getAdjustedValue = value => {\n    if (hasHVAC && hasEcologica) {\n      return calculateCombinedReduction(value);\n    } else if (hasHVAC) {\n      return calculateHVACReduction(value);\n    } else if (hasEcologica) {\n      return calculateEcologicaReduction(value);\n    }\n    return value;\n  };\n  const daysUnderThreshold = last30Days.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n  const deeperSleepMinutes = daysUnderThreshold * 8 * 60;\n  return deeperSleepMinutes;\n};\nconst Dashboard = () => {\n  _s();\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Original PM2.5': true,\n    'PM2.5 with HVAC': false,\n    'PM2.5 with Ecologica': false,\n    'PM2.5 with Both': false,\n    'Original PM10': true,\n    'PM10 with HVAC': false,\n    'PM10 with Ecologica': false,\n    'PM10 with Both': false\n  });\n  const processChartData = (data, pollutantType) => {\n    const datasets = [{\n      label: `Original ${pollutantType}`,\n      data: data.map(d => ({\n        x: d.date,\n        y: pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5'])\n      })),\n      borderColor: 'rgb(0, 100, 0)',\n      // Dark green\n      backgroundColor: 'rgba(0, 100, 0, 0.1)',\n      borderWidth: 2,\n      tension: 0.1,\n      hidden: !activeDatasets[`Original ${pollutantType}`]\n    }];\n    if (hasHVAC) {\n      datasets.push({\n        label: `${pollutantType} with HVAC`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateHVACReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(34, 139, 34)',\n        // Forest green\n        backgroundColor: 'rgba(34, 139, 34, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`${pollutantType} with HVAC`]\n      });\n    }\n    if (hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Ecologica`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateEcologicaReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(60, 179, 113)',\n        // Medium sea green\n        backgroundColor: 'rgba(60, 179, 113, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`${pollutantType} with Ecologica`]\n      });\n    }\n    if (hasHVAC && hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Both`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateCombinedReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(144, 238, 144)',\n        // Light green\n        backgroundColor: 'rgba(144, 238, 144, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`${pollutantType} with Both`]\n      });\n    }\n    return {\n      datasets\n    };\n  };\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      var _airQualityData$, _airQualityData$2;\n      console.log('Setting chart data with:', {\n        sampleDataPoint: airQualityData[0],\n        pm10Value: (_airQualityData$ = airQualityData[0]) === null || _airQualityData$ === void 0 ? void 0 : _airQualityData$['PM 10'],\n        pm25Value: (_airQualityData$2 = airQualityData[0]) === null || _airQualityData$2 === void 0 ? void 0 : _airQualityData$2['PM 2.5']\n      });\n      setChartData({\n        pm25: processChartData(airQualityData, 'PM2.5'),\n        pm10: processChartData(airQualityData, 'PM10')\n      });\n    }\n  }, [airQualityData, hasHVAC, hasEcologica, activeDatasets]);\n  const getLast100Days = data => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n    const validData = data.map(item => ({\n      date: new Date(item.Date),\n      'PM 2.5': parseFloat(item['PM 2.5']),\n      'PM 10': parseFloat(item['PM 10']),\n      city: item.City,\n      temp: item.Temp\n    })).filter(item => !isNaN(item.date.getTime()) && !isNaN(item['PM 10']) && !isNaN(item['PM 2.5']) && item.city === city).sort((a, b) => b.date - a.date);\n    if (validData.length === 0) return [];\n    const mostRecentDate = validData[0].date;\n    const cutoffDate = new Date(mostRecentDate);\n    cutoffDate.setDate(cutoffDate.getDate() - 100);\n    return validData.filter(item => item.date >= cutoffDate).sort((a, b) => a.date - b.date);\n  };\n  const getAllValidData = data => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n    return data.map(item => ({\n      date: new Date(item.Date),\n      'PM 2.5': parseFloat(item['PM 2.5']),\n      'PM 10': parseFloat(item['PM 10']),\n      city: item.City,\n      temp: item.Temp\n    })).filter(item => !isNaN(item.date.getTime()) && !isNaN(item['PM 10']) && !isNaN(item['PM 2.5']) && item.city === city).sort((a, b) => a.date - b.date);\n  };\n  useEffect(() => {\n    async function fetchPreferences() {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (!user) return;\n        const {\n          data,\n          error\n        } = await supabase.from('user_preferences').select('has_HVAC, has_ecologgica, city').eq('user_id', user.id).single();\n        console.log('Fetched preferences:', data);\n        if (error) {\n          console.error('Error fetching preferences:', error);\n          return;\n        }\n        if (data) {\n          console.log('Setting city to:', data.city);\n          setCity(data.city);\n          setHasHVAC(data.has_HVAC);\n          setHasEcologica(data.has_ecologgica);\n          setActiveDatasets(prev => ({\n            ...prev,\n            'PM2.5 with HVAC': data.has_HVAC,\n            'PM2.5 with Ecologica': data.has_ecologgica,\n            'PM2.5 with Both': data.has_HVAC && data.has_ecologgica,\n            'PM10 with HVAC': data.has_HVAC,\n            'PM10 with Ecologica': data.has_ecologgica,\n            'PM10 with Both': data.has_HVAC && data.has_ecologgica\n          }));\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n    fetchPreferences();\n  }, []);\n  const fetchAirQualityData = async () => {\n    try {\n      var _data$, _data$2;\n      const response = await fetch(`http://localhost:5000/api/airqualitydata?city=${city}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Raw data from API:', {\n        city: city,\n        firstRow: data[0],\n        pm25Example: (_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$['PM 2.5'],\n        pm10Example: (_data$2 = data[0]) === null || _data$2 === void 0 ? void 0 : _data$2['PM 10']\n      });\n      const last30DaysData = getLast30Days(data.filter(item => item.City === city));\n      setAirQualityData(last30DaysData);\n    } catch (error) {\n      console.error('Error fetching air quality:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchAirQualityData();\n  }, [city]);\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: true,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day'\n        },\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)'\n        },\n        ticks: {\n          callback: function (value) {\n            return value + ' ug/m³';\n          }\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} ug/m³`;\n          }\n        }\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          padding: 15,\n          onClick: (event, legendItem, legend) => {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            const meta = ci.getDatasetMeta(index);\n            meta.hidden = !meta.hidden;\n            setActiveDatasets(prev => ({\n              ...prev,\n              [legendItem.text]: !meta.hidden\n            }));\n            ci.update();\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [airQualityData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deeper-sleep-banner\",\n      style: {\n        backgroundColor: '#90c789',\n        color: '#1a472a',\n        padding: '20px',\n        borderRadius: '8px',\n        marginBottom: '20px',\n        textAlign: 'center',\n        fontSize: '1.5rem',\n        fontWeight: 'bold'\n      },\n      children: [calculateDeeperSleepMinutes(airQualityData, hasHVAC, hasEcologica).toLocaleString(), \" minutes of deeper sleep\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [firstName ? `${firstName}'s ` : '', city, \" Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"PM2.5 Levels\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 15\n            }, this), chartData && chartData.pm25 && /*#__PURE__*/_jsxDEV(Line, {\n              data: chartData.pm25,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-title\",\n              children: \"KEY DATA POINTS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-points\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 2.5', 10)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 430,\n                    columnNumber: 30\n                  }, this), 10, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 429,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 2.5', 20)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 439,\n                    columnNumber: 30\n                  }, this), 20, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 438,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverPeak(airQualityData, 'PM 2.5', 50)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 444,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 448,\n                    columnNumber: 30\n                  }, this), 50, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"PM10 Levels\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this), chartData && chartData.pm10 && /*#__PURE__*/_jsxDEV(Line, {\n              data: chartData.pm10,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-side\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-title\",\n              children: \"KEY DATA POINTS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"key-data-points\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 10', 20)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 476,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 480,\n                    columnNumber: 30\n                  }, this), 20, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 479,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverThreshold(airQualityData, 'PM 10', 40)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 489,\n                    columnNumber: 30\n                  }, this), 40, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 488,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"key-data-point\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-number\",\n                  children: calculateDaysOverPeak(airQualityData, 'PM 10', 50)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 494,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"key-data-label\",\n                  children: [\"days over\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 498,\n                    columnNumber: 30\n                  }, this), 50, \"ug/m\\xB3\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 497,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 493,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 389,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"IYlBoNEGQkx3RnwkflcUAGum+i8=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","jsxDEV","_jsxDEV","register","defaults","responsive","maintainAspectRatio","calculateHVACReduction","value","calculateEcologicaReduction","calculateCombinedReduction","getLast30Days","data","Array","isArray","length","validData","map","item","date","Date","parseFloat","city","City","temp","Temp","filter","isNaN","getTime","sort","a","b","mostRecentDate","cutoffDate","setDate","getDate","calculateDaysOverThreshold","pollutantType","threshold","last30Days","day","calculateDaysOverPeak","calculateDeeperSleepMinutes","hasHVAC","hasEcologica","getAdjustedValue","daysUnderThreshold","adjustedValue","deeperSleepMinutes","Dashboard","_s","airQualityData","setAirQualityData","chartData","setChartData","isLoading","setIsLoading","setHasHVAC","setHasEcologica","setCity","firstName","setFirstName","activeDatasets","setActiveDatasets","processChartData","datasets","label","d","x","y","borderColor","backgroundColor","borderWidth","tension","hidden","push","_airQualityData$","_airQualityData$2","console","log","sampleDataPoint","pm10Value","pm25Value","pm25","pm10","getLast100Days","getAllValidData","fetchPreferences","user","auth","getUser","error","from","select","eq","id","single","has_HVAC","has_ecologgica","prev","fetchAirQualityData","_data$","_data$2","response","fetch","ok","Error","status","json","firstRow","pm25Example","pm10Example","last30DaysData","chartOptions","scales","type","time","unit","grid","display","color","beginAtZero","ticks","callback","plugins","tooltip","mode","intersect","callbacks","context","dataset","parsed","toFixed","legend","position","labels","usePointStyle","padding","onClick","event","legendItem","index","datasetIndex","ci","chart","meta","getDatasetMeta","text","update","className","children","style","borderRadius","marginBottom","textAlign","fontSize","fontWeight","toLocaleString","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\n\nconst calculateHVACReduction = (value) => {\n  return value * 0.7; // 30% reduction\n};\n\nconst calculateEcologicaReduction = (value) => {\n  return value * 0.6; // 40% reduction\n};\n\nconst calculateCombinedReduction = (value) => {\n  return value * 0.5; // 50% reduction\n};\n\nconst getLast30Days = (data) => {\n  if (!Array.isArray(data) || data.length === 0) return [];\n\n  const validData = data\n    .map(item => ({\n      date: new Date(item.Date),\n      'PM 2.5': parseFloat(item['PM 2.5']),\n      'PM 10': parseFloat(item['PM 10']),\n      city: item.City,\n      temp: item.Temp\n    }))\n    .filter(item => \n      !isNaN(item.date.getTime()) && \n      !isNaN(item['PM 10']) && \n      !isNaN(item['PM 2.5']) &&\n      item.city === city\n    )\n    .sort((a, b) => b.date - a.date);\n\n  if (validData.length === 0) return [];\n\n  const mostRecentDate = validData[0].date;\n  const cutoffDate = new Date(mostRecentDate);\n  cutoffDate.setDate(cutoffDate.getDate() - 30);\n\n  return validData\n    .filter(item => item.date >= cutoffDate)\n    .sort((a, b) => a.date - b.date);\n};\n\nconst calculateDaysOverThreshold = (data, pollutantType, threshold) => {\n  const last30Days = getLast30Days(data);\n  return last30Days.filter(day => \n    parseFloat(day[pollutantType]) > threshold\n  ).length;\n};\n\nconst calculateDaysOverPeak = (data, pollutantType, threshold) => {\n  const last30Days = getLast30Days(data);\n  return last30Days.filter(day => \n    parseFloat(day[pollutantType]) > threshold\n  ).length;\n};\n\nconst calculateDeeperSleepMinutes = (data, hasHVAC, hasEcologica) => {\n  const last30Days = getLast30Days(data);\n  const getAdjustedValue = (value) => {\n    if (hasHVAC && hasEcologica) {\n      return calculateCombinedReduction(value);\n    } else if (hasHVAC) {\n      return calculateHVACReduction(value);\n    } else if (hasEcologica) {\n      return calculateEcologicaReduction(value);\n    }\n    return value;\n  };\n\n  const daysUnderThreshold = last30Days.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  const deeperSleepMinutes = daysUnderThreshold * 8 * 60;\n  return deeperSleepMinutes;\n};\n\nconst Dashboard = () => {\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Original PM2.5': true,\n    'PM2.5 with HVAC': false,\n    'PM2.5 with Ecologica': false,\n    'PM2.5 with Both': false,\n    'Original PM10': true,\n    'PM10 with HVAC': false,\n    'PM10 with Ecologica': false,\n    'PM10 with Both': false\n  });\n\n  const processChartData = (data, pollutantType) => {\n    const datasets = [\n      {\n        label: `Original ${pollutantType}`,\n        data: data.map(d => ({\n          x: d.date,\n          y: pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5'])\n        })),\n        borderColor: 'rgb(0, 100, 0)', // Dark green\n        backgroundColor: 'rgba(0, 100, 0, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`Original ${pollutantType}`]\n      }\n    ];\n\n    if (hasHVAC) {\n      datasets.push({\n        label: `${pollutantType} with HVAC`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateHVACReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(34, 139, 34)', // Forest green\n        backgroundColor: 'rgba(34, 139, 34, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`${pollutantType} with HVAC`]\n      });\n    }\n\n    if (hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Ecologica`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateEcologicaReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(60, 179, 113)', // Medium sea green\n        backgroundColor: 'rgba(60, 179, 113, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`${pollutantType} with Ecologica`]\n      });\n    }\n\n    if (hasHVAC && hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Both`,\n        data: data.map(d => ({\n          x: d.date,\n          y: calculateCombinedReduction(pollutantType === 'PM10' ? parseFloat(d['PM 10']) : parseFloat(d['PM 2.5']))\n        })),\n        borderColor: 'rgb(144, 238, 144)', // Light green\n        backgroundColor: 'rgba(144, 238, 144, 0.1)',\n        borderWidth: 2,\n        tension: 0.1,\n        hidden: !activeDatasets[`${pollutantType} with Both`]\n      });\n    }\n\n    return { datasets };\n  };\n\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      console.log('Setting chart data with:', {\n        sampleDataPoint: airQualityData[0],\n        pm10Value: airQualityData[0]?.['PM 10'],\n        pm25Value: airQualityData[0]?.['PM 2.5']\n      });\n      \n      setChartData({\n        pm25: processChartData(airQualityData, 'PM2.5'),\n        pm10: processChartData(airQualityData, 'PM10')\n      });\n    }\n  }, [airQualityData, hasHVAC, hasEcologica, activeDatasets]);\n\n  const getLast100Days = (data) => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n\n    const validData = data\n      .map(item => ({\n        date: new Date(item.Date),\n        'PM 2.5': parseFloat(item['PM 2.5']),\n        'PM 10': parseFloat(item['PM 10']),\n        city: item.City,\n        temp: item.Temp\n      }))\n      .filter(item => \n        !isNaN(item.date.getTime()) && \n        !isNaN(item['PM 10']) && \n        !isNaN(item['PM 2.5']) &&\n        item.city === city\n      )\n      .sort((a, b) => b.date - a.date);\n\n    if (validData.length === 0) return [];\n\n    const mostRecentDate = validData[0].date;\n    const cutoffDate = new Date(mostRecentDate);\n    cutoffDate.setDate(cutoffDate.getDate() - 100);\n\n    return validData\n      .filter(item => item.date >= cutoffDate)\n      .sort((a, b) => a.date - b.date);\n  };\n\n  const getAllValidData = (data) => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n\n    return data\n      .map(item => ({\n        date: new Date(item.Date),\n        'PM 2.5': parseFloat(item['PM 2.5']),\n        'PM 10': parseFloat(item['PM 10']),\n        city: item.City,\n        temp: item.Temp\n      }))\n      .filter(item => \n        !isNaN(item.date.getTime()) && \n        !isNaN(item['PM 10']) && \n        !isNaN(item['PM 2.5']) &&\n        item.city === city\n      )\n      .sort((a, b) => a.date - b.date);\n  };\n\n  useEffect(() => {\n    async function fetchPreferences() {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) return;\n\n        const { data, error } = await supabase\n          .from('user_preferences')\n          .select('has_HVAC, has_ecologgica, city')\n          .eq('user_id', user.id)\n          .single();\n\n        console.log('Fetched preferences:', data);\n\n        if (error) {\n          console.error('Error fetching preferences:', error);\n          return;\n        }\n\n        if (data) {\n          console.log('Setting city to:', data.city);\n          setCity(data.city);\n          setHasHVAC(data.has_HVAC);\n          setHasEcologica(data.has_ecologgica);\n          \n          setActiveDatasets(prev => ({\n            ...prev,\n            'PM2.5 with HVAC': data.has_HVAC,\n            'PM2.5 with Ecologica': data.has_ecologgica,\n            'PM2.5 with Both': (data.has_HVAC && data.has_ecologgica),\n            'PM10 with HVAC': data.has_HVAC,\n            'PM10 with Ecologica': data.has_ecologgica,\n            'PM10 with Both': (data.has_HVAC && data.has_ecologgica)\n          }));\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n\n    fetchPreferences();\n  }, []);\n\n  const fetchAirQualityData = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/airqualitydata?city=${city}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Raw data from API:', {\n        city: city,\n        firstRow: data[0],\n        pm25Example: data[0]?.['PM 2.5'],\n        pm10Example: data[0]?.['PM 10']\n      });\n      const last30DaysData = getLast30Days(data.filter(item => item.City === city));\n      setAirQualityData(last30DaysData);\n    } catch (error) {\n      console.error('Error fetching air quality:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAirQualityData();\n  }, [city]);\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: true,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day'\n        },\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)',\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)',\n        },\n        ticks: {\n          callback: function(value) {\n            return value + ' ug/m³';\n          }\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} ug/m³`;\n          }\n        }\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          padding: 15,\n          onClick: (event, legendItem, legend) => {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            const meta = ci.getDatasetMeta(index);\n\n            meta.hidden = !meta.hidden;\n\n            setActiveDatasets(prev => ({\n              ...prev,\n              [legendItem.text]: !meta.hidden\n            }));\n\n            ci.update();\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"dashboard\">\n      {airQualityData.length > 0 && (\n        <div className=\"deeper-sleep-banner\" style={{\n          backgroundColor: '#90c789',\n          color: '#1a472a',\n          padding: '20px',\n          borderRadius: '8px',\n          marginBottom: '20px',\n          textAlign: 'center',\n          fontSize: '1.5rem',\n          fontWeight: 'bold'\n        }}>\n          {calculateDeeperSleepMinutes(airQualityData, hasHVAC, hasEcologica).toLocaleString()} minutes of deeper sleep\n        </div>\n      )}\n      <h1>{firstName ? `${firstName}'s ` : ''}{city} Dashboard</h1>\n      \n      <div className=\"dashboard-container\">\n        {/* PM2.5 Section */}\n        <div className=\"dashboard-section\">\n          <div className=\"content-wrapper\">\n            <div className=\"chart-side\">\n              <h2>PM2.5 Levels</h2>\n              {chartData && chartData.pm25 && (\n                <Line\n                  data={chartData.pm25}\n                  options={chartOptions}\n                />\n              )}\n            </div>\n            \n            <div className=\"data-side\">\n              <div className=\"key-data-title\">\n                KEY DATA POINTS\n              </div>\n              <div className=\"key-data-points\">\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 2.5', 10)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {10}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 2.5', 20)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {20}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverPeak(airQualityData, 'PM 2.5', 50)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {50}ug/m³\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* PM10 Section */}\n        <div className=\"dashboard-section\">\n          <div className=\"content-wrapper\">\n            <div className=\"chart-side\">\n              <h2>PM10 Levels</h2>\n              {chartData && chartData.pm10 && (\n                <Line\n                  data={chartData.pm10}\n                  options={chartOptions}\n                />\n              )}\n            </div>\n            \n            <div className=\"data-side\">\n              <div className=\"key-data-title\">\n                KEY DATA POINTS\n              </div>\n              <div className=\"key-data-points\">\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 10', 20)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {20}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverThreshold(airQualityData, 'PM 10', 40)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {40}ug/m³\n                  </span>\n                </div>\n                <div className=\"key-data-point\">\n                  <span className=\"key-data-number\">\n                    {calculateDaysOverPeak(airQualityData, 'PM 10', 50)}\n                  </span>\n                  <span className=\"key-data-label\">\n                    days over<br />\n                    {50}ug/m³\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}