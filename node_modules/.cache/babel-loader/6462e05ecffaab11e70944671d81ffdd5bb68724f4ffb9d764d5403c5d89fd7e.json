{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/airqualiti3/src/pages/dashboard/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport PM25Chart from '../../components/charts/PM25Chart';\nimport PM10Chart from '../../components/charts/PM10Chart';\nimport CityComparisonChart from '../../components/charts/CityComparisonChart';\nimport AnxietyRiskChart from '../../components/charts/AnxietyRiskChart';\nimport HealthImpactPanel from '../../components/HealthImpactPanel';\nimport '../../styles/style.css';\n\n// Cache management functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CACHE_DURATION = 30 * 60 * 1000; // 30 minutes in milliseconds\n\nconst getCachedData = city => {\n  try {\n    const cached = localStorage.getItem(`airquality_${city}`);\n    if (cached) {\n      const {\n        data,\n        timestamp\n      } = JSON.parse(cached);\n      // Check if cache is still valid (within 30 minutes)\n      if (Date.now() - timestamp < CACHE_DURATION) {\n        return data;\n      }\n    }\n    return null;\n  } catch (error) {\n    console.error('Error reading from cache:', error);\n    return null;\n  }\n};\nconst setCachedData = (city, data) => {\n  try {\n    localStorage.setItem(`airquality_${city}`, JSON.stringify({\n      data,\n      timestamp: Date.now()\n    }));\n  } catch (error) {\n    console.error('Error writing to cache:', error);\n  }\n};\n\n// Function to fetch data from OpenAQ API\nconst fetchOpenAQData = async (city, coordinates) => {\n  try {\n    // Calculate date range for 60 days\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 60);\n\n    // Use CORS.sh proxy - more reliable than cors-anywhere\n    const proxyUrl = 'https://proxy.cors.sh/';\n    const openAQUrl = `https://api.openaq.org/v3/measurements?coordinates=${coordinates.lat},${coordinates.lon}&radius=10000&date_from=${startDate.toISOString()}&date_to=${endDate.toISOString()}&parameter=pm25,pm10&limit=1000`;\n\n    // Get historical air quality data\n    const response = await fetch(proxyUrl + encodeURIComponent(openAQUrl), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-cors-api-key': 'temp_f0e6fb4e1c88d568c2e34bf30f544e0f',\n        // Free tier API key\n        'Origin': window.location.origin\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data.results || data.results.length === 0) {\n      console.log('No data available for location:', city);\n      return [];\n    }\n\n    // Group measurements by day\n    const measurementsByDay = data.results.reduce((acc, measurement) => {\n      const date = new Date(measurement.date.utc).toISOString().split('T')[0];\n      if (!acc[date]) {\n        acc[date] = {\n          'PM 2.5': null,\n          'PM 10': null,\n          measurements: []\n        };\n      }\n      acc[date].measurements.push(measurement);\n\n      // Update PM values based on parameter\n      if (measurement.parameter === 'pm25') {\n        acc[date]['PM 2.5'] = measurement.value;\n      } else if (measurement.parameter === 'pm10') {\n        acc[date]['PM 10'] = measurement.value;\n      }\n      return acc;\n    }, {});\n\n    // Convert to array and format for our app\n    return Object.entries(measurementsByDay).map(([date, data]) => ({\n      date: new Date(date).toISOString(),\n      'PM 2.5': data['PM 2.5'],\n      'PM 10': data['PM 10'],\n      city: city,\n      health_impact: calculateHealthImpact({\n        parameters: [{\n          parameter: 'pm25',\n          value: data['PM 2.5']\n        }, {\n          parameter: 'pm10',\n          value: data['PM 10']\n        }]\n      }),\n      who_guidelines: getWHOGuidelines({\n        parameters: [{\n          parameter: 'pm25',\n          value: data['PM 2.5']\n        }, {\n          parameter: 'pm10',\n          value: data['PM 10']\n        }]\n      }),\n      source: 'openaq'\n    }));\n  } catch (error) {\n    console.error('Error fetching OpenAQ data:', error);\n    return [];\n  }\n};\n\n// Helper function to calculate health impact based on PM2.5 and PM10 levels\nconst calculateHealthImpact = measurement => {\n  var _measurement$paramete, _measurement$paramete2;\n  const pm25 = (_measurement$paramete = measurement.parameters.find(p => p.parameter === 'pm25')) === null || _measurement$paramete === void 0 ? void 0 : _measurement$paramete.value;\n  const pm10 = (_measurement$paramete2 = measurement.parameters.find(p => p.parameter === 'pm10')) === null || _measurement$paramete2 === void 0 ? void 0 : _measurement$paramete2.value;\n  if (!pm25 && !pm10) return 'No data available';\n\n  // Using WHO guidelines for health impact assessment\n  if (pm25 <= 10 && pm10 <= 20) return 'Good';\n  if (pm25 <= 25 && pm10 <= 50) return 'Moderate';\n  if (pm25 <= 50 && pm10 <= 100) return 'Unhealthy for Sensitive Groups';\n  if (pm25 <= 75 && pm10 <= 200) return 'Unhealthy';\n  return 'Very Unhealthy';\n};\n\n// Helper function to get WHO guidelines status\nconst getWHOGuidelines = measurement => {\n  var _measurement$paramete3, _measurement$paramete4;\n  const pm25 = (_measurement$paramete3 = measurement.parameters.find(p => p.parameter === 'pm25')) === null || _measurement$paramete3 === void 0 ? void 0 : _measurement$paramete3.value;\n  const pm10 = (_measurement$paramete4 = measurement.parameters.find(p => p.parameter === 'pm10')) === null || _measurement$paramete4 === void 0 ? void 0 : _measurement$paramete4.value;\n  return {\n    'PM2.5': {\n      value: pm25,\n      threshold: 10,\n      exceeds: pm25 > 10\n    },\n    'PM10': {\n      value: pm10,\n      threshold: 20,\n      exceeds: pm10 > 20\n    }\n  };\n};\n\n// Utility function for deeper sleep calculation\nconst calculateDeeperSleepMinutes = (data, hasEcologica) => {\n  const getAdjustedValue = value => {\n    // Always apply indoor reduction first\n    const indoorValue = value * 0.7;\n    // Then apply Ecologica if present\n    if (hasEcologica) return value * 0.5;\n    return indoorValue;\n  };\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n  return daysUnderThreshold * 8 * 60;\n};\nconst Dashboard = () => {\n  _s();\n  const [userPreferences, setUserPreferences] = useState({\n    hasEcologica: false,\n    city: 'Toronto',\n    firstName: '',\n    anxietyLevel: 5\n  });\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [healthData, setHealthData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (!user) return;\n        const {\n          data,\n          error\n        } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n        if (error) throw error;\n        if (data) {\n          setUserPreferences({\n            hasEcologica: data.has_ecologgica || false,\n            city: data.city || 'Toronto',\n            firstName: data.first_name || '',\n            anxietyLevel: data.anxiety_base_level || 5\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n    fetchUserPreferences();\n  }, []);\n  const fetchAirQualityData = async () => {\n    try {\n      setIsLoading(true);\n      const cityCoordinates = {\n        'Toronto': {\n          lat: 43.6532,\n          lon: -79.3832\n        },\n        'Vancouver': {\n          lat: 49.2827,\n          lon: -123.1207\n        },\n        'Montreal': {\n          lat: 45.5017,\n          lon: -73.5673\n        },\n        'Boston': {\n          lat: 42.3601,\n          lon: -71.0589\n        },\n        'Calgary': {\n          lat: 51.0447,\n          lon: -114.0719\n        },\n        'Dallas': {\n          lat: 32.7767,\n          lon: -96.7970\n        },\n        'Edmonton': {\n          lat: 53.5461,\n          lon: -113.4938\n        },\n        'Miami': {\n          lat: 25.7617,\n          lon: -80.1918\n        },\n        'New York': {\n          lat: 40.7128,\n          lon: -74.0060\n        },\n        'San Francisco': {\n          lat: 37.7749,\n          lon: -122.4194\n        }\n      }[userPreferences.city] || {\n        lat: 43.6532,\n        lon: -79.3832\n      };\n\n      // Check cache first\n      const cachedData = getCachedData(userPreferences.city);\n      if (cachedData) {\n        console.log('Using cached data for:', userPreferences.city);\n        setAirQualityData(cachedData);\n        if (cachedData.length > 0) {\n          setHealthData({\n            pm25: cachedData[0]['PM 2.5'],\n            health_impact: cachedData[0].health_impact,\n            who_guidelines: cachedData[0].who_guidelines\n          });\n        }\n        setIsLoading(false);\n        return;\n      }\n\n      // Fetch from OpenAQ if no cache or cache expired\n      const data = await fetchOpenAQData(userPreferences.city, cityCoordinates);\n      if (!data || data.length === 0) {\n        console.log('No data available for:', userPreferences.city);\n        setAirQualityData([]);\n        setIsLoading(false);\n        return;\n      }\n\n      // Process and group the data by day\n      const measurementsByDay = data.reduce((acc, measurement) => {\n        const date = new Date(measurement.date.utc).toISOString().split('T')[0];\n        if (!acc[date]) {\n          acc[date] = {\n            'PM 2.5': null,\n            'PM 10': null,\n            measurements: []\n          };\n        }\n        acc[date].measurements.push(measurement);\n        if (measurement.parameter === 'pm25') {\n          acc[date]['PM 2.5'] = measurement.value;\n        } else if (measurement.parameter === 'pm10') {\n          acc[date]['PM 10'] = measurement.value;\n        }\n        return acc;\n      }, {});\n\n      // Convert to array format\n      const processedData = Object.entries(measurementsByDay).map(([date, data]) => ({\n        date: new Date(date).toISOString(),\n        'PM 2.5': data['PM 2.5'],\n        'PM 10': data['PM 10'],\n        city: userPreferences.city,\n        health_impact: calculateHealthImpact({\n          parameters: [{\n            parameter: 'pm25',\n            value: data['PM 2.5']\n          }, {\n            parameter: 'pm10',\n            value: data['PM 10']\n          }]\n        }),\n        who_guidelines: getWHOGuidelines({\n          parameters: [{\n            parameter: 'pm25',\n            value: data['PM 2.5']\n          }, {\n            parameter: 'pm10',\n            value: data['PM 10']\n          }]\n        }),\n        source: 'openaq'\n      })).sort((a, b) => new Date(b.date) - new Date(a.date));\n\n      // Cache the processed data\n      setCachedData(userPreferences.city, processedData);\n\n      // Update state\n      setAirQualityData(processedData);\n      if (processedData.length > 0) {\n        setHealthData({\n          pm25: processedData[0]['PM 2.5'],\n          health_impact: processedData[0].health_impact,\n          who_guidelines: processedData[0].who_guidelines\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching air quality data:', error);\n      // Show a more user-friendly error message in the UI\n      setError('Unable to fetch air quality data. Please try again later.');\n      setAirQualityData([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (userPreferences.city) {\n      fetchAirQualityData();\n    }\n    const interval = setInterval(() => {\n      if (userPreferences.city) {\n        fetchAirQualityData();\n      }\n    }, CACHE_DURATION); // Refresh when cache expires\n\n    return () => clearInterval(interval);\n  }, [userPreferences.city]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [userPreferences.firstName ? `${userPreferences.firstName}'s ` : '', \"Air Quality Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: /*#__PURE__*/_jsxDEV(HealthImpactPanel, {\n        healthData: healthData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"PM2.5 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PM25Chart, {\n            data: airQualityData,\n            userPreferences: userPreferences\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"PM10 Levels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PM10Chart, {\n        data: airQualityData,\n        userPreferences: userPreferences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"City Comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CityComparisonChart, {\n        data: airQualityData,\n        userPreferences: userPreferences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Anxiety Risk\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnxietyRiskChart, {\n        data: airQualityData,\n        userPreferences: userPreferences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 338,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"QVdCVq+FcWeyA1hkyVkLjI3RRF4=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","PM25Chart","PM10Chart","CityComparisonChart","AnxietyRiskChart","HealthImpactPanel","jsxDEV","_jsxDEV","CACHE_DURATION","getCachedData","city","cached","localStorage","getItem","data","timestamp","JSON","parse","Date","now","error","console","setCachedData","setItem","stringify","fetchOpenAQData","coordinates","endDate","startDate","setDate","getDate","proxyUrl","openAQUrl","lat","lon","toISOString","response","fetch","encodeURIComponent","method","headers","window","location","origin","ok","Error","status","json","results","length","log","measurementsByDay","reduce","acc","measurement","date","utc","split","measurements","push","parameter","value","Object","entries","map","health_impact","calculateHealthImpact","parameters","who_guidelines","getWHOGuidelines","source","_measurement$paramete","_measurement$paramete2","pm25","find","p","pm10","_measurement$paramete3","_measurement$paramete4","threshold","exceeds","calculateDeeperSleepMinutes","hasEcologica","getAdjustedValue","indoorValue","daysUnderThreshold","filter","day","adjustedValue","parseFloat","Dashboard","_s","userPreferences","setUserPreferences","firstName","anxietyLevel","airQualityData","setAirQualityData","healthData","setHealthData","isLoading","setIsLoading","setError","fetchUserPreferences","user","auth","getUser","from","select","eq","id","single","has_ecologgica","first_name","anxiety_base_level","fetchAirQualityData","cityCoordinates","cachedData","processedData","sort","a","b","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/airqualiti3/src/pages/dashboard/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport PM25Chart from '../../components/charts/PM25Chart';\nimport PM10Chart from '../../components/charts/PM10Chart';\nimport CityComparisonChart from '../../components/charts/CityComparisonChart';\nimport AnxietyRiskChart from '../../components/charts/AnxietyRiskChart';\nimport HealthImpactPanel from '../../components/HealthImpactPanel';\nimport '../../styles/style.css';\n\n// Cache management functions\nconst CACHE_DURATION = 30 * 60 * 1000; // 30 minutes in milliseconds\n\nconst getCachedData = (city) => {\n  try {\n    const cached = localStorage.getItem(`airquality_${city}`);\n    if (cached) {\n      const { data, timestamp } = JSON.parse(cached);\n      // Check if cache is still valid (within 30 minutes)\n      if (Date.now() - timestamp < CACHE_DURATION) {\n        return data;\n      }\n    }\n    return null;\n  } catch (error) {\n    console.error('Error reading from cache:', error);\n    return null;\n  }\n};\n\nconst setCachedData = (city, data) => {\n  try {\n    localStorage.setItem(`airquality_${city}`, JSON.stringify({\n      data,\n      timestamp: Date.now()\n    }));\n  } catch (error) {\n    console.error('Error writing to cache:', error);\n  }\n};\n\n// Function to fetch data from OpenAQ API\nconst fetchOpenAQData = async (city, coordinates) => {\n  try {\n    // Calculate date range for 60 days\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 60);\n\n    // Use CORS.sh proxy - more reliable than cors-anywhere\n    const proxyUrl = 'https://proxy.cors.sh/';\n    const openAQUrl = `https://api.openaq.org/v3/measurements?coordinates=${coordinates.lat},${coordinates.lon}&radius=10000&date_from=${startDate.toISOString()}&date_to=${endDate.toISOString()}&parameter=pm25,pm10&limit=1000`;\n    \n    // Get historical air quality data\n    const response = await fetch(proxyUrl + encodeURIComponent(openAQUrl), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-cors-api-key': 'temp_f0e6fb4e1c88d568c2e34bf30f544e0f', // Free tier API key\n        'Origin': window.location.origin\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (!data.results || data.results.length === 0) {\n      console.log('No data available for location:', city);\n      return [];\n    }\n\n    // Group measurements by day\n    const measurementsByDay = data.results.reduce((acc, measurement) => {\n      const date = new Date(measurement.date.utc).toISOString().split('T')[0];\n      if (!acc[date]) {\n        acc[date] = {\n          'PM 2.5': null,\n          'PM 10': null,\n          measurements: []\n        };\n      }\n      acc[date].measurements.push(measurement);\n      \n      // Update PM values based on parameter\n      if (measurement.parameter === 'pm25') {\n        acc[date]['PM 2.5'] = measurement.value;\n      } else if (measurement.parameter === 'pm10') {\n        acc[date]['PM 10'] = measurement.value;\n      }\n      \n      return acc;\n    }, {});\n\n    // Convert to array and format for our app\n    return Object.entries(measurementsByDay).map(([date, data]) => ({\n      date: new Date(date).toISOString(),\n      'PM 2.5': data['PM 2.5'],\n      'PM 10': data['PM 10'],\n      city: city,\n      health_impact: calculateHealthImpact({ parameters: [\n        { parameter: 'pm25', value: data['PM 2.5'] },\n        { parameter: 'pm10', value: data['PM 10'] }\n      ]}),\n      who_guidelines: getWHOGuidelines({ parameters: [\n        { parameter: 'pm25', value: data['PM 2.5'] },\n        { parameter: 'pm10', value: data['PM 10'] }\n      ]}),\n      source: 'openaq'\n    }));\n  } catch (error) {\n    console.error('Error fetching OpenAQ data:', error);\n    return [];\n  }\n};\n\n// Helper function to calculate health impact based on PM2.5 and PM10 levels\nconst calculateHealthImpact = (measurement) => {\n  const pm25 = measurement.parameters.find(p => p.parameter === 'pm25')?.value;\n  const pm10 = measurement.parameters.find(p => p.parameter === 'pm10')?.value;\n  \n  if (!pm25 && !pm10) return 'No data available';\n  \n  // Using WHO guidelines for health impact assessment\n  if (pm25 <= 10 && pm10 <= 20) return 'Good';\n  if (pm25 <= 25 && pm10 <= 50) return 'Moderate';\n  if (pm25 <= 50 && pm10 <= 100) return 'Unhealthy for Sensitive Groups';\n  if (pm25 <= 75 && pm10 <= 200) return 'Unhealthy';\n  return 'Very Unhealthy';\n};\n\n// Helper function to get WHO guidelines status\nconst getWHOGuidelines = (measurement) => {\n  const pm25 = measurement.parameters.find(p => p.parameter === 'pm25')?.value;\n  const pm10 = measurement.parameters.find(p => p.parameter === 'pm10')?.value;\n  \n  return {\n    'PM2.5': {\n      value: pm25,\n      threshold: 10,\n      exceeds: pm25 > 10\n    },\n    'PM10': {\n      value: pm10,\n      threshold: 20,\n      exceeds: pm10 > 20\n    }\n  };\n};\n\n// Utility function for deeper sleep calculation\nconst calculateDeeperSleepMinutes = (data, hasEcologica) => {\n  const getAdjustedValue = (value) => {\n    // Always apply indoor reduction first\n    const indoorValue = value * 0.7;\n    // Then apply Ecologica if present\n    if (hasEcologica) return value * 0.5;\n    return indoorValue;\n  };\n\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  return daysUnderThreshold * 8 * 60;\n};\n\nconst Dashboard = () => {\n  const [userPreferences, setUserPreferences] = useState({\n    hasEcologica: false,\n    city: 'Toronto',\n    firstName: '',\n    anxietyLevel: 5\n  });\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [healthData, setHealthData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) return;\n\n        const { data, error } = await supabase\n          .from('user_preferences')\n          .select('*')\n          .eq('user_id', user.id)\n          .single();\n\n        if (error) throw error;\n        \n        if (data) {\n          setUserPreferences({\n            hasEcologica: data.has_ecologgica || false,\n            city: data.city || 'Toronto',\n            firstName: data.first_name || '',\n            anxietyLevel: data.anxiety_base_level || 5\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n\n    fetchUserPreferences();\n  }, []);\n\n  const fetchAirQualityData = async () => {\n    try {\n      setIsLoading(true);\n\n      const cityCoordinates = {\n        'Toronto': { lat: 43.6532, lon: -79.3832 },\n        'Vancouver': { lat: 49.2827, lon: -123.1207 },\n        'Montreal': { lat: 45.5017, lon: -73.5673 },\n        'Boston': { lat: 42.3601, lon: -71.0589 },\n        'Calgary': { lat: 51.0447, lon: -114.0719 },\n        'Dallas': { lat: 32.7767, lon: -96.7970 },\n        'Edmonton': { lat: 53.5461, lon: -113.4938 },\n        'Miami': { lat: 25.7617, lon: -80.1918 },\n        'New York': { lat: 40.7128, lon: -74.0060 },\n        'San Francisco': { lat: 37.7749, lon: -122.4194 }\n      }[userPreferences.city] || { lat: 43.6532, lon: -79.3832 };\n\n      // Check cache first\n      const cachedData = getCachedData(userPreferences.city);\n      if (cachedData) {\n        console.log('Using cached data for:', userPreferences.city);\n        setAirQualityData(cachedData);\n        if (cachedData.length > 0) {\n          setHealthData({\n            pm25: cachedData[0]['PM 2.5'],\n            health_impact: cachedData[0].health_impact,\n            who_guidelines: cachedData[0].who_guidelines\n          });\n        }\n        setIsLoading(false);\n        return;\n      }\n\n      // Fetch from OpenAQ if no cache or cache expired\n      const data = await fetchOpenAQData(userPreferences.city, cityCoordinates);\n      \n      if (!data || data.length === 0) {\n        console.log('No data available for:', userPreferences.city);\n        setAirQualityData([]);\n        setIsLoading(false);\n        return;\n      }\n\n      // Process and group the data by day\n      const measurementsByDay = data.reduce((acc, measurement) => {\n        const date = new Date(measurement.date.utc).toISOString().split('T')[0];\n        if (!acc[date]) {\n          acc[date] = {\n            'PM 2.5': null,\n            'PM 10': null,\n            measurements: []\n          };\n        }\n        acc[date].measurements.push(measurement);\n        \n        if (measurement.parameter === 'pm25') {\n          acc[date]['PM 2.5'] = measurement.value;\n        } else if (measurement.parameter === 'pm10') {\n          acc[date]['PM 10'] = measurement.value;\n        }\n        \n        return acc;\n      }, {});\n\n      // Convert to array format\n      const processedData = Object.entries(measurementsByDay)\n        .map(([date, data]) => ({\n          date: new Date(date).toISOString(),\n          'PM 2.5': data['PM 2.5'],\n          'PM 10': data['PM 10'],\n          city: userPreferences.city,\n          health_impact: calculateHealthImpact({\n            parameters: [\n              { parameter: 'pm25', value: data['PM 2.5'] },\n              { parameter: 'pm10', value: data['PM 10'] }\n            ]\n          }),\n          who_guidelines: getWHOGuidelines({\n            parameters: [\n              { parameter: 'pm25', value: data['PM 2.5'] },\n              { parameter: 'pm10', value: data['PM 10'] }\n            ]\n          }),\n          source: 'openaq'\n        }))\n        .sort((a, b) => new Date(b.date) - new Date(a.date));\n\n      // Cache the processed data\n      setCachedData(userPreferences.city, processedData);\n\n      // Update state\n      setAirQualityData(processedData);\n      if (processedData.length > 0) {\n        setHealthData({\n          pm25: processedData[0]['PM 2.5'],\n          health_impact: processedData[0].health_impact,\n          who_guidelines: processedData[0].who_guidelines\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching air quality data:', error);\n      // Show a more user-friendly error message in the UI\n      setError('Unable to fetch air quality data. Please try again later.');\n      setAirQualityData([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (userPreferences.city) {\n      fetchAirQualityData();\n    }\n\n    const interval = setInterval(() => {\n      if (userPreferences.city) {\n        fetchAirQualityData();\n      }\n    }, CACHE_DURATION); // Refresh when cache expires\n\n    return () => clearInterval(interval);\n  }, [userPreferences.city]);\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"dashboard\">\n      <h1>\n        {userPreferences.firstName ? `${userPreferences.firstName}'s ` : ''}\n        Air Quality Dashboard\n      </h1>\n      \n      <div className=\"dashboard-section\">\n        <HealthImpactPanel healthData={healthData} />\n      </div>\n\n      <div className=\"dashboard-section\">\n        <div className=\"chart-container\">\n          <div className=\"chart-area\">\n            <h2>PM2.5 Levels</h2>\n            <PM25Chart data={airQualityData} userPreferences={userPreferences} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"dashboard-section\">\n        <h2>PM10 Levels</h2>\n        <PM10Chart data={airQualityData} userPreferences={userPreferences} />\n      </div>\n\n      <div className=\"dashboard-section\">\n        <h2>City Comparison</h2>\n        <CityComparisonChart data={airQualityData} userPreferences={userPreferences} />\n      </div>\n\n      <div className=\"dashboard-section\">\n        <h2>Anxiety Risk</h2>\n        <AnxietyRiskChart data={airQualityData} userPreferences={userPreferences} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,OAAOC,SAAS,MAAM,mCAAmC;AACzD,OAAOC,SAAS,MAAM,mCAAmC;AACzD,OAAOC,mBAAmB,MAAM,6CAA6C;AAC7E,OAAOC,gBAAgB,MAAM,0CAA0C;AACvE,OAAOC,iBAAiB,MAAM,oCAAoC;AAClE,OAAO,wBAAwB;;AAE/B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;AAEvC,MAAMC,aAAa,GAAIC,IAAI,IAAK;EAC9B,IAAI;IACF,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAcH,IAAI,EAAE,CAAC;IACzD,IAAIC,MAAM,EAAE;MACV,MAAM;QAAEG,IAAI;QAAEC;MAAU,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACN,MAAM,CAAC;MAC9C;MACA,IAAIO,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGJ,SAAS,GAAGP,cAAc,EAAE;QAC3C,OAAOM,IAAI;MACb;IACF;IACA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAME,aAAa,GAAGA,CAACZ,IAAI,EAAEI,IAAI,KAAK;EACpC,IAAI;IACFF,YAAY,CAACW,OAAO,CAAC,cAAcb,IAAI,EAAE,EAAEM,IAAI,CAACQ,SAAS,CAAC;MACxDV,IAAI;MACJC,SAAS,EAAEG,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD;AACF,CAAC;;AAED;AACA,MAAMK,eAAe,GAAG,MAAAA,CAAOf,IAAI,EAAEgB,WAAW,KAAK;EACnD,IAAI;IACF;IACA,MAAMC,OAAO,GAAG,IAAIT,IAAI,CAAC,CAAC;IAC1B,MAAMU,SAAS,GAAG,IAAIV,IAAI,CAAC,CAAC;IAC5BU,SAAS,CAACC,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;;IAE3C;IACA,MAAMC,QAAQ,GAAG,wBAAwB;IACzC,MAAMC,SAAS,GAAG,sDAAsDN,WAAW,CAACO,GAAG,IAAIP,WAAW,CAACQ,GAAG,2BAA2BN,SAAS,CAACO,WAAW,CAAC,CAAC,YAAYR,OAAO,CAACQ,WAAW,CAAC,CAAC,iCAAiC;;IAE9N;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,QAAQ,GAAGO,kBAAkB,CAACN,SAAS,CAAC,EAAE;MACrEO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,gBAAgB,EAAE,uCAAuC;QAAE;QAC3D,QAAQ,EAAEC,MAAM,CAACC,QAAQ,CAACC;MAC5B;IACF,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACU,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMhC,IAAI,GAAG,MAAMsB,QAAQ,CAACW,IAAI,CAAC,CAAC;IAElC,IAAI,CAACjC,IAAI,CAACkC,OAAO,IAAIlC,IAAI,CAACkC,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;MAC9C5B,OAAO,CAAC6B,GAAG,CAAC,iCAAiC,EAAExC,IAAI,CAAC;MACpD,OAAO,EAAE;IACX;;IAEA;IACA,MAAMyC,iBAAiB,GAAGrC,IAAI,CAACkC,OAAO,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,WAAW,KAAK;MAClE,MAAMC,IAAI,GAAG,IAAIrC,IAAI,CAACoC,WAAW,CAACC,IAAI,CAACC,GAAG,CAAC,CAACrB,WAAW,CAAC,CAAC,CAACsB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACvE,IAAI,CAACJ,GAAG,CAACE,IAAI,CAAC,EAAE;QACdF,GAAG,CAACE,IAAI,CAAC,GAAG;UACV,QAAQ,EAAE,IAAI;UACd,OAAO,EAAE,IAAI;UACbG,YAAY,EAAE;QAChB,CAAC;MACH;MACAL,GAAG,CAACE,IAAI,CAAC,CAACG,YAAY,CAACC,IAAI,CAACL,WAAW,CAAC;;MAExC;MACA,IAAIA,WAAW,CAACM,SAAS,KAAK,MAAM,EAAE;QACpCP,GAAG,CAACE,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAGD,WAAW,CAACO,KAAK;MACzC,CAAC,MAAM,IAAIP,WAAW,CAACM,SAAS,KAAK,MAAM,EAAE;QAC3CP,GAAG,CAACE,IAAI,CAAC,CAAC,OAAO,CAAC,GAAGD,WAAW,CAACO,KAAK;MACxC;MAEA,OAAOR,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEN;IACA,OAAOS,MAAM,CAACC,OAAO,CAACZ,iBAAiB,CAAC,CAACa,GAAG,CAAC,CAAC,CAACT,IAAI,EAAEzC,IAAI,CAAC,MAAM;MAC9DyC,IAAI,EAAE,IAAIrC,IAAI,CAACqC,IAAI,CAAC,CAACpB,WAAW,CAAC,CAAC;MAClC,QAAQ,EAAErB,IAAI,CAAC,QAAQ,CAAC;MACxB,OAAO,EAAEA,IAAI,CAAC,OAAO,CAAC;MACtBJ,IAAI,EAAEA,IAAI;MACVuD,aAAa,EAAEC,qBAAqB,CAAC;QAAEC,UAAU,EAAE,CACjD;UAAEP,SAAS,EAAE,MAAM;UAAEC,KAAK,EAAE/C,IAAI,CAAC,QAAQ;QAAE,CAAC,EAC5C;UAAE8C,SAAS,EAAE,MAAM;UAAEC,KAAK,EAAE/C,IAAI,CAAC,OAAO;QAAE,CAAC;MAC5C,CAAC,CAAC;MACHsD,cAAc,EAAEC,gBAAgB,CAAC;QAAEF,UAAU,EAAE,CAC7C;UAAEP,SAAS,EAAE,MAAM;UAAEC,KAAK,EAAE/C,IAAI,CAAC,QAAQ;QAAE,CAAC,EAC5C;UAAE8C,SAAS,EAAE,MAAM;UAAEC,KAAK,EAAE/C,IAAI,CAAC,OAAO;QAAE,CAAC;MAC5C,CAAC,CAAC;MACHwD,MAAM,EAAE;IACV,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOlD,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,MAAM8C,qBAAqB,GAAIZ,WAAW,IAAK;EAAA,IAAAiB,qBAAA,EAAAC,sBAAA;EAC7C,MAAMC,IAAI,IAAAF,qBAAA,GAAGjB,WAAW,CAACa,UAAU,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACf,SAAS,KAAK,MAAM,CAAC,cAAAW,qBAAA,uBAAxDA,qBAAA,CAA0DV,KAAK;EAC5E,MAAMe,IAAI,IAAAJ,sBAAA,GAAGlB,WAAW,CAACa,UAAU,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACf,SAAS,KAAK,MAAM,CAAC,cAAAY,sBAAA,uBAAxDA,sBAAA,CAA0DX,KAAK;EAE5E,IAAI,CAACY,IAAI,IAAI,CAACG,IAAI,EAAE,OAAO,mBAAmB;;EAE9C;EACA,IAAIH,IAAI,IAAI,EAAE,IAAIG,IAAI,IAAI,EAAE,EAAE,OAAO,MAAM;EAC3C,IAAIH,IAAI,IAAI,EAAE,IAAIG,IAAI,IAAI,EAAE,EAAE,OAAO,UAAU;EAC/C,IAAIH,IAAI,IAAI,EAAE,IAAIG,IAAI,IAAI,GAAG,EAAE,OAAO,gCAAgC;EACtE,IAAIH,IAAI,IAAI,EAAE,IAAIG,IAAI,IAAI,GAAG,EAAE,OAAO,WAAW;EACjD,OAAO,gBAAgB;AACzB,CAAC;;AAED;AACA,MAAMP,gBAAgB,GAAIf,WAAW,IAAK;EAAA,IAAAuB,sBAAA,EAAAC,sBAAA;EACxC,MAAML,IAAI,IAAAI,sBAAA,GAAGvB,WAAW,CAACa,UAAU,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACf,SAAS,KAAK,MAAM,CAAC,cAAAiB,sBAAA,uBAAxDA,sBAAA,CAA0DhB,KAAK;EAC5E,MAAMe,IAAI,IAAAE,sBAAA,GAAGxB,WAAW,CAACa,UAAU,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACf,SAAS,KAAK,MAAM,CAAC,cAAAkB,sBAAA,uBAAxDA,sBAAA,CAA0DjB,KAAK;EAE5E,OAAO;IACL,OAAO,EAAE;MACPA,KAAK,EAAEY,IAAI;MACXM,SAAS,EAAE,EAAE;MACbC,OAAO,EAAEP,IAAI,GAAG;IAClB,CAAC;IACD,MAAM,EAAE;MACNZ,KAAK,EAAEe,IAAI;MACXG,SAAS,EAAE,EAAE;MACbC,OAAO,EAAEJ,IAAI,GAAG;IAClB;EACF,CAAC;AACH,CAAC;;AAED;AACA,MAAMK,2BAA2B,GAAGA,CAACnE,IAAI,EAAEoE,YAAY,KAAK;EAC1D,MAAMC,gBAAgB,GAAItB,KAAK,IAAK;IAClC;IACA,MAAMuB,WAAW,GAAGvB,KAAK,GAAG,GAAG;IAC/B;IACA,IAAIqB,YAAY,EAAE,OAAOrB,KAAK,GAAG,GAAG;IACpC,OAAOuB,WAAW;EACpB,CAAC;EAED,MAAMC,kBAAkB,GAAGvE,IAAI,CAACwE,MAAM,CAACC,GAAG,IAAI;IAC5C,MAAMC,aAAa,GAAGL,gBAAgB,CAACM,UAAU,CAACF,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjE,OAAOC,aAAa,IAAI,CAAC;EAC3B,CAAC,CAAC,CAACvC,MAAM;EAET,OAAOoC,kBAAkB,GAAG,CAAC,GAAG,EAAE;AACpC,CAAC;AAED,MAAMK,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAG/F,QAAQ,CAAC;IACrDoF,YAAY,EAAE,KAAK;IACnBxE,IAAI,EAAE,SAAS;IACfoF,SAAS,EAAE,EAAE;IACbC,YAAY,EAAE;EAChB,CAAC,CAAC;EACF,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGnG,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACoG,UAAU,EAAEC,aAAa,CAAC,GAAGrG,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACsG,SAAS,EAAEC,YAAY,CAAC,GAAGvG,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACsB,KAAK,EAAEkF,QAAQ,CAAC,GAAGxG,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMwG,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAI;QACF,MAAM;UAAEzF,IAAI,EAAE;YAAE0F;UAAK;QAAE,CAAC,GAAG,MAAMxG,QAAQ,CAACyG,IAAI,CAACC,OAAO,CAAC,CAAC;QACxD,IAAI,CAACF,IAAI,EAAE;QAEX,MAAM;UAAE1F,IAAI;UAAEM;QAAM,CAAC,GAAG,MAAMpB,QAAQ,CACnC2G,IAAI,CAAC,kBAAkB,CAAC,CACxBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,EAAEL,IAAI,CAACM,EAAE,CAAC,CACtBC,MAAM,CAAC,CAAC;QAEX,IAAI3F,KAAK,EAAE,MAAMA,KAAK;QAEtB,IAAIN,IAAI,EAAE;UACR+E,kBAAkB,CAAC;YACjBX,YAAY,EAAEpE,IAAI,CAACkG,cAAc,IAAI,KAAK;YAC1CtG,IAAI,EAAEI,IAAI,CAACJ,IAAI,IAAI,SAAS;YAC5BoF,SAAS,EAAEhF,IAAI,CAACmG,UAAU,IAAI,EAAE;YAChClB,YAAY,EAAEjF,IAAI,CAACoG,kBAAkB,IAAI;UAC3C,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAO9F,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAEDmF,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACFd,YAAY,CAAC,IAAI,CAAC;MAElB,MAAMe,eAAe,GAAG;QACtB,SAAS,EAAE;UAAEnF,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE,CAAC;QAAQ,CAAC;QAC1C,WAAW,EAAE;UAAED,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE,CAAC;QAAS,CAAC;QAC7C,UAAU,EAAE;UAAED,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE,CAAC;QAAQ,CAAC;QAC3C,QAAQ,EAAE;UAAED,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE,CAAC;QAAQ,CAAC;QACzC,SAAS,EAAE;UAAED,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE,CAAC;QAAS,CAAC;QAC3C,QAAQ,EAAE;UAAED,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE,CAAC;QAAQ,CAAC;QACzC,UAAU,EAAE;UAAED,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE,CAAC;QAAS,CAAC;QAC5C,OAAO,EAAE;UAAED,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE,CAAC;QAAQ,CAAC;QACxC,UAAU,EAAE;UAAED,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE,CAAC;QAAQ,CAAC;QAC3C,eAAe,EAAE;UAAED,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE,CAAC;QAAS;MAClD,CAAC,CAAC0D,eAAe,CAAClF,IAAI,CAAC,IAAI;QAAEuB,GAAG,EAAE,OAAO;QAAEC,GAAG,EAAE,CAAC;MAAQ,CAAC;;MAE1D;MACA,MAAMmF,UAAU,GAAG5G,aAAa,CAACmF,eAAe,CAAClF,IAAI,CAAC;MACtD,IAAI2G,UAAU,EAAE;QACdhG,OAAO,CAAC6B,GAAG,CAAC,wBAAwB,EAAE0C,eAAe,CAAClF,IAAI,CAAC;QAC3DuF,iBAAiB,CAACoB,UAAU,CAAC;QAC7B,IAAIA,UAAU,CAACpE,MAAM,GAAG,CAAC,EAAE;UACzBkD,aAAa,CAAC;YACZ1B,IAAI,EAAE4C,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;YAC7BpD,aAAa,EAAEoD,UAAU,CAAC,CAAC,CAAC,CAACpD,aAAa;YAC1CG,cAAc,EAAEiD,UAAU,CAAC,CAAC,CAAC,CAACjD;UAChC,CAAC,CAAC;QACJ;QACAiC,YAAY,CAAC,KAAK,CAAC;QACnB;MACF;;MAEA;MACA,MAAMvF,IAAI,GAAG,MAAMW,eAAe,CAACmE,eAAe,CAAClF,IAAI,EAAE0G,eAAe,CAAC;MAEzE,IAAI,CAACtG,IAAI,IAAIA,IAAI,CAACmC,MAAM,KAAK,CAAC,EAAE;QAC9B5B,OAAO,CAAC6B,GAAG,CAAC,wBAAwB,EAAE0C,eAAe,CAAClF,IAAI,CAAC;QAC3DuF,iBAAiB,CAAC,EAAE,CAAC;QACrBI,YAAY,CAAC,KAAK,CAAC;QACnB;MACF;;MAEA;MACA,MAAMlD,iBAAiB,GAAGrC,IAAI,CAACsC,MAAM,CAAC,CAACC,GAAG,EAAEC,WAAW,KAAK;QAC1D,MAAMC,IAAI,GAAG,IAAIrC,IAAI,CAACoC,WAAW,CAACC,IAAI,CAACC,GAAG,CAAC,CAACrB,WAAW,CAAC,CAAC,CAACsB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvE,IAAI,CAACJ,GAAG,CAACE,IAAI,CAAC,EAAE;UACdF,GAAG,CAACE,IAAI,CAAC,GAAG;YACV,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE,IAAI;YACbG,YAAY,EAAE;UAChB,CAAC;QACH;QACAL,GAAG,CAACE,IAAI,CAAC,CAACG,YAAY,CAACC,IAAI,CAACL,WAAW,CAAC;QAExC,IAAIA,WAAW,CAACM,SAAS,KAAK,MAAM,EAAE;UACpCP,GAAG,CAACE,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAGD,WAAW,CAACO,KAAK;QACzC,CAAC,MAAM,IAAIP,WAAW,CAACM,SAAS,KAAK,MAAM,EAAE;UAC3CP,GAAG,CAACE,IAAI,CAAC,CAAC,OAAO,CAAC,GAAGD,WAAW,CAACO,KAAK;QACxC;QAEA,OAAOR,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEN;MACA,MAAMiE,aAAa,GAAGxD,MAAM,CAACC,OAAO,CAACZ,iBAAiB,CAAC,CACpDa,GAAG,CAAC,CAAC,CAACT,IAAI,EAAEzC,IAAI,CAAC,MAAM;QACtByC,IAAI,EAAE,IAAIrC,IAAI,CAACqC,IAAI,CAAC,CAACpB,WAAW,CAAC,CAAC;QAClC,QAAQ,EAAErB,IAAI,CAAC,QAAQ,CAAC;QACxB,OAAO,EAAEA,IAAI,CAAC,OAAO,CAAC;QACtBJ,IAAI,EAAEkF,eAAe,CAAClF,IAAI;QAC1BuD,aAAa,EAAEC,qBAAqB,CAAC;UACnCC,UAAU,EAAE,CACV;YAAEP,SAAS,EAAE,MAAM;YAAEC,KAAK,EAAE/C,IAAI,CAAC,QAAQ;UAAE,CAAC,EAC5C;YAAE8C,SAAS,EAAE,MAAM;YAAEC,KAAK,EAAE/C,IAAI,CAAC,OAAO;UAAE,CAAC;QAE/C,CAAC,CAAC;QACFsD,cAAc,EAAEC,gBAAgB,CAAC;UAC/BF,UAAU,EAAE,CACV;YAAEP,SAAS,EAAE,MAAM;YAAEC,KAAK,EAAE/C,IAAI,CAAC,QAAQ;UAAE,CAAC,EAC5C;YAAE8C,SAAS,EAAE,MAAM;YAAEC,KAAK,EAAE/C,IAAI,CAAC,OAAO;UAAE,CAAC;QAE/C,CAAC,CAAC;QACFwD,MAAM,EAAE;MACV,CAAC,CAAC,CAAC,CACFiD,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIvG,IAAI,CAACuG,CAAC,CAAClE,IAAI,CAAC,GAAG,IAAIrC,IAAI,CAACsG,CAAC,CAACjE,IAAI,CAAC,CAAC;;MAEtD;MACAjC,aAAa,CAACsE,eAAe,CAAClF,IAAI,EAAE4G,aAAa,CAAC;;MAElD;MACArB,iBAAiB,CAACqB,aAAa,CAAC;MAChC,IAAIA,aAAa,CAACrE,MAAM,GAAG,CAAC,EAAE;QAC5BkD,aAAa,CAAC;UACZ1B,IAAI,EAAE6C,aAAa,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;UAChCrD,aAAa,EAAEqD,aAAa,CAAC,CAAC,CAAC,CAACrD,aAAa;UAC7CG,cAAc,EAAEkD,aAAa,CAAC,CAAC,CAAC,CAAClD;QACnC,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOhD,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD;MACAkF,QAAQ,CAAC,2DAA2D,CAAC;MACrEL,iBAAiB,CAAC,EAAE,CAAC;IACvB,CAAC,SAAS;MACRI,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAEDtG,SAAS,CAAC,MAAM;IACd,IAAI6F,eAAe,CAAClF,IAAI,EAAE;MACxByG,mBAAmB,CAAC,CAAC;IACvB;IAEA,MAAMO,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC,IAAI/B,eAAe,CAAClF,IAAI,EAAE;QACxByG,mBAAmB,CAAC,CAAC;MACvB;IACF,CAAC,EAAE3G,cAAc,CAAC,CAAC,CAAC;;IAEpB,OAAO,MAAMoH,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAAC9B,eAAe,CAAClF,IAAI,CAAC,CAAC;EAE1B,IAAI0F,SAAS,EAAE,oBAAO7F,OAAA;IAAAsH,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE3C,oBACE1H,OAAA;IAAK2H,SAAS,EAAC,WAAW;IAAAL,QAAA,gBACxBtH,OAAA;MAAAsH,QAAA,GACGjC,eAAe,CAACE,SAAS,GAAG,GAAGF,eAAe,CAACE,SAAS,KAAK,GAAG,EAAE,EAAC,uBAEtE;IAAA;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEL1H,OAAA;MAAK2H,SAAS,EAAC,mBAAmB;MAAAL,QAAA,eAChCtH,OAAA,CAACF,iBAAiB;QAAC6F,UAAU,EAAEA;MAAW;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC,eAEN1H,OAAA;MAAK2H,SAAS,EAAC,mBAAmB;MAAAL,QAAA,eAChCtH,OAAA;QAAK2H,SAAS,EAAC,iBAAiB;QAAAL,QAAA,eAC9BtH,OAAA;UAAK2H,SAAS,EAAC,YAAY;UAAAL,QAAA,gBACzBtH,OAAA;YAAAsH,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrB1H,OAAA,CAACN,SAAS;YAACa,IAAI,EAAEkF,cAAe;YAACJ,eAAe,EAAEA;UAAgB;YAAAkC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN1H,OAAA;MAAK2H,SAAS,EAAC,mBAAmB;MAAAL,QAAA,gBAChCtH,OAAA;QAAAsH,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpB1H,OAAA,CAACL,SAAS;QAACY,IAAI,EAAEkF,cAAe;QAACJ,eAAe,EAAEA;MAAgB;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CAAC,eAEN1H,OAAA;MAAK2H,SAAS,EAAC,mBAAmB;MAAAL,QAAA,gBAChCtH,OAAA;QAAAsH,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB1H,OAAA,CAACJ,mBAAmB;QAACW,IAAI,EAAEkF,cAAe;QAACJ,eAAe,EAAEA;MAAgB;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5E,CAAC,eAEN1H,OAAA;MAAK2H,SAAS,EAAC,mBAAmB;MAAAL,QAAA,gBAChCtH,OAAA;QAAAsH,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrB1H,OAAA,CAACH,gBAAgB;QAACU,IAAI,EAAEkF,cAAe;QAACJ,eAAe,EAAEA;MAAgB;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtC,EAAA,CA3MID,SAAS;AAAAyC,EAAA,GAATzC,SAAS;AA6Mf,eAAeA,SAAS;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}