{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport airqualitydata from '../server/airqualitydata.csv'; // Direct import of CSV\n\n// Make sure Chart.js is properly registered before any rendering\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst Dashboard = ({\n  user\n}) => {\n  _s();\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'µg/m³'\n        }\n      },\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d, yyyy'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: ${context.parsed.y} µg/m³`;\n          }\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const fetchPreferences = async () => {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n        if (error) throw error;\n        if (data) {\n          setHasHVAC(data.has_HVAC);\n          setHasEcologica(data.has_ecologgica);\n          setFirstName(data.first_name || '');\n          setCity(data.city || 'Toronto');\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n\n    // Use the imported CSV data directly\n    const loadAirQualityData = () => {\n      try {\n        console.log('Loading CSV data:', airqualitydata);\n        setAirQualityData(airqualitydata);\n      } catch (error) {\n        console.error('Error loading air quality data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (user) {\n      fetchPreferences();\n    }\n    loadAirQualityData();\n  }, [user]);\n  const getChartData = () => {\n    const processedData = processAirQualityData(airQualityData, 'pm25');\n    const datasets = [{\n      label: 'Original PM2.5',\n      data: processedData.map(d => d.original),\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }];\n    if (hasHVAC) {\n      datasets.push({\n        label: 'With HVAC (50% reduction)',\n        data: processedData.map(d => d.withHVAC),\n        borderColor: 'rgb(255, 159, 64)',\n        tension: 0.1\n      });\n    }\n    if (hasHVAC && hasEcologica) {\n      datasets.push({\n        label: 'With HVAC + Ecologica (65% total reduction)',\n        data: processedData.map(d => d.withBoth),\n        borderColor: 'rgb(54, 162, 235)',\n        tension: 0.1\n      });\n    }\n    return {\n      labels: processedData.map(d => d.timestamp),\n      datasets\n    };\n  };\n  const getChartData10 = () => {\n    const processedData = processAirQualityData(airQualityData, 'pm10');\n    const datasets = [{\n      label: 'Original PM10',\n      data: processedData.map(d => d.original),\n      borderColor: 'rgb(153, 102, 255)',\n      tension: 0.1\n    }];\n    if (hasHVAC) {\n      datasets.push({\n        label: 'With HVAC (50% reduction)',\n        data: processedData.map(d => d.withHVAC),\n        borderColor: 'rgb(255, 159, 64)',\n        tension: 0.1\n      });\n    }\n    if (hasHVAC && hasEcologica) {\n      datasets.push({\n        label: 'With HVAC + Ecologica (65% total reduction)',\n        data: processedData.map(d => d.withBoth),\n        borderColor: 'rgb(54, 162, 235)',\n        tension: 0.1\n      });\n    }\n    return {\n      labels: processedData.map(d => d.timestamp),\n      datasets\n    };\n  };\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      console.log('Setting up chart data');\n      setChartData({\n        pm25: getChartData(),\n        pm10: getChartData10()\n      });\n    }\n  }, [airQualityData, hasHVAC, hasEcologica]);\n  const processAirQualityData = (data, pollutantType) => {\n    return data.map(d => ({\n      timestamp: new Date(d.timestamp),\n      original: pollutantType === 'pm25' ? d.pm25 : d.pm10,\n      withHVAC: hasHVAC ? pollutantType === 'pm25' ? d.pm25 * 0.5 : d.pm10 * 0.5 : null,\n      withBoth: hasHVAC && hasEcologica ? pollutantType === 'pm25' ? d.pm25 * 0.5 * 0.7 : d.pm10 * 0.5 * 0.7 : null\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [firstName ? `${firstName}'s ` : '', city, \" Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        style: {\n          height: '400px',\n          width: '100%',\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"PM2.5 Levels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), chartData ? /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData.pm25,\n          options: chartOptions,\n          redraw: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        style: {\n          height: '400px',\n          width: '100%',\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"PM10 Levels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), chartData ? /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData.pm10,\n          options: chartOptions,\n          redraw: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), (hasHVAC || hasEcologica) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"improvements-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Air Quality Improvements:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this), hasHVAC && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u2022 HVAC System: 50% reduction in particulate matter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 23\n      }, this), hasEcologica && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u2022 Ecologica System: Additional 30% reduction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 28\n      }, this), hasHVAC && hasEcologica && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u2022 Total improvement: 65% reduction in particulate matter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"0DdcYgF0rjNGkHLlYGpWufk1CRw=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","airqualitydata","jsxDEV","_jsxDEV","register","Dashboard","user","_s","airQualityData","setAirQualityData","chartData","setChartData","isLoading","setIsLoading","hasHVAC","setHasHVAC","hasEcologica","setHasEcologica","city","setCity","firstName","setFirstName","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","title","display","text","x","type","time","unit","displayFormats","day","plugins","legend","position","tooltip","callbacks","label","context","dataset","parsed","fetchPreferences","data","error","from","select","eq","id","single","has_HVAC","has_ecologgica","first_name","console","loadAirQualityData","log","getChartData","processedData","processAirQualityData","datasets","map","d","original","borderColor","tension","push","withHVAC","withBoth","labels","timestamp","getChartData10","length","pm25","pm10","pollutantType","Date","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","width","options","redraw","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport {\n  Chart,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport airqualitydata from '../server/airqualitydata.csv';  // Direct import of CSV\n\n// Make sure Chart.js is properly registered before any rendering\nChart.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nconst Dashboard = ({ user }) => {\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'µg/m³'\n        }\n      },\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d, yyyy'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y} µg/m³`;\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    const fetchPreferences = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('user_preferences')\n          .select('*')\n          .eq('user_id', user.id)\n          .single();\n\n        if (error) throw error;\n\n        if (data) {\n          setHasHVAC(data.has_HVAC);\n          setHasEcologica(data.has_ecologgica);\n          setFirstName(data.first_name || '');\n          setCity(data.city || 'Toronto');\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n\n    // Use the imported CSV data directly\n    const loadAirQualityData = () => {\n      try {\n        console.log('Loading CSV data:', airqualitydata);\n        setAirQualityData(airqualitydata);\n      } catch (error) {\n        console.error('Error loading air quality data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (user) {\n      fetchPreferences();\n    }\n    loadAirQualityData();\n  }, [user]);\n\n  const getChartData = () => {\n    const processedData = processAirQualityData(airQualityData, 'pm25');\n    \n    const datasets = [\n      {\n        label: 'Original PM2.5',\n        data: processedData.map(d => d.original),\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }\n    ];\n\n    if (hasHVAC) {\n      datasets.push({\n        label: 'With HVAC (50% reduction)',\n        data: processedData.map(d => d.withHVAC),\n        borderColor: 'rgb(255, 159, 64)',\n        tension: 0.1\n      });\n    }\n\n    if (hasHVAC && hasEcologica) {\n      datasets.push({\n        label: 'With HVAC + Ecologica (65% total reduction)',\n        data: processedData.map(d => d.withBoth),\n        borderColor: 'rgb(54, 162, 235)',\n        tension: 0.1\n      });\n    }\n\n    return {\n      labels: processedData.map(d => d.timestamp),\n      datasets\n    };\n  };\n\n  const getChartData10 = () => {\n    const processedData = processAirQualityData(airQualityData, 'pm10');\n    \n    const datasets = [\n      {\n        label: 'Original PM10',\n        data: processedData.map(d => d.original),\n        borderColor: 'rgb(153, 102, 255)',\n        tension: 0.1\n      }\n    ];\n\n    if (hasHVAC) {\n      datasets.push({\n        label: 'With HVAC (50% reduction)',\n        data: processedData.map(d => d.withHVAC),\n        borderColor: 'rgb(255, 159, 64)',\n        tension: 0.1\n      });\n    }\n\n    if (hasHVAC && hasEcologica) {\n      datasets.push({\n        label: 'With HVAC + Ecologica (65% total reduction)',\n        data: processedData.map(d => d.withBoth),\n        borderColor: 'rgb(54, 162, 235)',\n        tension: 0.1\n      });\n    }\n\n    return {\n      labels: processedData.map(d => d.timestamp),\n      datasets\n    };\n  };\n\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      console.log('Setting up chart data');\n      setChartData({\n        pm25: getChartData(),\n        pm10: getChartData10()\n      });\n    }\n  }, [airQualityData, hasHVAC, hasEcologica]);\n\n  const processAirQualityData = (data, pollutantType) => {\n    return data.map(d => ({\n      timestamp: new Date(d.timestamp),\n      original: pollutantType === 'pm25' ? d.pm25 : d.pm10,\n      withHVAC: hasHVAC ? (pollutantType === 'pm25' ? d.pm25 * 0.5 : d.pm10 * 0.5) : null,\n      withBoth: (hasHVAC && hasEcologica) ? \n        (pollutantType === 'pm25' ? d.pm25 * 0.5 * 0.7 : d.pm10 * 0.5 * 0.7) : null\n    }));\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h1>{firstName ? `${firstName}'s ` : ''}{city} Dashboard</h1>\n      \n      <div className=\"chart-container\">\n        <div className=\"chart\" style={{ height: '400px', width: '100%', position: 'relative' }}>\n          <h2>PM2.5 Levels</h2>\n          {chartData ? (\n            <Line\n              data={chartData.pm25}\n              options={chartOptions}\n              redraw={true}\n            />\n          ) : (\n            <p>Loading data...</p>\n          )}\n        </div>\n        \n        <div className=\"chart\" style={{ height: '400px', width: '100%', position: 'relative' }}>\n          <h2>PM10 Levels</h2>\n          {chartData ? (\n            <Line\n              data={chartData.pm10}\n              options={chartOptions}\n              redraw={true}\n            />\n          ) : (\n            <p>Loading data...</p>\n          )}\n        </div>\n      </div>\n\n      {/* Add a legend explaining the improvements */}\n      {(hasHVAC || hasEcologica) && (\n        <div className=\"improvements-legend\">\n          <h3>Air Quality Improvements:</h3>\n          {hasHVAC && <p>• HVAC System: 50% reduction in particulate matter</p>}\n          {hasEcologica && <p>• Ecologica System: Additional 30% reduction</p>}\n          {hasHVAC && hasEcologica && (\n            <p>• Total improvement: 65% reduction in particulate matter</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}