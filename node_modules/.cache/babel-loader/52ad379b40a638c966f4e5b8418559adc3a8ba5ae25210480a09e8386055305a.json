{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/charts/PM25Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { supabase } from '../../supabaseClient';\nimport ChartLegend from './ChartLegend';\nimport { calculateIndoorWithDevices } from '../../utils/airQualityCalculations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst PM25Chart = ({\n  data,\n  userPreferences\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Outdoor': true,\n    'Indoor': true\n  });\n  const [showEcologica, setShowEcologica] = useState((userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.hasEcologica) || false);\n  const toggleDataset = name => {\n    setActiveDatasets(prev => ({\n      ...prev,\n      [name]: !prev[name]\n    }));\n  };\n  useEffect(() => {\n    try {\n      if (!data || data.length === 0) {\n        setError('No data available');\n        return;\n      }\n      const formattedData = {\n        labels: data.map(item => new Date(item.date)),\n        datasets: []\n      };\n\n      // Add With Air Purifier (bottom layer)\n      if (showEcologica) {\n        formattedData.datasets.push({\n          label: 'With Air Purifier',\n          data: data.map(item => ({\n            x: new Date(item.date),\n            y: calculateIndoorWithDevices(item['PM 2.5'], (userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.has_HVAC) || false, true)\n          })),\n          borderColor: '#A9ED8A',\n          backgroundColor: 'rgba(169, 237, 138, 0.1)',\n          fill: false,\n          tension: 0.4,\n          borderWidth: 2,\n          hidden: false\n        });\n      }\n\n      // Add Indoor (middle layer)\n      formattedData.datasets.push({\n        label: 'Indoor',\n        data: data.map(item => ({\n          x: new Date(item.date),\n          y: calculateIndoorWithDevices(item['PM 2.5'], (userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.has_HVAC) || false, false)\n        })),\n        borderColor: '#D9F6BB',\n        backgroundColor: 'rgba(217, 246, 187, 0.1)',\n        fill: false,\n        tension: 0.4,\n        borderWidth: 2,\n        hidden: !activeDatasets['Indoor']\n      });\n\n      // Add Outdoor (top layer)\n      formattedData.datasets.push({\n        label: 'Outdoor',\n        data: data.map(item => ({\n          x: new Date(item.date),\n          y: item['PM 2.5']\n        })),\n        borderColor: '#043A24',\n        backgroundColor: 'rgba(4, 58, 36, 0.1)',\n        fill: false,\n        tension: 0.4,\n        borderWidth: 2,\n        hidden: !activeDatasets['Outdoor']\n      });\n      setChartData(formattedData);\n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error processing PM2.5 data:', err);\n      setError('Failed to process PM2.5 data');\n      setIsLoading(false);\n    }\n  }, [data, showEcologica, activeDatasets, userPreferences]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading PM2.5 data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 21\n  }, this);\n  if (!chartData || !data.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No PM2.5 data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 42\n  }, this);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'μg/m³'\n        },\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y;\n            return `${label}: ${value.toFixed(1)} μg/m³`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChartLegend, {\n      activeDatasets: {\n        'Outdoor': activeDatasets['Outdoor'],\n        'Indoor': activeDatasets['Indoor'],\n        'With Air Purifier': showEcologica\n      },\n      onToggle: label => {\n        if (label === 'With Air Purifier') {\n          setShowEcologica(!showEcologica);\n        } else {\n          toggleDataset(label);\n        }\n      },\n      showAirPurifier: userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.hasEcologica\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s(PM25Chart, \"2UMOUQYIvqSDxmokZul/IY28jK0=\");\n_c = PM25Chart;\nexport default PM25Chart;\nvar _c;\n$RefreshReg$(_c, \"PM25Chart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","supabase","ChartLegend","calculateIndoorWithDevices","jsxDEV","_jsxDEV","register","PM25Chart","data","userPreferences","_s","chartData","setChartData","isLoading","setIsLoading","error","setError","activeDatasets","setActiveDatasets","showEcologica","setShowEcologica","hasEcologica","toggleDataset","name","prev","length","formattedData","labels","map","item","Date","date","datasets","push","label","x","y","has_HVAC","borderColor","backgroundColor","fill","tension","borderWidth","hidden","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","scales","type","time","unit","displayFormats","day","title","display","text","grid","beginAtZero","color","plugins","legend","tooltip","mode","intersect","callbacks","context","dataset","value","parsed","toFixed","style","width","height","position","onToggle","showAirPurifier","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/airqualiti3/src/components/charts/PM25Chart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { supabase } from '../../supabaseClient';\nimport ChartLegend from './ChartLegend';\nimport { calculateIndoorWithDevices } from '../../utils/airQualityCalculations';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nconst PM25Chart = ({ data, userPreferences }) => {\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeDatasets, setActiveDatasets] = useState({\n    'Outdoor': true,\n    'Indoor': true\n  });\n  const [showEcologica, setShowEcologica] = useState(userPreferences?.hasEcologica || false);\n\n  const toggleDataset = (name) => {\n    setActiveDatasets(prev => ({\n      ...prev,\n      [name]: !prev[name]\n    }));\n  };\n\n  useEffect(() => {\n    try {\n      if (!data || data.length === 0) {\n        setError('No data available');\n        return;\n      }\n\n      const formattedData = {\n        labels: data.map(item => new Date(item.date)),\n        datasets: []\n      };\n\n      // Add With Air Purifier (bottom layer)\n      if (showEcologica) {\n        formattedData.datasets.push({\n          label: 'With Air Purifier',\n          data: data.map(item => ({\n            x: new Date(item.date),\n            y: calculateIndoorWithDevices(\n              item['PM 2.5'],\n              userPreferences?.has_HVAC || false,\n              true\n            )\n          })),\n          borderColor: '#A9ED8A',\n          backgroundColor: 'rgba(169, 237, 138, 0.1)',\n          fill: false,\n          tension: 0.4,\n          borderWidth: 2,\n          hidden: false\n        });\n      }\n\n      // Add Indoor (middle layer)\n      formattedData.datasets.push({\n        label: 'Indoor',\n        data: data.map(item => ({\n          x: new Date(item.date),\n          y: calculateIndoorWithDevices(\n            item['PM 2.5'],\n            userPreferences?.has_HVAC || false,\n            false\n          )\n        })),\n        borderColor: '#D9F6BB',\n        backgroundColor: 'rgba(217, 246, 187, 0.1)',\n        fill: false,\n        tension: 0.4,\n        borderWidth: 2,\n        hidden: !activeDatasets['Indoor']\n      });\n\n      // Add Outdoor (top layer)\n      formattedData.datasets.push({\n        label: 'Outdoor',\n        data: data.map(item => ({\n          x: new Date(item.date),\n          y: item['PM 2.5']\n        })),\n        borderColor: '#043A24',\n        backgroundColor: 'rgba(4, 58, 36, 0.1)',\n        fill: false,\n        tension: 0.4,\n        borderWidth: 2,\n        hidden: !activeDatasets['Outdoor']\n      });\n\n      setChartData(formattedData);\n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error processing PM2.5 data:', err);\n      setError('Failed to process PM2.5 data');\n      setIsLoading(false);\n    }\n  }, [data, showEcologica, activeDatasets, userPreferences]);\n\n  if (isLoading) return <div>Loading PM2.5 data...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!chartData || !data.length) return <div>No PM2.5 data available</div>;\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'μg/m³'\n        },\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y;\n            return `${label}: ${value.toFixed(1)} μg/m³`;\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\n      <Line data={chartData} options={options} />\n      <ChartLegend \n        activeDatasets={{\n          'Outdoor': activeDatasets['Outdoor'],\n          'Indoor': activeDatasets['Indoor'],\n          'With Air Purifier': showEcologica\n        }}\n        onToggle={(label) => {\n          if (label === 'With Air Purifier') {\n            setShowEcologica(!showEcologica);\n          } else {\n            toggleDataset(label);\n          }\n        }}\n        showAirPurifier={userPreferences?.hasEcologica}\n      />\n    </div>\n  );\n};\n\nexport default PM25Chart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}