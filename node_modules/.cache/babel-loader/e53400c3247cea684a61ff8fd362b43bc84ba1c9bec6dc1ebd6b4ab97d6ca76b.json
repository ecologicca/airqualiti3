{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\nfunction getLast30Days(data, cityParam) {\n  const thirtyDaysAgo = new Date();\n  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n  return data.filter(point => {\n    const pointDate = new Date(point.date);\n    return pointDate >= thirtyDaysAgo && point.city === cityParam;\n  });\n}\nconst Dashboard = () => {\n  _s();\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user) {\n          const {\n            data: preferences,\n            error\n          } = await supabase.from('user_preferences').select('city, first_name, has_HVAC, has_ecologgica').eq('user_id', user.id).single();\n          if (error) throw error;\n          if (preferences) {\n            setCity(preferences.city);\n            setFirstName(preferences.first_name || '');\n            setHasHVAC(preferences.has_HVAC || false);\n            setHasEcologica(preferences.has_ecologgica || false);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user preferences:', error);\n      }\n    };\n    fetchUserPreferences();\n  }, []);\n  useEffect(() => {\n    const fetchAirQualityData = async () => {\n      try {\n        console.log('Fetching data for city:', city);\n        const API_URL = 'http://localhost:5000';\n        const response = await fetch(`${API_URL}/api/airqualitydata`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Raw data received:', data.length, 'records');\n        const last30DaysData = getLast30Days(data, city);\n        console.log('Filtered 30 days data:', last30DaysData.length, 'records');\n        setAirQualityData(last30DaysData);\n      } catch (error) {\n        console.error('Error fetching air quality:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAirQualityData();\n  }, [city]);\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: true,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day'\n        },\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)'\n        },\n        ticks: {\n          callback: function (value) {\n            return value + ' ug/m³';\n          }\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} ug/m³`;\n          }\n        }\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          padding: 15\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [firstName ? `${firstName}'s ` : '', city, \" Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this) : airQualityData.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        labels: airQualityData.map(d => d.date),\n        datasets: [{\n          label: 'PM2.5',\n          data: airQualityData.map(d => d['PM 2.5']),\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }]\n      },\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"No data available for \", city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"wyMkyhnCqkzqDI23pirUQh7OKCg=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","jsxDEV","_jsxDEV","register","defaults","responsive","maintainAspectRatio","getLast30Days","data","cityParam","thirtyDaysAgo","Date","setDate","getDate","filter","point","pointDate","date","city","Dashboard","_s","airQualityData","setAirQualityData","isLoading","setIsLoading","setCity","firstName","setFirstName","hasHVAC","setHasHVAC","hasEcologica","setHasEcologica","fetchUserPreferences","user","auth","getUser","preferences","error","from","select","eq","id","single","first_name","has_HVAC","has_ecologgica","console","fetchAirQualityData","log","API_URL","response","fetch","ok","Error","status","json","length","last30DaysData","chartOptions","scales","x","type","time","unit","grid","display","color","y","beginAtZero","ticks","callback","value","plugins","tooltip","mode","intersect","callbacks","label","context","dataset","parsed","toFixed","legend","position","labels","usePointStyle","padding","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","d","datasets","borderColor","tension","options","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nChartJS.defaults.responsive = true;\nChartJS.defaults.maintainAspectRatio = false;\n\nfunction getLast30Days(data, cityParam) {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    \n    return data.filter(point => {\n        const pointDate = new Date(point.date);\n        return pointDate >= thirtyDaysAgo && point.city === cityParam;\n    });\n}\n\nconst Dashboard = () => {\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          const { data: preferences, error } = await supabase\n            .from('user_preferences')\n            .select('city, first_name, has_HVAC, has_ecologgica')\n            .eq('user_id', user.id)\n            .single();\n\n          if (error) throw error;\n          if (preferences) {\n            setCity(preferences.city);\n            setFirstName(preferences.first_name || '');\n            setHasHVAC(preferences.has_HVAC || false);\n            setHasEcologica(preferences.has_ecologgica || false);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user preferences:', error);\n      }\n    };\n    fetchUserPreferences();\n  }, []);\n\n  useEffect(() => {\n    const fetchAirQualityData = async () => {\n      try {\n        console.log('Fetching data for city:', city);\n        const API_URL = 'http://localhost:5000';\n        const response = await fetch(`${API_URL}/api/airqualitydata`);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Raw data received:', data.length, 'records');\n        \n        const last30DaysData = getLast30Days(data, city);\n        console.log('Filtered 30 days data:', last30DaysData.length, 'records');\n        \n        setAirQualityData(last30DaysData);\n      } catch (error) {\n        console.error('Error fetching air quality:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchAirQualityData();\n  }, [city]);\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: true,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day'\n        },\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)',\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: 'rgba(0, 0, 0, 0.1)',\n        },\n        ticks: {\n          callback: function(value) {\n            return value + ' ug/m³';\n          }\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} ug/m³`;\n          }\n        }\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          padding: 15\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h1>{firstName ? `${firstName}'s ` : ''}{city} Dashboard</h1>\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        airQualityData.length > 0 ? (\n          <Line \n            data={{\n              labels: airQualityData.map(d => d.date),\n              datasets: [\n                {\n                  label: 'PM2.5',\n                  data: airQualityData.map(d => d['PM 2.5']),\n                  borderColor: 'rgb(75, 192, 192)',\n                  tension: 0.1\n                }\n              ]\n            }} \n            options={chartOptions} \n          />\n        ) : (\n          <div>No data available for {city}</div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}