{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/components/charts/CityComparisonChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { supabase } from '../../supabaseClient';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst CityComparisonChart = ({\n  userPreferences\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Get data for the last 60 days for all cities\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - 60);\n\n        // Get all cities using a different approach\n        const {\n          data: weatherData,\n          error: dataError\n        } = await supabase.from('weather_data').select('*').gte('created_at', startDate.toISOString()).lte('created_at', endDate.toISOString());\n        if (dataError) throw dataError;\n\n        // Get unique cities from the data\n        const cities = [...new Set(weatherData.map(item => item.city))];\n\n        // Calculate 60-day averages for each city\n        const cityAverages = cities.map(city => {\n          const cityData = weatherData.filter(item => item.city === city);\n          const pm25Average = cityData.reduce((sum, item) => sum + (item.pm25 || 0), 0) / (cityData.length || 1);\n          const pm10Average = cityData.reduce((sum, item) => sum + (item.pm10 || 0), 0) / (cityData.length || 1);\n          return {\n            city,\n            pm25Average: parseFloat(pm25Average.toFixed(1)),\n            pm10Average: parseFloat(pm10Average.toFixed(1))\n          };\n        });\n\n        // Sort cities by average PM2.5 levels\n        cityAverages.sort((a, b) => b.pm25Average - a.pm25Average);\n        setChartData({\n          labels: cityAverages.map(item => item.city),\n          datasets: [{\n            label: '60-Day Average PM2.5',\n            data: cityAverages.map(item => item.pm25Average),\n            backgroundColor: 'rgba(0, 100, 0, 0.7)',\n            borderColor: 'rgba(0, 100, 0, 1)',\n            borderWidth: 1\n          }, {\n            label: '60-Day Average PM10',\n            data: cityAverages.map(item => item.pm10Average),\n            backgroundColor: 'rgba(144, 238, 144, 0.7)',\n            borderColor: 'rgba(144, 238, 144, 1)',\n            borderWidth: 1\n          }]\n        });\n      } catch (err) {\n        console.error('Error fetching city comparison data:', err);\n        setError('Failed to load city comparison data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading city comparison data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 21\n  }, this);\n  if (!chartData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No city comparison data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 26\n  }, this);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'PM2.5 μg/m³ (Weekly Average)'\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Cities'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: 'Weekly Average PM2.5 by City',\n        color: '#2e7d32',\n        font: {\n          size: 16\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            return `Average: ${context.parsed.y} μg/m³`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(CityComparisonChart, \"+U+KmwUQ08o91z1Gf8Cwp1b98lo=\");\n_c = CityComparisonChart;\nexport default CityComparisonChart;\nvar _c;\n$RefreshReg$(_c, \"CityComparisonChart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","supabase","jsxDEV","_jsxDEV","register","CityComparisonChart","userPreferences","_s","chartData","setChartData","isLoading","setIsLoading","error","setError","fetchData","endDate","Date","startDate","setDate","getDate","data","weatherData","dataError","from","select","gte","toISOString","lte","cities","Set","map","item","city","cityAverages","cityData","filter","pm25Average","reduce","sum","pm25","length","pm10Average","pm10","parseFloat","toFixed","sort","a","b","labels","datasets","label","backgroundColor","borderColor","borderWidth","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","scales","y","beginAtZero","title","display","text","x","plugins","legend","color","font","size","tooltip","callbacks","context","parsed","style","height","width","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/components/charts/CityComparisonChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { supabase } from '../../supabaseClient';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst CityComparisonChart = ({ userPreferences }) => {\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Get data for the last 60 days for all cities\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - 60);\n\n        // Get all cities using a different approach\n        const { data: weatherData, error: dataError } = await supabase\n          .from('weather_data')\n          .select('*')\n          .gte('created_at', startDate.toISOString())\n          .lte('created_at', endDate.toISOString());\n\n        if (dataError) throw dataError;\n\n        // Get unique cities from the data\n        const cities = [...new Set(weatherData.map(item => item.city))];\n\n        // Calculate 60-day averages for each city\n        const cityAverages = cities.map(city => {\n          const cityData = weatherData.filter(item => item.city === city);\n          const pm25Average = cityData.reduce((sum, item) => sum + (item.pm25 || 0), 0) / (cityData.length || 1);\n          const pm10Average = cityData.reduce((sum, item) => sum + (item.pm10 || 0), 0) / (cityData.length || 1);\n          return {\n            city,\n            pm25Average: parseFloat(pm25Average.toFixed(1)),\n            pm10Average: parseFloat(pm10Average.toFixed(1))\n          };\n        });\n\n        // Sort cities by average PM2.5 levels\n        cityAverages.sort((a, b) => b.pm25Average - a.pm25Average);\n\n        setChartData({\n          labels: cityAverages.map(item => item.city),\n          datasets: [\n            {\n              label: '60-Day Average PM2.5',\n              data: cityAverages.map(item => item.pm25Average),\n              backgroundColor: 'rgba(0, 100, 0, 0.7)',\n              borderColor: 'rgba(0, 100, 0, 1)',\n              borderWidth: 1\n            },\n            {\n              label: '60-Day Average PM10',\n              data: cityAverages.map(item => item.pm10Average),\n              backgroundColor: 'rgba(144, 238, 144, 0.7)',\n              borderColor: 'rgba(144, 238, 144, 1)',\n              borderWidth: 1\n            }\n          ]\n        });\n\n      } catch (err) {\n        console.error('Error fetching city comparison data:', err);\n        setError('Failed to load city comparison data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (isLoading) return <div>Loading city comparison data...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!chartData) return <div>No city comparison data available</div>;\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'PM2.5 μg/m³ (Weekly Average)'\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Cities'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: 'Weekly Average PM2.5 by City',\n        color: '#2e7d32',\n        font: {\n          size: 16\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context) {\n            return `Average: ${context.parsed.y} μg/m³`;\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div style={{ height: '400px', width: '100%' }}>\n      <Bar data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default CityComparisonChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}