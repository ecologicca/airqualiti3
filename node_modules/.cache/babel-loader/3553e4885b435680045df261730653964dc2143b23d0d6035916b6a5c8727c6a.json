{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/pages/dashboard/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport PM25Chart from '../../components/charts/PM25Chart';\nimport PM10Chart from '../../components/charts/PM10Chart';\nimport CityComparisonChart from '../../components/charts/CityComparisonChart';\nimport AnxietyRiskChart from '../../components/charts/AnxietyRiskChart';\nimport '../../styles/style.css';\n\n// Utility function for deeper sleep calculation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateDeeperSleepMinutes = (data, hasEcologica) => {\n  const getAdjustedValue = value => {\n    // Always apply indoor reduction first\n    const indoorValue = value * 0.7;\n    // Then apply Ecologica if present\n    if (hasEcologica) return value * 0.5;\n    return indoorValue;\n  };\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n  return daysUnderThreshold * 8 * 60;\n};\nconst Dashboard = () => {\n  _s();\n  const [userPreferences, setUserPreferences] = useState({\n    hasEcologica: false,\n    city: 'Toronto',\n    firstName: '',\n    anxietyLevel: 5\n  });\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (!user) return;\n        const {\n          data,\n          error\n        } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n        if (error) throw error;\n        if (data) {\n          setUserPreferences({\n            hasEcologica: data.has_ecologgica || false,\n            city: data.city || 'Toronto',\n            firstName: data.first_name || '',\n            anxietyLevel: data.anxiety_base_level || 5\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const fetchAirQualityData = async () => {\n      try {\n        // Get data from the weather_data table in Supabase\n        const {\n          data,\n          error\n        } = await supabase.from('weather_data').select('*').eq('city', userPreferences.city) // Filter by the user's city\n        .order('created_at', {\n          ascending: false\n        }).limit(60);\n        if (error) throw error;\n\n        // Transform the data to match the expected format\n        const transformedData = data.map(item => ({\n          date: item.created_at,\n          'PM 2.5': item.pm25,\n          'PM 10': item.pm10,\n          temp: item.temp,\n          city: item.city\n        }));\n        setAirQualityData(transformedData);\n      } catch (error) {\n        console.error('Error fetching air quality data:', error);\n        setAirQualityData([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchUserPreferences();\n    // Only fetch air quality data after we have the user's city\n    if (userPreferences.city) {\n      fetchAirQualityData();\n    }\n    const interval = setInterval(() => {\n      if (userPreferences.city) {\n        fetchAirQualityData();\n      }\n    }, 60 * 60 * 1000); // Refresh every hour\n\n    return () => clearInterval(interval);\n  }, [userPreferences.city]); // Re-run when city changes\n\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [userPreferences.firstName ? `${userPreferences.firstName}'s ` : '', \"Air Quality Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"PM2.5 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PM25Chart, {\n            userPreferences: userPreferences\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"PM10 Levels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PM10Chart, {\n        userPreferences: userPreferences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"City Comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CityComparisonChart, {\n        userPreferences: userPreferences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Anxiety Risk\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnxietyRiskChart, {\n        userPreferences: userPreferences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"8i/Ds9dCxAQ2SD8KDK8BkE4jCeo=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","PM25Chart","PM10Chart","CityComparisonChart","AnxietyRiskChart","jsxDEV","_jsxDEV","calculateDeeperSleepMinutes","data","hasEcologica","getAdjustedValue","value","indoorValue","daysUnderThreshold","filter","day","adjustedValue","parseFloat","length","Dashboard","_s","userPreferences","setUserPreferences","city","firstName","anxietyLevel","airQualityData","setAirQualityData","isLoading","setIsLoading","fetchUserPreferences","user","auth","getUser","error","from","select","eq","id","single","has_ecologgica","first_name","anxiety_base_level","console","fetchAirQualityData","order","ascending","limit","transformedData","map","item","date","created_at","pm25","pm10","temp","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/pages/dashboard/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport PM25Chart from '../../components/charts/PM25Chart';\nimport PM10Chart from '../../components/charts/PM10Chart';\nimport CityComparisonChart from '../../components/charts/CityComparisonChart';\nimport AnxietyRiskChart from '../../components/charts/AnxietyRiskChart';\nimport '../../styles/style.css';\n\n// Utility function for deeper sleep calculation\nconst calculateDeeperSleepMinutes = (data, hasEcologica) => {\n  const getAdjustedValue = (value) => {\n    // Always apply indoor reduction first\n    const indoorValue = value * 0.7;\n    // Then apply Ecologica if present\n    if (hasEcologica) return value * 0.5;\n    return indoorValue;\n  };\n\n  const daysUnderThreshold = data.filter(day => {\n    const adjustedValue = getAdjustedValue(parseFloat(day['PM 2.5']));\n    return adjustedValue <= 5;\n  }).length;\n\n  return daysUnderThreshold * 8 * 60;\n};\n\nconst Dashboard = () => {\n  const [userPreferences, setUserPreferences] = useState({\n    hasEcologica: false,\n    city: 'Toronto',\n    firstName: '',\n    anxietyLevel: 5\n  });\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) return;\n\n        const { data, error } = await supabase\n          .from('user_preferences')\n          .select('*')\n          .eq('user_id', user.id)\n          .single();\n\n        if (error) throw error;\n        \n        if (data) {\n          setUserPreferences({\n            hasEcologica: data.has_ecologgica || false,\n            city: data.city || 'Toronto',\n            firstName: data.first_name || '',\n            anxietyLevel: data.anxiety_base_level || 5\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    const fetchAirQualityData = async () => {\n      try {\n        // Get data from the weather_data table in Supabase\n        const { data, error } = await supabase\n          .from('weather_data')\n          .select('*')\n          .eq('city', userPreferences.city) // Filter by the user's city\n          .order('created_at', { ascending: false })\n          .limit(60);\n\n        if (error) throw error;\n\n        // Transform the data to match the expected format\n        const transformedData = data.map(item => ({\n          date: item.created_at,\n          'PM 2.5': item.pm25,\n          'PM 10': item.pm10,\n          temp: item.temp,\n          city: item.city\n        }));\n        \n        setAirQualityData(transformedData);\n      } catch (error) {\n        console.error('Error fetching air quality data:', error);\n        setAirQualityData([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUserPreferences();\n    // Only fetch air quality data after we have the user's city\n    if (userPreferences.city) {\n      fetchAirQualityData();\n    }\n\n    const interval = setInterval(() => {\n      if (userPreferences.city) {\n        fetchAirQualityData();\n      }\n    }, 60 * 60 * 1000); // Refresh every hour\n\n    return () => clearInterval(interval);\n  }, [userPreferences.city]); // Re-run when city changes\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"dashboard\">\n      <h1>\n        {userPreferences.firstName ? `${userPreferences.firstName}'s ` : ''}\n        Air Quality Dashboard\n      </h1>\n      \n      <div className=\"dashboard-section\">\n        <div className=\"chart-container\">\n          <div className=\"chart-area\">\n            <h2>PM2.5 Levels</h2>\n            <PM25Chart userPreferences={userPreferences} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"dashboard-section\">\n        <h2>PM10 Levels</h2>\n        <PM10Chart userPreferences={userPreferences} />\n      </div>\n\n      <div className=\"dashboard-section\">\n        <h2>City Comparison</h2>\n        <CityComparisonChart userPreferences={userPreferences} />\n      </div>\n\n      <div className=\"dashboard-section\">\n        <h2>Anxiety Risk</h2>\n        <AnxietyRiskChart userPreferences={userPreferences} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}