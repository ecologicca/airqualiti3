{"ast":null,"code":"const API_KEY = '3f8a4d2a8875fb203575175662bb64d7';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\nconst cities = ['Toronto', 'San Francisco', 'New York', 'Dallas', 'Boston', 'Miami', 'Houston'];\nconst fetchCityData = async city => {\n  try {\n    // Get weather and air quality data in a single call using coordinates\n    const geoResponse = await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`);\n    const [geoData] = await geoResponse.json();\n    const response = await fetch(`${BASE_URL}/air_pollution?lat=${geoData.lat}&lon=${geoData.lon}&appid=${API_KEY}`);\n    const airData = await response.json();\n    const weatherResponse = await fetch(`${BASE_URL}/weather?lat=${geoData.lat}&lon=${geoData.lon}&units=metric&appid=${API_KEY}`);\n    const weatherData = await weatherResponse.json();\n    return {\n      date: new Date().toISOString(),\n      city: city,\n      temp: `${weatherData.main.temp}°C`,\n      airQuality: getAirQualityLabel(airData.list[0].main.aqi),\n      pm25: airData.list[0].components.pm2_5,\n      pm10: airData.list[0].components.pm10\n    };\n  } catch (error) {\n    console.error(`Error fetching data for ${city}:`, error);\n    return null;\n  }\n};\nconst getAirQualityLabel = aqi => {\n  const labels = {\n    1: 'Good',\n    2: 'Fair',\n    3: 'Moderate',\n    4: 'Poor',\n    5: 'Very Poor'\n  };\n  return labels[aqi] || 'Unknown';\n};\nexport const fetchAllCitiesData = async () => {\n  const results = await Promise.all(cities.map(city => fetchCityData(city)));\n  return results.filter(result => result !== null);\n};","map":{"version":3,"names":["API_KEY","BASE_URL","cities","fetchCityData","city","geoResponse","fetch","geoData","json","response","lat","lon","airData","weatherResponse","weatherData","date","Date","toISOString","temp","main","airQuality","getAirQualityLabel","list","aqi","pm25","components","pm2_5","pm10","error","console","labels","fetchAllCitiesData","results","Promise","all","map","filter","result"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/services/weatherService.js"],"sourcesContent":["const API_KEY = '3f8a4d2a8875fb203575175662bb64d7';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\nconst cities = [\n  'Toronto',\n  'San Francisco',\n  'New York',\n  'Dallas', \n  'Boston',\n  'Miami',\n  'Houston'\n];\n\nconst fetchCityData = async (city) => {\n  try {\n    // Get weather and air quality data in a single call using coordinates\n    const geoResponse = await fetch(\n      `http://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`\n    );\n    const [geoData] = await geoResponse.json();\n    \n    const response = await fetch(\n      `${BASE_URL}/air_pollution?lat=${geoData.lat}&lon=${geoData.lon}&appid=${API_KEY}`\n    );\n    const airData = await response.json();\n\n    const weatherResponse = await fetch(\n      `${BASE_URL}/weather?lat=${geoData.lat}&lon=${geoData.lon}&units=metric&appid=${API_KEY}`\n    );\n    const weatherData = await weatherResponse.json();\n\n    return {\n      date: new Date().toISOString(),\n      city: city,\n      temp: `${weatherData.main.temp}°C`,\n      airQuality: getAirQualityLabel(airData.list[0].main.aqi),\n      pm25: airData.list[0].components.pm2_5,\n      pm10: airData.list[0].components.pm10\n    };\n  } catch (error) {\n    console.error(`Error fetching data for ${city}:`, error);\n    return null;\n  }\n};\n\nconst getAirQualityLabel = (aqi) => {\n  const labels = {\n    1: 'Good',\n    2: 'Fair',\n    3: 'Moderate',\n    4: 'Poor',\n    5: 'Very Poor'\n  };\n  return labels[aqi] || 'Unknown';\n};\n\nexport const fetchAllCitiesData = async () => {\n  const results = await Promise.all(\n    cities.map(city => fetchCityData(city))\n  );\n  return results.filter(result => result !== null);\n}; "],"mappings":"AAAA,MAAMA,OAAO,GAAG,kCAAkC;AAClD,MAAMC,QAAQ,GAAG,yCAAyC;AAE1D,MAAMC,MAAM,GAAG,CACb,SAAS,EACT,eAAe,EACf,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,SAAS,CACV;AAED,MAAMC,aAAa,GAAG,MAAOC,IAAI,IAAK;EACpC,IAAI;IACF;IACA,MAAMC,WAAW,GAAG,MAAMC,KAAK,CAC7B,kDAAkDF,IAAI,kBAAkBJ,OAAO,EACjF,CAAC;IACD,MAAM,CAACO,OAAO,CAAC,GAAG,MAAMF,WAAW,CAACG,IAAI,CAAC,CAAC;IAE1C,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAC1B,GAAGL,QAAQ,sBAAsBM,OAAO,CAACG,GAAG,QAAQH,OAAO,CAACI,GAAG,UAAUX,OAAO,EAClF,CAAC;IACD,MAAMY,OAAO,GAAG,MAAMH,QAAQ,CAACD,IAAI,CAAC,CAAC;IAErC,MAAMK,eAAe,GAAG,MAAMP,KAAK,CACjC,GAAGL,QAAQ,gBAAgBM,OAAO,CAACG,GAAG,QAAQH,OAAO,CAACI,GAAG,uBAAuBX,OAAO,EACzF,CAAC;IACD,MAAMc,WAAW,GAAG,MAAMD,eAAe,CAACL,IAAI,CAAC,CAAC;IAEhD,OAAO;MACLO,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC9Bb,IAAI,EAAEA,IAAI;MACVc,IAAI,EAAE,GAAGJ,WAAW,CAACK,IAAI,CAACD,IAAI,IAAI;MAClCE,UAAU,EAAEC,kBAAkB,CAACT,OAAO,CAACU,IAAI,CAAC,CAAC,CAAC,CAACH,IAAI,CAACI,GAAG,CAAC;MACxDC,IAAI,EAAEZ,OAAO,CAACU,IAAI,CAAC,CAAC,CAAC,CAACG,UAAU,CAACC,KAAK;MACtCC,IAAI,EAAEf,OAAO,CAACU,IAAI,CAAC,CAAC,CAAC,CAACG,UAAU,CAACE;IACnC,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2BxB,IAAI,GAAG,EAAEwB,KAAK,CAAC;IACxD,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAMP,kBAAkB,GAAIE,GAAG,IAAK;EAClC,MAAMO,MAAM,GAAG;IACb,CAAC,EAAE,MAAM;IACT,CAAC,EAAE,MAAM;IACT,CAAC,EAAE,UAAU;IACb,CAAC,EAAE,MAAM;IACT,CAAC,EAAE;EACL,CAAC;EACD,OAAOA,MAAM,CAACP,GAAG,CAAC,IAAI,SAAS;AACjC,CAAC;AAED,OAAO,MAAMQ,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,MAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC/BhC,MAAM,CAACiC,GAAG,CAAC/B,IAAI,IAAID,aAAa,CAACC,IAAI,CAAC,CACxC,CAAC;EACD,OAAO4B,OAAO,CAACI,MAAM,CAACC,MAAM,IAAIA,MAAM,KAAK,IAAI,CAAC;AAClD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}