{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Questionnaire.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient'; // Adjust this import path as needed\nimport { Chart } from 'chart.js/auto'; // Import Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [city, setCity] = useState(''); // State for the selected city\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [pm25Chart, setPm25Chart] = useState(null);\n  const [pm10Chart, setPm10Chart] = useState(null);\n  const [keyDataPoints, setKeyDataPoints] = useState([]);\n  const [error, setError] = useState(null);\n  const cityOptions = ['Toronto', 'New York', 'San Francisco', 'Dallas', 'Boston', 'Miami', 'Houston']; // Cities dropdown options\n\n  // Fetch user's saved city from the database\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      const {\n        data,\n        error\n      } = await supabase.from('user_preferences').select('city').single();\n      if (error) {\n        setError(\"Error fetching user preferences\");\n      } else {\n        setCity((data === null || data === void 0 ? void 0 : data.city) || ''); // Set the saved city or an empty string\n      }\n    };\n    fetchUserPreferences();\n  }, []);\n\n  // Fetch air quality data once the page loads\n  useEffect(() => {\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/airqualitydata');\n        const data = await response.json();\n        setAirQualityData(data);\n      } catch (error) {\n        console.error(\"Error fetching air quality data:\", error);\n        setError(\"Error fetching air quality data\");\n      }\n    };\n    fetchAirQualityData();\n  }, []);\n\n  // Initialize charts when air quality data is fetched and city changes\n  useEffect(() => {\n    if (airQualityData.length > 0 && city) {\n      const cityData = airQualityData.filter(row => row.City === city);\n      const labels = cityData.map(row => row.Date);\n      const pm25Data = cityData.map(row => parseFloat(row['PM 2.5']));\n      const pm10Data = cityData.map(row => parseFloat(row['PM 10']));\n      if (!pm25Chart) {\n        const ctx25 = document.getElementById('pm25Chart').getContext('2d');\n        const newPm25Chart = new Chart(ctx25, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'PM 2.5',\n              data: pm25Data,\n              borderColor: 'rgb(75, 192, 192)',\n              tension: 0.1\n            }]\n          },\n          options: {\n            scales: {\n              x: {\n                type: 'time',\n                time: {\n                  unit: 'day',\n                  displayFormats: {\n                    day: 'MMM DD'\n                  }\n                },\n                title: {\n                  display: true,\n                  text: 'Date'\n                }\n              },\n              y: {\n                beginAtZero: true,\n                title: {\n                  display: true,\n                  text: 'µg/m³'\n                }\n              }\n            }\n          }\n        });\n        setPm25Chart(newPm25Chart);\n      } else {\n        updateChartData(pm25Chart, labels, pm25Data);\n      }\n      if (!pm10Chart) {\n        const ctx10 = document.getElementById('pm10Chart').getContext('2d');\n        const newPm10Chart = new Chart(ctx10, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'PM 10',\n              data: pm10Data,\n              borderColor: 'rgb(255, 99, 132)',\n              tension: 0.1\n            }]\n          },\n          options: {\n            scales: {\n              x: {\n                type: 'time',\n                time: {\n                  unit: 'day',\n                  displayFormats: {\n                    day: 'MMM DD'\n                  }\n                },\n                title: {\n                  display: true,\n                  text: 'Date'\n                }\n              },\n              y: {\n                beginAtZero: true,\n                title: {\n                  display: true,\n                  text: 'µg/m³'\n                }\n              }\n            }\n          }\n        });\n        setPm10Chart(newPm10Chart);\n      } else {\n        updateChartData(pm10Chart, labels, pm10Data);\n      }\n      calculateKeyDataPoints(city);\n    }\n  }, [airQualityData, city]);\n\n  // Update chart data\n  const updateChartData = (chart, labels, data) => {\n    chart.data.labels = labels;\n    chart.data.datasets[0].data = data;\n    chart.update();\n  };\n\n  // Calculate key data points\n  const calculateKeyDataPoints = city => {\n    const cityData = airQualityData.filter(row => row.City === city);\n    const daysOver10 = cityData.filter(row => parseFloat(row['PM 2.5']) > 10).length;\n    const daysOver20 = cityData.filter(row => parseFloat(row['PM 2.5']) > 20).length;\n    const daysOver50 = cityData.filter(row => parseFloat(row['PM 2.5']) > 50).length;\n    setKeyDataPoints([`${daysOver10} days over 10 µg/m³`, `${daysOver20} days over 20 µg/m³`, `${daysOver50} days peaked at 50 µg/m³`]);\n  };\n  const handleCityChange = e => {\n    setCity(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Air Quality Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select City:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: city,\n        onChange: handleCityChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a city\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), cityOptions.map(cityOption => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: cityOption,\n          children: cityOption\n        }, cityOption, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"pm25Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"pm10Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      id: \"keyDataPoints\",\n      children: keyDataPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: point\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 46\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"ZL+1G/a50LOp/bELKPavcZ8DyPM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","jsxDEV","_jsxDEV","Dashboard","_s","city","setCity","airQualityData","setAirQualityData","pm25Chart","setPm25Chart","pm10Chart","setPm10Chart","keyDataPoints","setKeyDataPoints","error","setError","cityOptions","fetchUserPreferences","data","from","select","single","fetchAirQualityData","response","fetch","json","console","length","cityData","filter","row","City","labels","map","Date","pm25Data","parseFloat","pm10Data","ctx25","document","getElementById","getContext","newPm25Chart","type","datasets","label","borderColor","tension","options","scales","x","time","unit","displayFormats","day","title","display","text","y","beginAtZero","updateChartData","ctx10","newPm10Chart","calculateKeyDataPoints","chart","update","daysOver10","daysOver20","daysOver50","handleCityChange","e","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","cityOption","id","point","index","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Questionnaire.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient'; // Adjust this import path as needed\nimport { Chart } from 'chart.js/auto';  // Import Chart.js\n\nconst Dashboard = () => {\n  const [city, setCity] = useState('');  // State for the selected city\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [pm25Chart, setPm25Chart] = useState(null);\n  const [pm10Chart, setPm10Chart] = useState(null);\n  const [keyDataPoints, setKeyDataPoints] = useState([]);\n  const [error, setError] = useState(null);\n\n  const cityOptions = ['Toronto', 'New York', 'San Francisco', 'Dallas', 'Boston', 'Miami', 'Houston'];  // Cities dropdown options\n\n  // Fetch user's saved city from the database\n  useEffect(() => {\n    const fetchUserPreferences = async () => {\n      const { data, error } = await supabase\n        .from('user_preferences')\n        .select('city')\n        .single();\n\n      if (error) {\n        setError(\"Error fetching user preferences\");\n      } else {\n        setCity(data?.city || '');  // Set the saved city or an empty string\n      }\n    };\n\n    fetchUserPreferences();\n  }, []);\n\n  // Fetch air quality data once the page loads\n  useEffect(() => {\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/airqualitydata');\n        const data = await response.json();\n        setAirQualityData(data);\n      } catch (error) {\n        console.error(\"Error fetching air quality data:\", error);\n        setError(\"Error fetching air quality data\");\n      }\n    };\n\n    fetchAirQualityData();\n  }, []);\n\n  // Initialize charts when air quality data is fetched and city changes\n  useEffect(() => {\n    if (airQualityData.length > 0 && city) {\n      const cityData = airQualityData.filter(row => row.City === city);\n      const labels = cityData.map(row => row.Date);\n      const pm25Data = cityData.map(row => parseFloat(row['PM 2.5']));\n      const pm10Data = cityData.map(row => parseFloat(row['PM 10']));\n\n      if (!pm25Chart) {\n        const ctx25 = document.getElementById('pm25Chart').getContext('2d');\n        const newPm25Chart = new Chart(ctx25, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'PM 2.5',\n              data: pm25Data,\n              borderColor: 'rgb(75, 192, 192)',\n              tension: 0.1\n            }]\n          },\n          options: {\n            scales: {\n              x: {\n                type: 'time',\n                time: { unit: 'day', displayFormats: { day: 'MMM DD' }},\n                title: { display: true, text: 'Date' }\n              },\n              y: { beginAtZero: true, title: { display: true, text: 'µg/m³' }}\n            }\n          }\n        });\n        setPm25Chart(newPm25Chart);\n      } else {\n        updateChartData(pm25Chart, labels, pm25Data);\n      }\n\n      if (!pm10Chart) {\n        const ctx10 = document.getElementById('pm10Chart').getContext('2d');\n        const newPm10Chart = new Chart(ctx10, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'PM 10',\n              data: pm10Data,\n              borderColor: 'rgb(255, 99, 132)',\n              tension: 0.1\n            }]\n          },\n          options: {\n            scales: {\n              x: {\n                type: 'time',\n                time: { unit: 'day', displayFormats: { day: 'MMM DD' }},\n                title: { display: true, text: 'Date' }\n              },\n              y: { beginAtZero: true, title: { display: true, text: 'µg/m³' }}\n            }\n          }\n        });\n        setPm10Chart(newPm10Chart);\n      } else {\n        updateChartData(pm10Chart, labels, pm10Data);\n      }\n\n      calculateKeyDataPoints(city);\n    }\n  }, [airQualityData, city]);\n\n  // Update chart data\n  const updateChartData = (chart, labels, data) => {\n    chart.data.labels = labels;\n    chart.data.datasets[0].data = data;\n    chart.update();\n  };\n\n  // Calculate key data points\n  const calculateKeyDataPoints = (city) => {\n    const cityData = airQualityData.filter(row => row.City === city);\n    const daysOver10 = cityData.filter(row => parseFloat(row['PM 2.5']) > 10).length;\n    const daysOver20 = cityData.filter(row => parseFloat(row['PM 2.5']) > 20).length;\n    const daysOver50 = cityData.filter(row => parseFloat(row['PM 2.5']) > 50).length;\n\n    setKeyDataPoints([\n      `${daysOver10} days over 10 µg/m³`,\n      `${daysOver20} days over 20 µg/m³`,\n      `${daysOver50} days peaked at 50 µg/m³`\n    ]);\n  };\n\n  const handleCityChange = (e) => {\n    setCity(e.target.value);\n  };\n\n  return (\n    <div className=\"dashboard-container\">\n      <h2>Air Quality Dashboard</h2>\n\n      {error && <p className=\"error\">{error}</p>}\n\n      <div className=\"form-group\">\n        <label>Select City:</label>\n        <select value={city} onChange={handleCityChange}>\n          <option value=\"\">Select a city</option>\n          {cityOptions.map(cityOption => (\n            <option key={cityOption} value={cityOption}>{cityOption}</option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"charts-container\">\n        <canvas id=\"pm25Chart\"></canvas>\n        <canvas id=\"pm10Chart\"></canvas>\n      </div>\n\n      <ul id=\"keyDataPoints\">\n        {keyDataPoints.map((point, index) => <li key={index}>{point}</li>)}\n      </ul>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}