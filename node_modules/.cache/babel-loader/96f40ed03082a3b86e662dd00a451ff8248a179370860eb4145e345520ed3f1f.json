{"ast":null,"code":"var _jsxFileName = \"/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst Dashboard = ({\n  user\n}) => {\n  _s();\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n  const processChartData = (data, pollutantType) => {\n    const datasets = [{\n      label: `Original ${pollutantType}`,\n      data: data.map(d => ({\n        x: new Date(d.timestamp),\n        y: pollutantType === 'PM2.5' ? parseFloat(d.pm25) : parseFloat(d.pm10)\n      })),\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }];\n    if (hasHVAC) {\n      datasets.push({\n        label: `${pollutantType} with HVAC (50% reduction)`,\n        data: data.map(d => ({\n          x: new Date(d.timestamp),\n          y: pollutantType === 'PM2.5' ? parseFloat(d.pm25) * 0.5 : parseFloat(d.pm10) * 0.5\n        })),\n        borderColor: 'rgb(255, 159, 64)',\n        tension: 0.1\n      });\n    }\n    if (hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Ecologica (30% reduction)`,\n        data: data.map(d => ({\n          x: new Date(d.timestamp),\n          y: pollutantType === 'PM2.5' ? parseFloat(d.pm25) * 0.7 : parseFloat(d.pm10) * 0.7\n        })),\n        borderColor: 'rgb(54, 162, 235)',\n        tension: 0.1\n      });\n    }\n    if (hasHVAC && hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with HVAC + Ecologica (65% total reduction)`,\n        data: data.map(d => ({\n          x: new Date(d.timestamp),\n          y: pollutantType === 'PM2.5' ? parseFloat(d.pm25) * 0.5 * 0.7 // First HVAC (50%), then Ecologica (30%)\n          : parseFloat(d.pm10) * 0.5 * 0.7\n        })),\n        borderColor: 'rgb(153, 102, 255)',\n        tension: 0.1\n      });\n    }\n    return {\n      datasets\n    };\n  };\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      setChartData({\n        pm25: processChartData(airQualityData, 'PM2.5'),\n        pm10: processChartData(airQualityData, 'PM10')\n      });\n    }\n  }, [airQualityData, hasHVAC, hasEcologica]);\n  const getLast60Days = data => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n\n    // Debug the data structure\n    console.log('Sample data item:', data[0]);\n\n    // Parse dates and sort\n    const validData = data.map(item => ({\n      ...item,\n      date: new Date(item.date) // Changed from timestamp to date\n    })).filter(item => !isNaN(item.date.getTime())) // Ensure valid date\n    .sort((a, b) => b.date - a.date);\n    console.log('Valid data count:', validData.length);\n    if (validData.length === 0) return [];\n    const mostRecentDate = validData[0].date;\n    const cutoffDate = new Date(mostRecentDate);\n    cutoffDate.setDate(cutoffDate.getDate() - 60);\n    console.log('Date range:', {\n      mostRecent: mostRecentDate,\n      cutoff: cutoffDate\n    });\n    const filteredData = validData.filter(item => item.date >= cutoffDate).sort((a, b) => a.date - b.date);\n    console.log('Filtered data count:', filteredData.length);\n    return filteredData;\n  };\n  useEffect(() => {\n    const fetchPreferences = async () => {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from('user_preferences').select('*').eq('user_id', user.id).single();\n        if (error) throw error;\n        if (data) {\n          setHasHVAC(data.has_HVAC);\n          setHasEcologica(data.has_ecologgica);\n          setFirstName(data.first_name || '');\n          setCity(data.city || 'Toronto');\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Raw data received:', data.length, 'records');\n        console.log('First record:', data[0]);\n        const last60DaysData = getLast60Days(data);\n        setAirQualityData(last60DaysData);\n      } catch (error) {\n        console.error('Error fetching air quality:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (user) {\n      fetchPreferences();\n    }\n    fetchAirQualityData();\n  }, [user]);\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d, yyyy'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'µg/m³'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [firstName ? `${firstName}'s ` : '', city, \" Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        style: {\n          height: '400px',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"PM2.5 Levels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), chartData && /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData.pm25,\n          options: chartOptions\n        }, \"pm25-chart\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        style: {\n          height: '400px',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"PM10 Levels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), chartData && /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData.pm10,\n          options: chartOptions\n        }, \"pm10-chart\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"0DdcYgF0rjNGkHLlYGpWufk1CRw=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","jsxDEV","_jsxDEV","register","Dashboard","user","_s","airQualityData","setAirQualityData","chartData","setChartData","isLoading","setIsLoading","hasHVAC","setHasHVAC","hasEcologica","setHasEcologica","city","setCity","firstName","setFirstName","processChartData","data","pollutantType","datasets","label","map","d","x","Date","timestamp","y","parseFloat","pm25","pm10","borderColor","tension","push","length","getLast60Days","Array","isArray","console","log","validData","item","date","filter","isNaN","getTime","sort","a","b","mostRecentDate","cutoffDate","setDate","getDate","mostRecent","cutoff","filteredData","fetchPreferences","error","from","select","eq","id","single","has_HVAC","has_ecologgica","first_name","fetchAirQualityData","response","fetch","ok","Error","status","json","last60DaysData","chartOptions","responsive","maintainAspectRatio","scales","type","time","unit","displayFormats","day","title","display","text","beginAtZero","plugins","legend","position","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","width","options","_c","$RefreshReg$"],"sources":["/Users/caseyreid/Documents/GitHub/air-qualiti2/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nconst Dashboard = ({ user }) => {\n  const [airQualityData, setAirQualityData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasHVAC, setHasHVAC] = useState(false);\n  const [hasEcologica, setHasEcologica] = useState(false);\n  const [city, setCity] = useState('Toronto');\n  const [firstName, setFirstName] = useState('');\n\n  const processChartData = (data, pollutantType) => {\n    const datasets = [\n      {\n        label: `Original ${pollutantType}`,\n        data: data.map(d => ({\n          x: new Date(d.timestamp),\n          y: pollutantType === 'PM2.5' ? parseFloat(d.pm25) : parseFloat(d.pm10)\n        })),\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }\n    ];\n\n    if (hasHVAC) {\n      datasets.push({\n        label: `${pollutantType} with HVAC (50% reduction)`,\n        data: data.map(d => ({\n          x: new Date(d.timestamp),\n          y: pollutantType === 'PM2.5' \n            ? parseFloat(d.pm25) * 0.5 \n            : parseFloat(d.pm10) * 0.5\n        })),\n        borderColor: 'rgb(255, 159, 64)',\n        tension: 0.1\n      });\n    }\n\n    if (hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with Ecologica (30% reduction)`,\n        data: data.map(d => ({\n          x: new Date(d.timestamp),\n          y: pollutantType === 'PM2.5' \n            ? parseFloat(d.pm25) * 0.7 \n            : parseFloat(d.pm10) * 0.7\n        })),\n        borderColor: 'rgb(54, 162, 235)',\n        tension: 0.1\n      });\n    }\n\n    if (hasHVAC && hasEcologica) {\n      datasets.push({\n        label: `${pollutantType} with HVAC + Ecologica (65% total reduction)`,\n        data: data.map(d => ({\n          x: new Date(d.timestamp),\n          y: pollutantType === 'PM2.5' \n            ? parseFloat(d.pm25) * 0.5 * 0.7  // First HVAC (50%), then Ecologica (30%)\n            : parseFloat(d.pm10) * 0.5 * 0.7\n        })),\n        borderColor: 'rgb(153, 102, 255)',\n        tension: 0.1\n      });\n    }\n\n    return { datasets };\n  };\n\n  useEffect(() => {\n    if (airQualityData.length > 0) {\n      setChartData({\n        pm25: processChartData(airQualityData, 'PM2.5'),\n        pm10: processChartData(airQualityData, 'PM10')\n      });\n    }\n  }, [airQualityData, hasHVAC, hasEcologica]);\n\n  const getLast60Days = (data) => {\n    if (!Array.isArray(data) || data.length === 0) return [];\n\n    // Debug the data structure\n    console.log('Sample data item:', data[0]);\n\n    // Parse dates and sort\n    const validData = data\n      .map(item => ({\n        ...item,\n        date: new Date(item.date) // Changed from timestamp to date\n      }))\n      .filter(item => !isNaN(item.date.getTime())) // Ensure valid date\n      .sort((a, b) => b.date - a.date);\n\n    console.log('Valid data count:', validData.length);\n    \n    if (validData.length === 0) return [];\n\n    const mostRecentDate = validData[0].date;\n    const cutoffDate = new Date(mostRecentDate);\n    cutoffDate.setDate(cutoffDate.getDate() - 60);\n\n    console.log('Date range:', {\n      mostRecent: mostRecentDate,\n      cutoff: cutoffDate\n    });\n\n    const filteredData = validData\n      .filter(item => item.date >= cutoffDate)\n      .sort((a, b) => a.date - b.date);\n\n    console.log('Filtered data count:', filteredData.length);\n    return filteredData;\n  };\n\n  useEffect(() => {\n    const fetchPreferences = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('user_preferences')\n          .select('*')\n          .eq('user_id', user.id)\n          .single();\n\n        if (error) throw error;\n\n        if (data) {\n          setHasHVAC(data.has_HVAC);\n          setHasEcologica(data.has_ecologgica);\n          setFirstName(data.first_name || '');\n          setCity(data.city || 'Toronto');\n        }\n      } catch (error) {\n        console.error('Error fetching preferences:', error);\n      }\n    };\n\n    const fetchAirQualityData = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/airqualitydata');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Raw data received:', data.length, 'records');\n        console.log('First record:', data[0]);\n        const last60DaysData = getLast60Days(data);\n        setAirQualityData(last60DaysData);\n      } catch (error) {\n        console.error('Error fetching air quality:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (user) {\n      fetchPreferences();\n    }\n    fetchAirQualityData();\n  }, [user]);\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MMM d, yyyy'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'µg/m³'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top',\n      }\n    }\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h1>{firstName ? `${firstName}'s ` : ''}{city} Dashboard</h1>\n      \n      <div className=\"chart-container\">\n        <div className=\"chart\" style={{ height: '400px', width: '100%' }}>\n          <h2>PM2.5 Levels</h2>\n          {chartData && (\n            <Line\n              key=\"pm25-chart\"\n              data={chartData.pm25}\n              options={chartOptions}\n            />\n          )}\n        </div>\n        \n        <div className=\"chart\" style={{ height: '400px', width: '100%' }}>\n          <h2>PM10 Levels</h2>\n          {chartData && (\n            <Line\n              key=\"pm10-chart\"\n              data={chartData.pm10}\n              options={chartOptions}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}